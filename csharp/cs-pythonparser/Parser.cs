// Parser parsing module. Generated by JavaCC 21 Parser Generator. Do not edit.
// ReSharper disable InconsistentNaming
namespace org.parsers.python {
    using System;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Text;

    public class ParseException : Exception {
        public Parser Parser { get; private set; }
        public Token Token { get; private set; }
        public HashSet<TokenType> Expected { get; private set; }
        private IList<NonTerminalCall> callStack;

        public ParseException(Parser parser, HashSet<TokenType> expected) : this(parser, null, null, expected) {}

        public ParseException(Parser parser, string message, Token token = null, HashSet<TokenType> expected = null) : base(message) {
            Parser = parser;
            if (token == null) {
                token = parser.LastConsumedToken;
                if ((token != null) && (token.Next != null)) {
                    token = token.Next;
                }
            }
            Token = token;
            Expected = expected;
            callStack = new List<NonTerminalCall>(parser.ParsingStack);
        }
    }

    internal class NodeScope : List<Node> {
        private readonly NodeScope _parentScope;
        private readonly Parser _parser;

        public bool IsRootScope { get { return _parentScope == null; } }

        public Node RootNode {
            get {
                var ns = this;
                while (ns._parentScope != null) {
                    ns = ns._parentScope;
                }
                return (ns.Count == 0) ? null : ns[0];
            }
        }

        public uint NestingLevel {
            get {
                uint result = 0;
                var parent = this;
                while (parent._parentScope != null) {
                    result++;
                    parent = parent._parentScope;
                }
                return result;
            }
        }

        public NodeScope(Parser parser) {
            _parser = parser;
            _parentScope = parser.CurrentNodeScope;
            parser.CurrentNodeScope = this;
        }

        internal Node Peek() {
            Node result = null;

            if (Count > 0) {
                result = this[^1];
            }
            else if (_parentScope != null) {
                result = _parentScope.Peek();
            }
            return result;
        }

        internal Node Pop() {
            Node result = null;

            if (Count > 0) {
                result = Utils.Pop(this);
            }
            else if (_parentScope != null) {
                result = _parentScope.Pop();
            }
            return result;
        }

        internal void Poke(Node n) {
            if (Count == 0) {
                if (_parentScope != null) {
                    _parentScope.Poke(n);
                }
            }
            else {
                this[Count - 1] = n;
            }
        }

        internal void Close() {
            Debug.Assert(_parentScope != null);
            _parentScope.AddRange(this);
            _parser.CurrentNodeScope = _parentScope;
        }

        internal NodeScope Clone() {
            throw new NotImplementedException("NodeScope.Clone not yet implemented");
        }
    }


    //
    // Class that represents entering a grammar production
    //
    internal class NonTerminalCall {
        public Parser Parser { get; private set; }
        public string SourceFile { get; private set; }
        public string ProductionName { get; private set; }
        public uint Line { get; private set; }
        public uint Column { get; private set; }
        public bool ScanToEnd { get; private set; }
        public ISet<TokenType> FollowSet { get; private set; }

        internal NonTerminalCall(Parser parser, string fileName, string productionName, uint line, uint column) {
            Parser = parser;
            SourceFile = fileName;
            ProductionName = productionName;
            Line = line;
            Column = column;
            // We actually only use this when we're working with the LookaheadStack
            ScanToEnd = parser.ScanToEnd;
            FollowSet = parser.OuterFollowSet;
        }
/*
        private (string productionName, string sourceFile, uint line) CreateStackTraceElement() {
            return (ProductionName, SourceFile, Line);
        }
 */
    }

    internal class ParseState {
        public Parser Parser { get; private set; }
        public Token LastConsumed { get; private set; }
        public IList<NonTerminalCall> ParsingStack { get; private set; }
        public NodeScope NodeScope { get; private set; }

        internal ParseState(Parser parser) {
            Parser = parser;
            LastConsumed = parser.LastConsumedToken;
            ParsingStack = new List<NonTerminalCall>(parser.ParsingStack);
            NodeScope = parser.CurrentNodeScope.Clone();
        }
    }

    //
    // AST nodes
    //
    public class MatchStatement : BaseNode {
        public MatchStatement(Lexer tokenSource) : base(tokenSource) {}
    }

    public class LiteralPattern : BaseNode {
        public LiteralPattern(Lexer tokenSource) : base(tokenSource) {}
    }

    public class ExceptBlock : BaseNode {
        public ExceptBlock(Lexer tokenSource) : base(tokenSource) {}
    }

    public class StarPattern : BaseNode {
        public StarPattern(Lexer tokenSource) : base(tokenSource) {}
    }

    public class ClosedPattern : BaseNode {
        public ClosedPattern(Lexer tokenSource) : base(tokenSource) {}
    }

    public class Assignment : BaseNode {
        public Assignment(Lexer tokenSource) : base(tokenSource) {}
    }

    public class IfStatement : BaseNode {
        public IfStatement(Lexer tokenSource) : base(tokenSource) {}
    }

    public class TryStatement : BaseNode {
        public TryStatement(Lexer tokenSource) : base(tokenSource) {}
    }

    public class ReturnStatement : BaseNode {
        public ReturnStatement(Lexer tokenSource) : base(tokenSource) {}
    }

    public class NonlocalStatement : BaseNode {
        public NonlocalStatement(Lexer tokenSource) : base(tokenSource) {}
    }

    public class StarTargets : BaseNode {
        public StarTargets(Lexer tokenSource) : base(tokenSource) {}
    }

    public class MultiplicativeExpression : BaseNode {
        public MultiplicativeExpression(Lexer tokenSource) : base(tokenSource) {}
    }

    public class Patterns : BaseNode {
        public Patterns(Lexer tokenSource) : base(tokenSource) {}
    }

    public class AdditiveExpression : BaseNode {
        public AdditiveExpression(Lexer tokenSource) : base(tokenSource) {}
    }

    public class AwaitPrimary : BaseNode {
        public AwaitPrimary(Lexer tokenSource) : base(tokenSource) {}
    }

    public class Parameters : BaseNode {
        public Parameters(Lexer tokenSource) : base(tokenSource) {}
    }

    public class GenExp : BaseNode {
        public GenExp(Lexer tokenSource) : base(tokenSource) {}
    }

    public class PositionalPatterns : BaseNode {
        public PositionalPatterns(Lexer tokenSource) : base(tokenSource) {}
    }

    public class WithStatement : BaseNode {
        public WithStatement(Lexer tokenSource) : base(tokenSource) {}
    }

    public class ImportFromTargets : BaseNode {
        public ImportFromTargets(Lexer tokenSource) : base(tokenSource) {}
    }

    public class StarTarget : BaseNode {
        public StarTarget(Lexer tokenSource) : base(tokenSource) {}
    }

    public class OpenSequencePattern : BaseNode {
        public OpenSequencePattern(Lexer tokenSource) : base(tokenSource) {}
    }

    public class BitwiseXor : BaseNode {
        public BitwiseXor(Lexer tokenSource) : base(tokenSource) {}
    }

    public class AssertStatement : BaseNode {
        public AssertStatement(Lexer tokenSource) : base(tokenSource) {}
    }

    public class Module : BaseNode {
        public Module(Lexer tokenSource) : base(tokenSource) {}
    }

    public class InvocationArguments : BaseNode {
        public InvocationArguments(Lexer tokenSource) : base(tokenSource) {}
    }

    public class Group : BaseNode {
        public Group(Lexer tokenSource) : base(tokenSource) {}
    }

    public class Set : BaseNode {
        public Set(Lexer tokenSource) : base(tokenSource) {}
    }

    public class Attribute : BaseNode {
        public Attribute(Lexer tokenSource) : base(tokenSource) {}
    }

    public class WhileStatement : BaseNode {
        public WhileStatement(Lexer tokenSource) : base(tokenSource) {}
    }

    public class DelStatement : BaseNode {
        public DelStatement(Lexer tokenSource) : base(tokenSource) {}
    }

    public class DoubleStarredKeyValuePairs : BaseNode {
        public DoubleStarredKeyValuePairs(Lexer tokenSource) : base(tokenSource) {}
    }

    public class ClassDefinition : BaseNode {
        public ClassDefinition(Lexer tokenSource) : base(tokenSource) {}
    }

    public class StarExpressions : BaseNode {
        public StarExpressions(Lexer tokenSource) : base(tokenSource) {}
    }

    public class DotName : BaseNode {
        public DotName(Lexer tokenSource) : base(tokenSource) {}
    }

    public class StarNamedExpression : BaseNode {
        public StarNamedExpression(Lexer tokenSource) : base(tokenSource) {}
    }

    public class ItemsPattern : BaseNode {
        public ItemsPattern(Lexer tokenSource) : base(tokenSource) {}
    }

    public class MappingPattern : BaseNode {
        public MappingPattern(Lexer tokenSource) : base(tokenSource) {}
    }

    public class Comparison : BaseNode {
        public Comparison(Lexer tokenSource) : base(tokenSource) {}
    }

    public class Conjunction : BaseNode {
        public Conjunction(Lexer tokenSource) : base(tokenSource) {}
    }

    public class FunctionCall : BaseNode {
        public FunctionCall(Lexer tokenSource) : base(tokenSource) {}
    }

    public class ForStatement : BaseNode {
        public ForStatement(Lexer tokenSource) : base(tokenSource) {}
    }

    public class Pattern : BaseNode {
        public Pattern(Lexer tokenSource) : base(tokenSource) {}
    }

    public class Statement : BaseNode {
        public Statement(Lexer tokenSource) : base(tokenSource) {}
    }

    public class Strings : BaseNode {
        public Strings(Lexer tokenSource) : base(tokenSource) {}
    }

    public class Annotation : BaseNode {
        public Annotation(Lexer tokenSource) : base(tokenSource) {}
    }

    public class RaiseStatement : BaseNode {
        public RaiseStatement(Lexer tokenSource) : base(tokenSource) {}
    }

    public class Expression : BaseNode {
        public Expression(Lexer tokenSource) : base(tokenSource) {}
    }

    public class NamedExpression : BaseNode {
        public NamedExpression(Lexer tokenSource) : base(tokenSource) {}
    }

    public class SignedNumber : BaseNode {
        public SignedNumber(Lexer tokenSource) : base(tokenSource) {}
    }

    public class OrPattern : BaseNode {
        public OrPattern(Lexer tokenSource) : base(tokenSource) {}
    }

    public class DottedName : BaseNode {
        public DottedName(Lexer tokenSource) : base(tokenSource) {}
    }

    public class Power : BaseNode {
        public Power(Lexer tokenSource) : base(tokenSource) {}
    }

    public class Tuple : BaseNode {
        public Tuple(Lexer tokenSource) : base(tokenSource) {}
    }

    public class Slices : BaseNode {
        public Slices(Lexer tokenSource) : base(tokenSource) {}
    }

    public class SimpleStatement : BaseNode {
        public SimpleStatement(Lexer tokenSource) : base(tokenSource) {}
    }

    public class SliceExpression : BaseNode {
        public SliceExpression(Lexer tokenSource) : base(tokenSource) {}
    }

    public class KeyValuePattern : BaseNode {
        public KeyValuePattern(Lexer tokenSource) : base(tokenSource) {}
    }

    public class ImportStatement : BaseNode {
        public ImportStatement(Lexer tokenSource) : base(tokenSource) {}
    }

    public class StarExpression : BaseNode {
        public StarExpression(Lexer tokenSource) : base(tokenSource) {}
    }

    public class GenExpression : BaseNode {
        public GenExpression(Lexer tokenSource) : base(tokenSource) {}
    }

    public class FunctionDefinition : BaseNode {
        public FunctionDefinition(Lexer tokenSource) : base(tokenSource) {}
    }

    public class List : BaseNode {
        public List(Lexer tokenSource) : base(tokenSource) {}
    }

    public class SubjectExpression : BaseNode {
        public SubjectExpression(Lexer tokenSource) : base(tokenSource) {}
    }

    public class CompoundStatement : BaseNode {
        public CompoundStatement(Lexer tokenSource) : base(tokenSource) {}
    }

    public class KeyValuePair : BaseNode {
        public KeyValuePair(Lexer tokenSource) : base(tokenSource) {}
    }

    public class FinallyBlock : BaseNode {
        public FinallyBlock(Lexer tokenSource) : base(tokenSource) {}
    }

    public class ShiftExpression : BaseNode {
        public ShiftExpression(Lexer tokenSource) : base(tokenSource) {}
    }

    public class DoubleStarredKeyValuePair : BaseNode {
        public DoubleStarredKeyValuePair(Lexer tokenSource) : base(tokenSource) {}
    }

    public class DoubleStarPattern : BaseNode {
        public DoubleStarPattern(Lexer tokenSource) : base(tokenSource) {}
    }

    public class MaybeSequencePattern : BaseNode {
        public MaybeSequencePattern(Lexer tokenSource) : base(tokenSource) {}
    }

    public class Disjunction : BaseNode {
        public Disjunction(Lexer tokenSource) : base(tokenSource) {}
    }

    public class BitwiseOr : BaseNode {
        public BitwiseOr(Lexer tokenSource) : base(tokenSource) {}
    }

    public class DictComp : BaseNode {
        public DictComp(Lexer tokenSource) : base(tokenSource) {}
    }

    public class Slice : BaseNode {
        public Slice(Lexer tokenSource) : base(tokenSource) {}
    }

    public class BitwiseAnd : BaseNode {
        public BitwiseAnd(Lexer tokenSource) : base(tokenSource) {}
    }

    public class Block : BaseNode {
        public Block(Lexer tokenSource) : base(tokenSource) {}
    }

    public class SequencePattern : BaseNode {
        public SequencePattern(Lexer tokenSource) : base(tokenSource) {}
    }

    public class ElseBlock : BaseNode {
        public ElseBlock(Lexer tokenSource) : base(tokenSource) {}
    }

    public class YieldStatement : BaseNode {
        public YieldStatement(Lexer tokenSource) : base(tokenSource) {}
    }

    public class ParamMaybeDefault : BaseNode {
        public ParamMaybeDefault(Lexer tokenSource) : base(tokenSource) {}
    }

    public class Argument : BaseNode {
        public Argument(Lexer tokenSource) : base(tokenSource) {}
    }

    public class Decorators : BaseNode {
        public Decorators(Lexer tokenSource) : base(tokenSource) {}
    }

    public class CaseBlock : BaseNode {
        public CaseBlock(Lexer tokenSource) : base(tokenSource) {}
    }

    public class Inversion : BaseNode {
        public Inversion(Lexer tokenSource) : base(tokenSource) {}
    }

    public class UnaryExpression : BaseNode {
        public UnaryExpression(Lexer tokenSource) : base(tokenSource) {}
    }

    public class KeywordPattern : BaseNode {
        public KeywordPattern(Lexer tokenSource) : base(tokenSource) {}
    }

    public class KeywordPatterns : BaseNode {
        public KeywordPatterns(Lexer tokenSource) : base(tokenSource) {}
    }

    public class WithItem : BaseNode {
        public WithItem(Lexer tokenSource) : base(tokenSource) {}
    }

    public class ClassPattern : BaseNode {
        public ClassPattern(Lexer tokenSource) : base(tokenSource) {}
    }

    public class StarEtc : BaseNode {
        public StarEtc(Lexer tokenSource) : base(tokenSource) {}
    }

    public class GroupPattern : BaseNode {
        public GroupPattern(Lexer tokenSource) : base(tokenSource) {}
    }

    public class YieldExpression : BaseNode {
        public YieldExpression(Lexer tokenSource) : base(tokenSource) {}
    }

    public class GlobalStatement : BaseNode {
        public GlobalStatement(Lexer tokenSource) : base(tokenSource) {}
    }

    public class StarNamedExpressions : BaseNode {
        public StarNamedExpressions(Lexer tokenSource) : base(tokenSource) {}
    }

    public class SmallStatement : BaseNode {
        public SmallStatement(Lexer tokenSource) : base(tokenSource) {}
    }

    public class AnnotatedRhs : BaseNode {
        public AnnotatedRhs(Lexer tokenSource) : base(tokenSource) {}
    }

    public class ListComp : BaseNode {
        public ListComp(Lexer tokenSource) : base(tokenSource) {}
    }

    public class KeyWords : BaseNode {
        public KeyWords(Lexer tokenSource) : base(tokenSource) {}
    }

    public class SetComp : BaseNode {
        public SetComp(Lexer tokenSource) : base(tokenSource) {}
    }

    public class LambdaDefinition : BaseNode {
        public LambdaDefinition(Lexer tokenSource) : base(tokenSource) {}
    }

    public class ForIfClause : BaseNode {
        public ForIfClause(Lexer tokenSource) : base(tokenSource) {}
    }

    public class Dict : BaseNode {
        public Dict(Lexer tokenSource) : base(tokenSource) {}
    }

    public class SimpleAssignTarget : BaseNode {
        public SimpleAssignTarget(Lexer tokenSource) : base(tokenSource) {}
    }



    public class Parser {

        private const uint UNLIMITED = (1U << 31) - 1;

        public string InputSource { get; private set; }
        public Token LastConsumedToken { get; private set; }
        private Token currentLookaheadToken;
        public bool ScanToEnd { get; private set; }
        internal ISet<TokenType> OuterFollowSet { get; private set; }
        internal IList<NonTerminalCall> ParsingStack { get; private set; } = new List<NonTerminalCall>();
        internal readonly Lexer tokenSource;
        public bool BuildTree { get; set; } = true;
        public bool TokensAreNodes { get; set; } = true;
        public bool UnparsedTokensAreNodes { get; set; } = false;
        internal NodeScope CurrentNodeScope { get; set; }
        private TokenType? _nextTokenType;
        private uint _remainingLookahead;
        private bool _hitFailure;
        private bool _lastLookaheadSucceeded;
        private string _currentlyParsedProduction;
        private string _currentLookaheadProduction;
        private uint _lookaheadRoutineNesting;
        //private ISet<TokenType> _currentFollowSet;
        private readonly IList<NonTerminalCall> _lookaheadStack = new List<NonTerminalCall>();
        private readonly IList<ParseState> _parseStateStack = new List<ParseState>();

        public Parser(string inputSource) {
            InputSource = inputSource;
            tokenSource = new Lexer(inputSource);
            LastConsumedToken = Lexer.DummyStartToken;
            new NodeScope(this); // attaches NodeScope instance to Parser instance
        }

        public bool IsTolerant {
            get { return false; }
        }


        private void PushLastTokenBack() {
            if (PeekNode().Equals(LastConsumedToken)) {
                PopNode();
            }
            LastConsumedToken = LastConsumedToken.PreviousToken;
        }

        private void StashParseState() {
            _parseStateStack.Add(new ParseState(this));
        }

        private ParseState PopParseState() {
            return _parseStateStack.Pop();
        }

        private void RestoreStashedParseState() {
            var state = PopParseState();
            CurrentNodeScope = state.NodeScope;
            ParsingStack = state.ParsingStack;
            if (state.LastConsumed != null) {
                // REVISIT
                LastConsumedToken = state.LastConsumed;
            }
            tokenSource.Reset(LastConsumedToken);
        }

        public bool IsTreeBuildingEnabled { get { return BuildTree; } }


        //
        // the root node of the AST. It only makes sense to call
        // this after a successful parse.
        //
        public Node RootNode { get { return CurrentNodeScope.RootNode; } }

        //
        // push a node onto the top of the node stack
        //
        internal void PushNode(Node n) {
            CurrentNodeScope.Add(n);
        }

        //
        // return the node on the top of the stack, and remove it from the
        // stack
        internal Node PopNode() {
            return CurrentNodeScope.Pop();
        }

        //
        // the node currently on the top of the tree-building stack.
        //
        internal Node PeekNode() {
            return CurrentNodeScope.Peek();
        }

        //
        // Puts the node on the top of the stack. However, unlike pushNode()
        // it replaces the node that is currently on the top of the stack.
        // This is effectively equivalent to PopNode() followed by PushNode(n)
        //
        internal void PokeNode(Node n) {
            CurrentNodeScope.Poke(n);
        }

        //
        // Pop and return a number of nodes. This can be perhaps optimized
        // at the expense of encapsulation (e.g. get a slice of the underlying
        // array)
        //
        internal IList<Node> PopNodes(uint n) {
            var result = new List<Node>();
            for (uint i = 0; i < n; i++) {
                result.Add(PopNode());
            }
            return result;
        }

        //
        // return the number of Nodes on the tree-building stack in the current node
        // scope.
        internal int NodeArity { get { return CurrentNodeScope.Count; } }

        internal void ClearNodeScope() {
            CurrentNodeScope.Clear();
        }

        internal void OpenNodeScope(Node n) {
            new NodeScope(this);    // as a side-effect, attaches to parser instance
            if (n != null) {
                var next = NextToken(LastConsumedToken);
                n.TokenSource = LastConsumedToken.TokenSource;
                n.BeginOffset = next.BeginOffset;
                n.Open();
            }
        }

        /*
        * A definite node is constructed from a specified number of
        * children.  That number of nodes are popped from the stack and
        * made the children of the definite node.  Then the definite node
        * is pushed on to the stack.
        */
        private void CloseNodeScope(Node n, int num) {
            n.EndOffset = LastConsumedToken.EndOffset;
            CurrentNodeScope.Close();
            var nodes = new List<Node>();
            for (int i = 0; i < num; i++) {
                nodes.Add(PopNode());
            }
            nodes.Reverse();
            foreach (var child in nodes) {
                // FIXME deal with the UNPARSED_TOKENS_ARE_NODES case
                n.AddChild(child);
            }
            n.Close();
            PushNode(n);
        }

        /*
        * A conditional node is constructed if the condition is true.  All
        * the nodes that have been pushed since the node was opened are
        * made children of the conditional node, which is then pushed
        * on to the stack.  If the condition is false the node is not
        * constructed and they are left on the stack.
        */
        private void CloseNodeScope(Node n, bool condition) {
            if (n!= null && condition) {
                n.EndOffset = LastConsumedToken.EndOffset;
                var a = NodeArity;
                CurrentNodeScope.Close();
                var nodes = new List<Node>();
                while (a-- > 0) {
                    nodes.Add(PopNode());
                }
                nodes.Reverse();
                foreach (var child in nodes) {
                    if (UnparsedTokensAreNodes && child is Token tok) {
                        while (tok.PreviousCachedToken != null && tok.PreviousCachedToken.IsUnparsed) {
                            tok = tok.PreviousCachedToken;
                        }
                        while (tok.IsUnparsed) {
                            n.AddChild(tok);
                            tok = tok.NextCachedToken;
                        }
                    }
                    n.AddChild(child);
                }
                n.Close();
                PushNode(n);
            }
            else {
                CurrentNodeScope.Close();
            }
        }
        internal void PushOntoCallStack(string methodName, string fileName, uint line, uint column) {
            ParsingStack.Add(new NonTerminalCall(this, fileName, methodName, line, column));
        }

        internal void PopCallStack() {
            var ntc = ParsingStack.Pop();
            _currentlyParsedProduction = ntc.ProductionName;
            OuterFollowSet = ntc.FollowSet;
        }

        internal void RestoreCallStack(int prevSize) {
            while (ParsingStack.Count > prevSize) {
                PopCallStack();
            }
        }

        // If the next token is cached, it returns that
        // Otherwise, it goes to the lexer.
        private Token NextToken(Token tok) {
            Token result = tokenSource.GetNextToken(tok);
            while (result.IsUnparsed) {
                result = tokenSource.GetNextToken(result);
            }
            _nextTokenType = null;
            return result;
        }

        internal Token GetNextToken() {
            return GetToken(1);
        }

        /**
        * If we are in a lookahead, it looks ahead from the currentLookaheadToken
        * Otherwise, it is the lastConsumedToken
        */
        public Token GetToken(int index) {
            var t = (currentLookaheadToken == null) ? LastConsumedToken : currentLookaheadToken;
            for (var i = 0; i < index; i++) {
                t = NextToken(t);
            }
            return t;
        }

        internal TokenType NextTokenType {
            get {
                if (_nextTokenType == null) {
                    _nextTokenType = NextToken(LastConsumedToken).Type;
                }
                return _nextTokenType.Value;
            }
        }

        internal bool ActivateTokenTypes(TokenType type, params TokenType[] types) {
            var result = false;
            var att = tokenSource.ActiveTokenTypes;
            if (!att.Contains(type)) {
                result = true;
                att.Add(type);
            }
            foreach (var tt in types) {
                if (!att.Contains(tt)) {
                    result = true;
                    att.Add(tt);
                }
            }
            if (result) {
                tokenSource.Reset(GetToken(0));
                _nextTokenType = null;
            }
            return result;
        }

        internal bool DeactivateTokenTypes(TokenType type, params TokenType[] types) {
            var result = false;
            var att = tokenSource.ActiveTokenTypes;

            if (att.Contains(type)) {
                result = true;
                att.Remove(type);
            }
            foreach (var tt in types) {
                if (att.Contains(tt)) {
                    result = true;
                    att.Remove(tt);
                }
            }
            if (result) {
                tokenSource.Reset(GetToken(0));
                _nextTokenType = null;
            }
            return result;
        }

        private void Fail(string message) {
            if (currentLookaheadToken == null) {
                throw new ParseException(this, message);
            }
            _hitFailure = true;
        }

        /**
        *Are we in the production of the given name, either scanning ahead or parsing?
        */
        private bool IsInProduction(params string[] prodNames) {
            if (_currentlyParsedProduction != null) {
                foreach (var name in prodNames) {
                    if (_currentlyParsedProduction.Equals(name)) return true;
                }
            }
            if (_currentLookaheadProduction != null ) {
                foreach (var name in prodNames) {
                    if (_currentLookaheadProduction.Equals(name)) return true;
                }
            }
            var it = new BackwardIterator<NonTerminalCall>(ParsingStack, _lookaheadStack);
            while (it.HasNext()) {
                var ntc = it.Next();
                foreach (var name in prodNames) {
                    if (ntc.ProductionName.Equals(name)) {
                        return true;
                    }
                }
            }
            return false;
        }
// ===================================================================
// Start of methods for BNF Productions
// This code is generated by the ParserProductions.inc.ftl template.
// ===================================================================
        private static readonly HashSet<TokenType> Module_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.EOF,
            TokenType.AT,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.ASYNC,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CLASS,
            TokenType.CONTINUE,
            TokenType.DEF,
            TokenType.DEL,
            TokenType.FOR,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.IF,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.MATCH,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.TRY,
            TokenType.WHILE,
            TokenType.WITH,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:23:1
        public Module ParseModule() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "Module";
     
            Module Module1 = null;
            if (BuildTree) {
                Module1 = new Module(tokenSource);
                OpenNodeScope(Module1);
            }

            ParseException parseException1 = null;
            var callStackSize2 = ParsingStack.Count;
            try {
                // Code for ZeroOrMore specified at:
                // Python.javacc:24:4
                while (true) {
                    if (!((first_setΣPython_javaccΣ24Σ5.Contains(NextTokenType)))) break;
                    // Code for NonTerminal specified at:
                    // Python.javacc:24:5
                    PushOntoCallStack("Module", "Python.javacc", 24, 5);
                    OuterFollowSet = follow_setΣPython_javaccΣ24Σ5Σ;
                    try {
                        ParseStatement();
                    }
                    finally {
                        PopCallStack();
                    }


                }

                // Code for EndOfFile specified at:
                // Python.javacc:25:4
                ConsumeToken(TokenType.EOF);

                // Code for CodeBlock specified at:
                // Python.javacc:26:4
                return Module1;


            }
            catch (ParseException e) {
                parseException1 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize2);
                if (Module1 != null) {
                    if (parseException1 == null) {
                        CloseNodeScope(Module1, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseModule

        private static readonly HashSet<TokenType> Number_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX
        );

        
        // Python.javacc:29:1
        public void ParseNumber() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "Number";
            // Code for ExpansionChoice specified at:
            // Python.javacc:30:3
            if ((NextTokenType == TokenType.HEXNUMBER)) {
                // Code for RegexpRef specified at:
                // Python.javacc:30:3
                ConsumeToken(TokenType.HEXNUMBER);


            }
            else if ((NextTokenType == TokenType.BINNUMBER)) {
                // Code for RegexpRef specified at:
                // Python.javacc:30:17
                ConsumeToken(TokenType.BINNUMBER);


            }
            else if ((NextTokenType == TokenType.OCTNUMBER)) {
                // Code for RegexpRef specified at:
                // Python.javacc:30:31
                ConsumeToken(TokenType.OCTNUMBER);


            }
            else if ((NextTokenType == TokenType.DECNUMBER)) {
                // Code for RegexpRef specified at:
                // Python.javacc:30:45
                ConsumeToken(TokenType.DECNUMBER);


            }
            else if ((NextTokenType == TokenType.FLOAT)) {
                // Code for RegexpRef specified at:
                // Python.javacc:30:59
                ConsumeToken(TokenType.FLOAT);


            }
            else if ((NextTokenType == TokenType.COMPLEX)) {
                // Code for RegexpRef specified at:
                // Python.javacc:30:69
                ConsumeToken(TokenType.COMPLEX);


            }
            else {
                PushOntoCallStack("Number", "Python.javacc", 30, 3);
                throw new ParseException(this, Number_FIRST_SET);
            }

        }
        // end of ParseNumber

        private static readonly HashSet<TokenType> SignedNumber_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.MINUS,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX
        );

        
        // Python.javacc:33:1
        public void ParseSignedNumber() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "SignedNumber";
     
            SignedNumber SignedNumber2 = null;
            if (BuildTree) {
                SignedNumber2 = new SignedNumber(tokenSource);
                OpenNodeScope(SignedNumber2);
            }

            ParseException parseException58 = null;
            var callStackSize59 = ParsingStack.Count;
            try {
                // Code for ZeroOrOne specified at:
                // Python.javacc:34:3
                if ((NextTokenType == TokenType.MINUS)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:34:4
                    ConsumeToken(TokenType.MINUS);


                }

                // Code for NonTerminal specified at:
                // Python.javacc:35:3
                PushOntoCallStack("SignedNumber", "Python.javacc", 35, 3);
                if (OuterFollowSet != null) {
                    var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ35Σ3);
                    newFollowSet.UnionWith(OuterFollowSet);
                    OuterFollowSet = newFollowSet;
                }
                try {
                    ParseNumber();
                }
                finally {
                    PopCallStack();
                }

                // Code for ZeroOrOne specified at:
                // Python.javacc:36:3
                if ((NextTokenType == TokenType.MINUS) || (NextTokenType == TokenType.PLUS)) {
                    if ((NextTokenType == TokenType.PLUS)) {
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:36:5
                        ConsumeToken(TokenType.PLUS);


                    }
                    else if ((NextTokenType == TokenType.MINUS)) {
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:36:9
                        ConsumeToken(TokenType.MINUS);


                    }
                    else {
                        PushOntoCallStack("SignedNumber", "Python.javacc", 36, 5);
                        throw new ParseException(this, first_setΣPython_javaccΣ36Σ5);
                    }

                    // Code for RegexpRef specified at:
                    // Python.javacc:36:14
                    ConsumeToken(TokenType.COMPLEX);


                }

            }
            catch (ParseException e) {
                parseException58 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize59);
                if (SignedNumber2 != null) {
                    if (parseException58 == null) {
                        CloseNodeScope(SignedNumber2, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseSignedNumber

        private static readonly HashSet<TokenType> Strings_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.STRING_LITERAL
        );

        
        // Python.javacc:39:1
        public void ParseStrings() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "Strings";
     
            Strings Strings3 = null;
            if (BuildTree) {
                Strings3 = new Strings(tokenSource);
                OpenNodeScope(Strings3);
            }

            ParseException parseException98 = null;
            var callStackSize99 = ParsingStack.Count;
            try {
                // Code for OneOrMore specified at:
                // Python.javacc:39:11
                while (true) {
                    // Code for RegexpRef specified at:
                    // Python.javacc:39:12
                    ConsumeToken(TokenType.STRING_LITERAL);



                    if (!((NextTokenType == TokenType.STRING_LITERAL))) break;
                }

            }
            catch (ParseException e) {
                parseException98 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize99);
                if (Strings3 != null) {
                    if (parseException98 == null) {
                        CloseNodeScope(Strings3, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseStrings

        private static readonly HashSet<TokenType> AtomicExpression_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:41:1
        public void ParseAtomicExpression() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "AtomicExpression";
            // Code for ExpansionChoice specified at:
            // Python.javacc:42:5
            if ((NextTokenType == TokenType.NAME)) {
                // Code for RegexpRef specified at:
                // Python.javacc:42:5
                ConsumeToken(TokenType.NAME);


            }
            else if ((first_setΣPython_javaccΣ44Σ5.Contains(NextTokenType))) {
                // Code for NonTerminal specified at:
                // Python.javacc:44:5
                PushOntoCallStack("AtomicExpression", "Python.javacc", 44, 5);
                try {
                    ParseNumber();
                }
                finally {
                    PopCallStack();
                }


            }
            else if ((NextTokenType == TokenType.STRING_LITERAL)) {
                // Code for NonTerminal specified at:
                // Python.javacc:46:5
                PushOntoCallStack("AtomicExpression", "Python.javacc", 46, 5);
                try {
                    ParseStrings();
                }
                finally {
                    PopCallStack();
                }


            }
            else if ((NextTokenType == TokenType.TRUE)) {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:48:5
                ConsumeToken(TokenType.TRUE);


            }
            else if ((NextTokenType == TokenType.FALSE)) {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:50:5
                ConsumeToken(TokenType.FALSE);


            }
            else if ((NextTokenType == TokenType.NONE)) {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:52:5
                ConsumeToken(TokenType.NONE);


            }
            else if ((NextTokenType == TokenType.PEG_PARSER)) {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:54:5
                ConsumeToken(TokenType.PEG_PARSER);


            }
            else if ((NextTokenType == TokenType.LPAREN)) {
                if (scanΣPython_javaccΣ56Σ6()) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:56:6
                    PushOntoCallStack("AtomicExpression", "Python.javacc", 56, 6);
                    try {
                        ParseTuple();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if (scanΣPython_javaccΣ56Σ14()) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:56:14
                    PushOntoCallStack("AtomicExpression", "Python.javacc", 56, 14);
                    try {
                        ParseGenExp();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if ((NextTokenType == TokenType.LPAREN)) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:56:23
                    PushOntoCallStack("AtomicExpression", "Python.javacc", 56, 23);
                    try {
                        ParseGroup();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else {
                    PushOntoCallStack("AtomicExpression", "Python.javacc", 56, 6);
                    throw new ParseException(this, first_setΣPython_javaccΣ56Σ6);
                }


            }
            else if ((NextTokenType == TokenType.LBRACKET)) {
                if (scanΣPython_javaccΣ58Σ6()) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:58:6
                    PushOntoCallStack("AtomicExpression", "Python.javacc", 58, 6);
                    try {
                        ParseListComp();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if ((NextTokenType == TokenType.LBRACKET)) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:58:17
                    PushOntoCallStack("AtomicExpression", "Python.javacc", 58, 17);
                    try {
                        ParseList();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else {
                    PushOntoCallStack("AtomicExpression", "Python.javacc", 58, 6);
                    throw new ParseException(this, first_setΣPython_javaccΣ58Σ6);
                }


            }
            else if ((NextTokenType == TokenType.LBRACE)) {
                if (scanΣPython_javaccΣ60Σ6()) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:60:6
                    PushOntoCallStack("AtomicExpression", "Python.javacc", 60, 6);
                    try {
                        ParseSetComp();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if (scanΣPython_javaccΣ60Σ16()) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:60:16
                    PushOntoCallStack("AtomicExpression", "Python.javacc", 60, 16);
                    try {
                        ParseDictComp();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if (scanΣPython_javaccΣ60Σ27()) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:60:27
                    PushOntoCallStack("AtomicExpression", "Python.javacc", 60, 27);
                    try {
                        ParseDict();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if ((NextTokenType == TokenType.LBRACE)) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:60:34
                    PushOntoCallStack("AtomicExpression", "Python.javacc", 60, 34);
                    try {
                        ParseSet();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else {
                    PushOntoCallStack("AtomicExpression", "Python.javacc", 60, 6);
                    throw new ParseException(this, first_setΣPython_javaccΣ60Σ6);
                }


            }
            else if ((NextTokenType == TokenType.ELLIPSIS)) {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:62:5
                ConsumeToken(TokenType.ELLIPSIS);


            }
            else {
                PushOntoCallStack("AtomicExpression", "Python.javacc", 42, 5);
                throw new ParseException(this, AtomicExpression_FIRST_SET);
            }

        }
        // end of ParseAtomicExpression

        private static readonly HashSet<TokenType> Slice_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.COLON,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:65:1
        public void ParseSlice() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "Slice";
            // Code for ExpansionChoice specified at:
            // Python.javacc:66:5
     
            Slice Slice4 = null;
            if (BuildTree) {
                Slice4 = new Slice(tokenSource);
                OpenNodeScope(Slice4);
            }

            ParseException parseException236 = null;
            var callStackSize237 = ParsingStack.Count;
            try {
                if (scanΣPython_javaccΣ66Σ5()) {
                    // Code for ZeroOrOne specified at:
                    // Python.javacc:66:5
                    if ((first_setΣPython_javaccΣ66Σ6.Contains(NextTokenType))) {
                        // Code for NonTerminal specified at:
                        // Python.javacc:66:6
                        PushOntoCallStack("Slice", "Python.javacc", 66, 6);
                        OuterFollowSet = follow_setΣPython_javaccΣ66Σ6Σ;
                        try {
                            ParseExpression();
                        }
                        finally {
                            PopCallStack();
                        }


                    }

                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:66:18
                    ConsumeToken(TokenType.COLON);

                    // Code for ZeroOrOne specified at:
                    // Python.javacc:66:27
                    if ((first_setΣPython_javaccΣ66Σ28.Contains(NextTokenType))) {
                        // Code for NonTerminal specified at:
                        // Python.javacc:66:28
                        PushOntoCallStack("Slice", "Python.javacc", 66, 28);
                        if (OuterFollowSet != null) {
                            var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ66Σ28Σ);
                            newFollowSet.UnionWith(OuterFollowSet);
                            OuterFollowSet = newFollowSet;
                        }
                        try {
                            ParseExpression();
                        }
                        finally {
                            PopCallStack();
                        }


                    }

                    // Code for ZeroOrOne specified at:
                    // Python.javacc:66:40
                    if ((NextTokenType == TokenType.COLON)) {
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:66:41
                        ConsumeToken(TokenType.COLON);

                        // Code for ZeroOrOne specified at:
                        // Python.javacc:66:45
                        if ((first_setΣPython_javaccΣ66Σ46.Contains(NextTokenType))) {
                            // Code for NonTerminal specified at:
                            // Python.javacc:66:46
                            PushOntoCallStack("Slice", "Python.javacc", 66, 46);
                            try {
                                ParseExpression();
                            }
                            finally {
                                PopCallStack();
                            }


                        }


                    }


                }
                else if ((first_setΣPython_javaccΣ68Σ5.Contains(NextTokenType))) {
                    // Code for ZeroOrOne specified at:
                    // Python.javacc:68:5
                    if (scanΣPython_javaccΣ68Σ6()) {
                        // Code for RegexpRef specified at:
                        // Python.javacc:68:9
                        ConsumeToken(TokenType.NAME);

                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:68:16
                        ConsumeToken(TokenType.COLONEQUALS);


                    }

                    // Code for NonTerminal specified at:
                    // Python.javacc:68:22
                    PushOntoCallStack("Slice", "Python.javacc", 68, 22);
                    try {
                        ParseExpression();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else {
                    PushOntoCallStack("Slice", "Python.javacc", 66, 5);
                    throw new ParseException(this, Slice_FIRST_SET);
                }
            }
            catch (ParseException e) {
                parseException236 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize237);
                if (Slice4 != null) {
                    if (parseException236 == null) {
                        CloseNodeScope(Slice4, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseSlice

        private static readonly HashSet<TokenType> Slices_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACKET
        );

        
        // Python.javacc:71:1
        public void ParseSlices() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "Slices";
     
            Slices Slices5 = null;
            if (BuildTree) {
                Slices5 = new Slices(tokenSource);
                OpenNodeScope(Slices5);
            }

            ParseException parseException299 = null;
            var callStackSize300 = ParsingStack.Count;
            try {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:71:10
                ConsumeToken(TokenType.LBRACKET);

                // Code for NonTerminal specified at:
                // Python.javacc:71:14
                PushOntoCallStack("Slices", "Python.javacc", 71, 14);
                OuterFollowSet = follow_setΣPython_javaccΣ71Σ14;
                try {
                    ParseSlice();
                }
                finally {
                    PopCallStack();
                }

                // Code for ZeroOrMore specified at:
                // Python.javacc:71:20
                while (true) {
                    if (!(scanΣPython_javaccΣ71Σ21())) break;
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:71:21
                    ConsumeToken(TokenType.COMMA);

                    // Code for NonTerminal specified at:
                    // Python.javacc:71:31
                    PushOntoCallStack("Slices", "Python.javacc", 71, 31);
                    OuterFollowSet = follow_setΣPython_javaccΣ71Σ31;
                    try {
                        ParseSlice();
                    }
                    finally {
                        PopCallStack();
                    }


                }

                // Code for ZeroOrOne specified at:
                // Python.javacc:71:39
                if ((NextTokenType == TokenType.COMMA)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:71:40
                    ConsumeToken(TokenType.COMMA);


                }

                // Code for RegexpStringLiteral specified at:
                // Python.javacc:71:45
                ConsumeToken(TokenType.RBRACKET);

            }
            catch (ParseException e) {
                parseException299 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize300);
                if (Slices5 != null) {
                    if (parseException299 == null) {
                        CloseNodeScope(Slices5, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseSlices

        private static readonly HashSet<TokenType> Statement_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.AT,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.ASYNC,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CLASS,
            TokenType.CONTINUE,
            TokenType.DEF,
            TokenType.DEL,
            TokenType.FOR,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.IF,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.MATCH,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.TRY,
            TokenType.WHILE,
            TokenType.WITH,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:73:1
        public void ParseStatement() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "Statement";
            // Code for ExpansionChoice specified at:
            // Python.javacc:74:4
     
            Statement Statement6 = null;
            if (BuildTree) {
                Statement6 = new Statement(tokenSource);
                OpenNodeScope(Statement6);
            }

            ParseException parseException332 = null;
            var callStackSize333 = ParsingStack.Count;
            try {
                if (scanΣPython_javaccΣ74Σ4()) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:74:4
                    PushOntoCallStack("Statement", "Python.javacc", 74, 4);
                    try {
                        ParseMatchStatement();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if ((first_setΣPython_javaccΣ76Σ4.Contains(NextTokenType))) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:76:4
                    PushOntoCallStack("Statement", "Python.javacc", 76, 4);
                    try {
                        ParseSimpleStatement();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if ((first_setΣPython_javaccΣ78Σ4.Contains(NextTokenType))) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:78:4
                    PushOntoCallStack("Statement", "Python.javacc", 78, 4);
                    try {
                        ParseCompoundStatement();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else {
                    PushOntoCallStack("Statement", "Python.javacc", 74, 4);
                    throw new ParseException(this, Statement_FIRST_SET);
                }
            }
            catch (ParseException e) {
                parseException332 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize333);
                if (Statement6 != null) {
                    if (parseException332 == null) {
                        CloseNodeScope(Statement6, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseStatement

        private static readonly HashSet<TokenType> SimpleStatement_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CONTINUE,
            TokenType.DEL,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:81:1
        public void ParseSimpleStatement() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "SimpleStatement";
     
            SimpleStatement SimpleStatement7 = null;
            if (BuildTree) {
                SimpleStatement7 = new SimpleStatement(tokenSource);
                OpenNodeScope(SimpleStatement7);
            }

            ParseException parseException353 = null;
            var callStackSize354 = ParsingStack.Count;
            try {
                // Code for NonTerminal specified at:
                // Python.javacc:81:24
                PushOntoCallStack("SimpleStatement", "Python.javacc", 81, 24);
                OuterFollowSet = follow_setΣPython_javaccΣ81Σ24;
                try {
                    ParseSmallStatement();
                }
                finally {
                    PopCallStack();
                }

                // Code for ZeroOrMore specified at:
                // Python.javacc:81:39
                while (true) {
                    if (!(scanΣPython_javaccΣ81Σ40())) break;
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:81:40
                    ConsumeToken(TokenType.SEMICOLON);

                    // Code for NonTerminal specified at:
                    // Python.javacc:81:50
                    PushOntoCallStack("SimpleStatement", "Python.javacc", 81, 50);
                    OuterFollowSet = follow_setΣPython_javaccΣ81Σ50;
                    try {
                        ParseSmallStatement();
                    }
                    finally {
                        PopCallStack();
                    }


                }

                // Code for ZeroOrOne specified at:
                // Python.javacc:81:67
                if ((NextTokenType == TokenType.SEMICOLON)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:81:68
                    ConsumeToken(TokenType.SEMICOLON);


                }

                // Code for RegexpRef specified at:
                // Python.javacc:81:73
                ConsumeToken(TokenType.NEWLINE);

            }
            catch (ParseException e) {
                parseException353 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize354);
                if (SimpleStatement7 != null) {
                    if (parseException353 == null) {
                        CloseNodeScope(SimpleStatement7, NodeArity>2);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseSimpleStatement

        private static readonly HashSet<TokenType> SmallStatement_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CONTINUE,
            TokenType.DEL,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:83:1
        public void ParseSmallStatement() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "SmallStatement";
            // Code for ExpansionChoice specified at:
            // Python.javacc:84:4
     
            SmallStatement SmallStatement8 = null;
            if (BuildTree) {
                SmallStatement8 = new SmallStatement(tokenSource);
                OpenNodeScope(SmallStatement8);
            }

            ParseException parseException383 = null;
            var callStackSize384 = ParsingStack.Count;
            try {
                if (scanΣPython_javaccΣ84Σ4()) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:84:4
                    PushOntoCallStack("SmallStatement", "Python.javacc", 84, 4);
                    try {
                        ParseAssignment();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if ((first_setΣPython_javaccΣ86Σ4.Contains(NextTokenType))) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:86:4
                    PushOntoCallStack("SmallStatement", "Python.javacc", 86, 4);
                    try {
                        ParseStarExpressions();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if ((NextTokenType == TokenType.RETURN)) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:88:4
                    PushOntoCallStack("SmallStatement", "Python.javacc", 88, 4);
                    try {
                        ParseReturnStatement();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if ((NextTokenType == TokenType.FROM) || (NextTokenType == TokenType.IMPORT)) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:90:4
                    PushOntoCallStack("SmallStatement", "Python.javacc", 90, 4);
                    try {
                        ParseImportStatement();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if ((NextTokenType == TokenType.GLOBAL)) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:92:4
                    PushOntoCallStack("SmallStatement", "Python.javacc", 92, 4);
                    try {
                        ParseGlobalStatement();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if ((NextTokenType == TokenType.NONLOCAL)) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:94:4
                    PushOntoCallStack("SmallStatement", "Python.javacc", 94, 4);
                    try {
                        ParseNonlocalStatement();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if ((NextTokenType == TokenType.BREAK)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:96:4
                    ConsumeToken(TokenType.BREAK);


                }
                else if ((NextTokenType == TokenType.CONTINUE)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:98:4
                    ConsumeToken(TokenType.CONTINUE);


                }
                else if ((NextTokenType == TokenType.PASS)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:100:4
                    ConsumeToken(TokenType.PASS);


                }
                else if ((NextTokenType == TokenType.DEL)) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:102:4
                    PushOntoCallStack("SmallStatement", "Python.javacc", 102, 4);
                    try {
                        ParseDelStatement();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if ((NextTokenType == TokenType._ASSERT)) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:104:4
                    PushOntoCallStack("SmallStatement", "Python.javacc", 104, 4);
                    try {
                        ParseAssertStatement();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if ((NextTokenType == TokenType.RAISE)) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:106:4
                    PushOntoCallStack("SmallStatement", "Python.javacc", 106, 4);
                    try {
                        ParseRaiseStatement();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if ((NextTokenType == TokenType.YIELD)) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:108:4
                    PushOntoCallStack("SmallStatement", "Python.javacc", 108, 4);
                    try {
                        ParseYieldStatement();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else {
                    PushOntoCallStack("SmallStatement", "Python.javacc", 84, 4);
                    throw new ParseException(this, SmallStatement_FIRST_SET);
                }
            }
            catch (ParseException e) {
                parseException383 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize384);
                if (SmallStatement8 != null) {
                    if (parseException383 == null) {
                        CloseNodeScope(SmallStatement8, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseSmallStatement

        private static readonly HashSet<TokenType> CompoundStatement_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.AT,
            TokenType.ASYNC,
            TokenType.CLASS,
            TokenType.DEF,
            TokenType.FOR,
            TokenType.IF,
            TokenType.TRY,
            TokenType.WHILE,
            TokenType.WITH
        );

        
        // Python.javacc:111:1
        public void ParseCompoundStatement() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "CompoundStatement";
            // Code for ExpansionChoice specified at:
            // Python.javacc:112:5
     
            CompoundStatement CompoundStatement9 = null;
            if (BuildTree) {
                CompoundStatement9 = new CompoundStatement(tokenSource);
                OpenNodeScope(CompoundStatement9);
            }

            ParseException parseException464 = null;
            var callStackSize465 = ParsingStack.Count;
            try {
                if (scanΣPython_javaccΣ112Σ5()) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:112:5
                    PushOntoCallStack("CompoundStatement", "Python.javacc", 112, 5);
                    try {
                        ParseFunctionDefinition();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if ((NextTokenType == TokenType.IF)) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:114:5
                    PushOntoCallStack("CompoundStatement", "Python.javacc", 114, 5);
                    try {
                        ParseIfStatement();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if (scanΣPython_javaccΣ116Σ5()) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:116:5
                    PushOntoCallStack("CompoundStatement", "Python.javacc", 116, 5);
                    try {
                        ParseClassDefinition();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if (scanΣPython_javaccΣ118Σ5()) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:118:5
                    PushOntoCallStack("CompoundStatement", "Python.javacc", 118, 5);
                    try {
                        ParseWithStatement();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if ((NextTokenType == TokenType.WHILE)) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:120:5
                    PushOntoCallStack("CompoundStatement", "Python.javacc", 120, 5);
                    try {
                        ParseWhileStatement();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if (scanΣPython_javaccΣ122Σ5()) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:122:5
                    PushOntoCallStack("CompoundStatement", "Python.javacc", 122, 5);
                    try {
                        ParseForStatement();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if ((NextTokenType == TokenType.TRY)) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:124:5
                    PushOntoCallStack("CompoundStatement", "Python.javacc", 124, 5);
                    try {
                        ParseTryStatement();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else {
                    PushOntoCallStack("CompoundStatement", "Python.javacc", 112, 5);
                    throw new ParseException(this, CompoundStatement_FIRST_SET);
                }
            }
            catch (ParseException e) {
                parseException464 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize465);
                if (CompoundStatement9 != null) {
                    if (parseException464 == null) {
                        CloseNodeScope(CompoundStatement9, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseCompoundStatement

        private static readonly HashSet<TokenType> ReturnStatement_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.RETURN
        );

        
        // Python.javacc:127:1
        public void ParseReturnStatement() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "ReturnStatement";
     
            ReturnStatement ReturnStatement10 = null;
            if (BuildTree) {
                ReturnStatement10 = new ReturnStatement(tokenSource);
                OpenNodeScope(ReturnStatement10);
            }

            ParseException parseException509 = null;
            var callStackSize510 = ParsingStack.Count;
            try {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:127:19
                ConsumeToken(TokenType.RETURN);

                // Code for ZeroOrOne specified at:
                // Python.javacc:127:28
                if ((first_setΣPython_javaccΣ127Σ29.Contains(NextTokenType))) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:127:29
                    PushOntoCallStack("ReturnStatement", "Python.javacc", 127, 29);
                    try {
                        ParseStarExpressions();
                    }
                    finally {
                        PopCallStack();
                    }


                }

            }
            catch (ParseException e) {
                parseException509 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize510);
                if (ReturnStatement10 != null) {
                    if (parseException509 == null) {
                        CloseNodeScope(ReturnStatement10, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseReturnStatement

        private static readonly HashSet<TokenType> GlobalStatement_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.GLOBAL
        );

        
        // Python.javacc:129:1
        public void ParseGlobalStatement() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "GlobalStatement";
     
            GlobalStatement GlobalStatement11 = null;
            if (BuildTree) {
                GlobalStatement11 = new GlobalStatement(tokenSource);
                OpenNodeScope(GlobalStatement11);
            }

            ParseException parseException524 = null;
            var callStackSize525 = ParsingStack.Count;
            try {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:129:19
                ConsumeToken(TokenType.GLOBAL);

                // Code for RegexpRef specified at:
                // Python.javacc:129:28
                ConsumeToken(TokenType.NAME);

                // Code for ZeroOrMore specified at:
                // Python.javacc:129:35
                while (true) {
                    if (!((NextTokenType == TokenType.COMMA))) break;
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:129:36
                    ConsumeToken(TokenType.COMMA);

                    // Code for RegexpRef specified at:
                    // Python.javacc:129:40
                    ConsumeToken(TokenType.NAME);


                }

            }
            catch (ParseException e) {
                parseException524 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize525);
                if (GlobalStatement11 != null) {
                    if (parseException524 == null) {
                        CloseNodeScope(GlobalStatement11, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseGlobalStatement

        private static readonly HashSet<TokenType> NonlocalStatement_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.NONLOCAL
        );

        
        // Python.javacc:131:1
        public void ParseNonlocalStatement() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "NonlocalStatement";
     
            NonlocalStatement NonlocalStatement12 = null;
            if (BuildTree) {
                NonlocalStatement12 = new NonlocalStatement(tokenSource);
                OpenNodeScope(NonlocalStatement12);
            }

            ParseException parseException545 = null;
            var callStackSize546 = ParsingStack.Count;
            try {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:131:21
                ConsumeToken(TokenType.NONLOCAL);

                // Code for RegexpRef specified at:
                // Python.javacc:131:32
                ConsumeToken(TokenType.NAME);

                // Code for ZeroOrMore specified at:
                // Python.javacc:131:39
                while (true) {
                    if (!((NextTokenType == TokenType.COMMA))) break;
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:131:40
                    ConsumeToken(TokenType.COMMA);

                    // Code for RegexpRef specified at:
                    // Python.javacc:131:44
                    ConsumeToken(TokenType.NAME);


                }

            }
            catch (ParseException e) {
                parseException545 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize546);
                if (NonlocalStatement12 != null) {
                    if (parseException545 == null) {
                        CloseNodeScope(NonlocalStatement12, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseNonlocalStatement

        private static readonly HashSet<TokenType> AssertStatement_FIRST_SET = Utils.GetOrMakeSet(
            TokenType._ASSERT
        );

        
        // Python.javacc:133:1
        public void ParseAssertStatement() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "AssertStatement";
     
            AssertStatement AssertStatement13 = null;
            if (BuildTree) {
                AssertStatement13 = new AssertStatement(tokenSource);
                OpenNodeScope(AssertStatement13);
            }

            ParseException parseException566 = null;
            var callStackSize567 = ParsingStack.Count;
            try {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:133:19
                ConsumeToken(TokenType._ASSERT);

                // Code for NonTerminal specified at:
                // Python.javacc:133:28
                PushOntoCallStack("AssertStatement", "Python.javacc", 133, 28);
                if (OuterFollowSet != null) {
                    var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ133Σ28);
                    newFollowSet.UnionWith(OuterFollowSet);
                    OuterFollowSet = newFollowSet;
                }
                try {
                    ParseExpression();
                }
                finally {
                    PopCallStack();
                }

                // Code for ZeroOrMore specified at:
                // Python.javacc:133:39
                while (true) {
                    if (!((NextTokenType == TokenType.COMMA))) break;
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:133:40
                    ConsumeToken(TokenType.COMMA);

                    // Code for NonTerminal specified at:
                    // Python.javacc:133:44
                    PushOntoCallStack("AssertStatement", "Python.javacc", 133, 44);
                    if (OuterFollowSet != null) {
                        var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ133Σ44);
                        newFollowSet.UnionWith(OuterFollowSet);
                        OuterFollowSet = newFollowSet;
                    }
                    try {
                        ParseExpression();
                    }
                    finally {
                        PopCallStack();
                    }


                }

            }
            catch (ParseException e) {
                parseException566 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize567);
                if (AssertStatement13 != null) {
                    if (parseException566 == null) {
                        CloseNodeScope(AssertStatement13, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseAssertStatement

        private static readonly HashSet<TokenType> RaiseStatement_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.RAISE
        );

        
        // Python.javacc:135:1
        public void ParseRaiseStatement() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "RaiseStatement";
     
            RaiseStatement RaiseStatement14 = null;
            if (BuildTree) {
                RaiseStatement14 = new RaiseStatement(tokenSource);
                OpenNodeScope(RaiseStatement14);
            }

            ParseException parseException587 = null;
            var callStackSize588 = ParsingStack.Count;
            try {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:135:18
                ConsumeToken(TokenType.RAISE);

                // Code for ZeroOrOne specified at:
                // Python.javacc:135:26
                if ((first_setΣPython_javaccΣ135Σ28.Contains(NextTokenType))) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:135:28
                    PushOntoCallStack("RaiseStatement", "Python.javacc", 135, 28);
                    if (OuterFollowSet != null) {
                        var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ135Σ28Σ);
                        newFollowSet.UnionWith(OuterFollowSet);
                        OuterFollowSet = newFollowSet;
                    }
                    try {
                        ParseExpression();
                    }
                    finally {
                        PopCallStack();
                    }

                    // Code for ZeroOrOne specified at:
                    // Python.javacc:135:39
                    if ((NextTokenType == TokenType.FROM)) {
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:135:40
                        ConsumeToken(TokenType.FROM);

                        // Code for NonTerminal specified at:
                        // Python.javacc:135:47
                        PushOntoCallStack("RaiseStatement", "Python.javacc", 135, 47);
                        try {
                            ParseExpression();
                        }
                        finally {
                            PopCallStack();
                        }


                    }


                }

            }
            catch (ParseException e) {
                parseException587 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize588);
                if (RaiseStatement14 != null) {
                    if (parseException587 == null) {
                        CloseNodeScope(RaiseStatement14, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseRaiseStatement

        private static readonly HashSet<TokenType> Block_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.NEWLINE,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CONTINUE,
            TokenType.DEL,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:137:1
        public void ParseBlock() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "Block";
            // Code for ExpansionChoice specified at:
            // Python.javacc:138:5
     
            Block Block15 = null;
            if (BuildTree) {
                Block15 = new Block(tokenSource);
                OpenNodeScope(Block15);
            }

            ParseException parseException614 = null;
            var callStackSize615 = ParsingStack.Count;
            try {
                if ((first_setΣPython_javaccΣ138Σ5.Contains(NextTokenType))) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:138:5
                    PushOntoCallStack("Block", "Python.javacc", 138, 5);
                    try {
                        ParseSimpleStatement();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if ((NextTokenType == TokenType.NEWLINE)) {
                    // Code for RegexpRef specified at:
                    // Python.javacc:140:5
                    ConsumeToken(TokenType.NEWLINE);

                    // Code for RegexpRef specified at:
                    // Python.javacc:140:14
                    ConsumeToken(TokenType.INDENT);

                    // Code for OneOrMore specified at:
                    // Python.javacc:140:22
                    while (true) {
                        // Code for NonTerminal specified at:
                        // Python.javacc:140:23
                        PushOntoCallStack("Block", "Python.javacc", 140, 23);
                        OuterFollowSet = follow_setΣPython_javaccΣ140Σ23;
                        try {
                            ParseStatement();
                        }
                        finally {
                            PopCallStack();
                        }



                        if (!((first_setΣPython_javaccΣ140Σ23Σ.Contains(NextTokenType)))) break;
                    }

                    // Code for RegexpRef specified at:
                    // Python.javacc:140:34
                    ConsumeToken(TokenType.DEDENT);


                }
                else {
                    PushOntoCallStack("Block", "Python.javacc", 138, 5);
                    throw new ParseException(this, Block_FIRST_SET);
                }
            }
            catch (ParseException e) {
                parseException614 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize615);
                if (Block15 != null) {
                    if (parseException614 == null) {
                        CloseNodeScope(Block15, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseBlock

        private static readonly HashSet<TokenType> ElseBlock_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.ELSE
        );

        
        // Python.javacc:143:1
        public void ParseElseBlock() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "ElseBlock";
     
            ElseBlock ElseBlock16 = null;
            if (BuildTree) {
                ElseBlock16 = new ElseBlock(tokenSource);
                OpenNodeScope(ElseBlock16);
            }

            ParseException parseException644 = null;
            var callStackSize645 = ParsingStack.Count;
            try {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:143:13
                ConsumeToken(TokenType.ELSE);

                // Code for RegexpStringLiteral specified at:
                // Python.javacc:143:20
                ConsumeToken(TokenType.COLON);

                // Code for NonTerminal specified at:
                // Python.javacc:143:24
                PushOntoCallStack("ElseBlock", "Python.javacc", 143, 24);
                try {
                    ParseBlock();
                }
                finally {
                    PopCallStack();
                }

            }
            catch (ParseException e) {
                parseException644 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize645);
                if (ElseBlock16 != null) {
                    if (parseException644 == null) {
                        CloseNodeScope(ElseBlock16, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseElseBlock

        private static readonly HashSet<TokenType> ExceptBlock_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.EXCEPT
        );

        
        // Python.javacc:145:1
        public void ParseExceptBlock() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "ExceptBlock";
     
            ExceptBlock ExceptBlock17 = null;
            if (BuildTree) {
                ExceptBlock17 = new ExceptBlock(tokenSource);
                OpenNodeScope(ExceptBlock17);
            }

            ParseException parseException656 = null;
            var callStackSize657 = ParsingStack.Count;
            try {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:145:15
                ConsumeToken(TokenType.EXCEPT);

                // Code for ZeroOrOne specified at:
                // Python.javacc:145:24
                if ((first_setΣPython_javaccΣ145Σ26.Contains(NextTokenType))) {
                    // Code for ZeroOrOne specified at:
                    // Python.javacc:145:26
                    if ((NextTokenType == TokenType.STAR)) {
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:145:27
                        ConsumeToken(TokenType.STAR);


                    }

                    // Code for NonTerminal specified at:
                    // Python.javacc:145:32
                    PushOntoCallStack("ExceptBlock", "Python.javacc", 145, 32);
                    OuterFollowSet = follow_setΣPython_javaccΣ145Σ32;
                    try {
                        ParseExpression();
                    }
                    finally {
                        PopCallStack();
                    }

                    // Code for ZeroOrOne specified at:
                    // Python.javacc:145:43
                    if ((NextTokenType == TokenType.AS)) {
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:145:44
                        ConsumeToken(TokenType.AS);

                        // Code for RegexpRef specified at:
                        // Python.javacc:145:49
                        ConsumeToken(TokenType.NAME);


                    }


                }

                // Code for RegexpStringLiteral specified at:
                // Python.javacc:145:59
                ConsumeToken(TokenType.COLON);

                // Code for NonTerminal specified at:
                // Python.javacc:145:63
                PushOntoCallStack("ExceptBlock", "Python.javacc", 145, 63);
                try {
                    ParseBlock();
                }
                finally {
                    PopCallStack();
                }

            }
            catch (ParseException e) {
                parseException656 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize657);
                if (ExceptBlock17 != null) {
                    if (parseException656 == null) {
                        CloseNodeScope(ExceptBlock17, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseExceptBlock

        private static readonly HashSet<TokenType> IfStatement_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.IF
        );

        
        // Python.javacc:147:1
        public void ParseIfStatement() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "IfStatement";
     
            IfStatement IfStatement18 = null;
            if (BuildTree) {
                IfStatement18 = new IfStatement(tokenSource);
                OpenNodeScope(IfStatement18);
            }

            ParseException parseException698 = null;
            var callStackSize699 = ParsingStack.Count;
            try {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:148:5
                ConsumeToken(TokenType.IF);

                // Code for NonTerminal specified at:
                // Python.javacc:148:10
                PushOntoCallStack("IfStatement", "Python.javacc", 148, 10);
                OuterFollowSet = follow_setΣPython_javaccΣ148Σ10;
                try {
                    ParseNamedExpression();
                }
                finally {
                    PopCallStack();
                }

                // Code for RegexpStringLiteral specified at:
                // Python.javacc:148:26
                ConsumeToken(TokenType.COLON);

                // Code for NonTerminal specified at:
                // Python.javacc:148:30
                PushOntoCallStack("IfStatement", "Python.javacc", 148, 30);
                if (OuterFollowSet != null) {
                    var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ148Σ30);
                    newFollowSet.UnionWith(OuterFollowSet);
                    OuterFollowSet = newFollowSet;
                }
                try {
                    ParseBlock();
                }
                finally {
                    PopCallStack();
                }

                // Code for ZeroOrMore specified at:
                // Python.javacc:149:6
                while (true) {
                    if (!((NextTokenType == TokenType.ELIF))) break;
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:149:7
                    ConsumeToken(TokenType.ELIF);

                    // Code for NonTerminal specified at:
                    // Python.javacc:149:14
                    PushOntoCallStack("IfStatement", "Python.javacc", 149, 14);
                    OuterFollowSet = follow_setΣPython_javaccΣ149Σ14;
                    try {
                        ParseNamedExpression();
                    }
                    finally {
                        PopCallStack();
                    }

                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:149:30
                    ConsumeToken(TokenType.COLON);

                    // Code for NonTerminal specified at:
                    // Python.javacc:149:34
                    PushOntoCallStack("IfStatement", "Python.javacc", 149, 34);
                    if (OuterFollowSet != null) {
                        var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ149Σ34);
                        newFollowSet.UnionWith(OuterFollowSet);
                        OuterFollowSet = newFollowSet;
                    }
                    try {
                        ParseBlock();
                    }
                    finally {
                        PopCallStack();
                    }


                }

                // Code for ZeroOrOne specified at:
                // Python.javacc:150:6
                if ((NextTokenType == TokenType.ELSE)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:150:7
                    ConsumeToken(TokenType.ELSE);

                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:150:14
                    ConsumeToken(TokenType.COLON);

                    // Code for NonTerminal specified at:
                    // Python.javacc:150:18
                    PushOntoCallStack("IfStatement", "Python.javacc", 150, 18);
                    try {
                        ParseBlock();
                    }
                    finally {
                        PopCallStack();
                    }


                }

            }
            catch (ParseException e) {
                parseException698 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize699);
                if (IfStatement18 != null) {
                    if (parseException698 == null) {
                        CloseNodeScope(IfStatement18, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseIfStatement

        private static readonly HashSet<TokenType> FinallyBlock_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.FINALLY
        );

        
        // Python.javacc:153:1
        public void ParseFinallyBlock() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "FinallyBlock";
     
            FinallyBlock FinallyBlock19 = null;
            if (BuildTree) {
                FinallyBlock19 = new FinallyBlock(tokenSource);
                OpenNodeScope(FinallyBlock19);
            }

            ParseException parseException746 = null;
            var callStackSize747 = ParsingStack.Count;
            try {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:153:16
                ConsumeToken(TokenType.FINALLY);

                // Code for RegexpStringLiteral specified at:
                // Python.javacc:153:26
                ConsumeToken(TokenType.COLON);

                // Code for NonTerminal specified at:
                // Python.javacc:153:30
                PushOntoCallStack("FinallyBlock", "Python.javacc", 153, 30);
                try {
                    ParseBlock();
                }
                finally {
                    PopCallStack();
                }

            }
            catch (ParseException e) {
                parseException746 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize747);
                if (FinallyBlock19 != null) {
                    if (parseException746 == null) {
                        CloseNodeScope(FinallyBlock19, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseFinallyBlock

        private static readonly HashSet<TokenType> WhileStatement_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.WHILE
        );

        
        // Python.javacc:155:1
        public void ParseWhileStatement() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "WhileStatement";
     
            WhileStatement WhileStatement20 = null;
            if (BuildTree) {
                WhileStatement20 = new WhileStatement(tokenSource);
                OpenNodeScope(WhileStatement20);
            }

            ParseException parseException758 = null;
            var callStackSize759 = ParsingStack.Count;
            try {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:155:18
                ConsumeToken(TokenType.WHILE);

                // Code for NonTerminal specified at:
                // Python.javacc:155:26
                PushOntoCallStack("WhileStatement", "Python.javacc", 155, 26);
                OuterFollowSet = follow_setΣPython_javaccΣ155Σ26;
                try {
                    ParseNamedExpression();
                }
                finally {
                    PopCallStack();
                }

                // Code for RegexpStringLiteral specified at:
                // Python.javacc:155:42
                ConsumeToken(TokenType.COLON);

                // Code for NonTerminal specified at:
                // Python.javacc:155:46
                PushOntoCallStack("WhileStatement", "Python.javacc", 155, 46);
                if (OuterFollowSet != null) {
                    var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ155Σ46);
                    newFollowSet.UnionWith(OuterFollowSet);
                    OuterFollowSet = newFollowSet;
                }
                try {
                    ParseBlock();
                }
                finally {
                    PopCallStack();
                }

                // Code for ZeroOrOne specified at:
                // Python.javacc:155:52
                if ((NextTokenType == TokenType.ELSE)) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:155:53
                    PushOntoCallStack("WhileStatement", "Python.javacc", 155, 53);
                    try {
                        ParseElseBlock();
                    }
                    finally {
                        PopCallStack();
                    }


                }

            }
            catch (ParseException e) {
                parseException758 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize759);
                if (WhileStatement20 != null) {
                    if (parseException758 == null) {
                        CloseNodeScope(WhileStatement20, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseWhileStatement

        private static readonly HashSet<TokenType> WithStatement_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.ASYNC,
            TokenType.WITH
        );

        
        // Python.javacc:157:1
        public void ParseWithStatement() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "WithStatement";
     
            WithStatement WithStatement21 = null;
            if (BuildTree) {
                WithStatement21 = new WithStatement(tokenSource);
                OpenNodeScope(WithStatement21);
            }

            ParseException parseException782 = null;
            var callStackSize783 = ParsingStack.Count;
            try {
                // Code for ZeroOrOne specified at:
                // Python.javacc:158:5
                if ((NextTokenType == TokenType.ASYNC)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:158:6
                    ConsumeToken(TokenType.ASYNC);


                }

                // Code for RegexpStringLiteral specified at:
                // Python.javacc:158:15
                ConsumeToken(TokenType.WITH);

                if (scanΣPython_javaccΣ160Σ9()) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:160:44
                    PushOntoCallStack("WithStatement", "Python.javacc", 160, 44);
                    OuterFollowSet = follow_setΣPython_javaccΣ160Σ44;
                    try {
                        ParseWithItemsInParentheses();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if ((first_setΣPython_javaccΣ162Σ9.Contains(NextTokenType))) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:162:9
                    PushOntoCallStack("WithStatement", "Python.javacc", 162, 9);
                    OuterFollowSet = follow_setΣPython_javaccΣ162Σ9Σ;
                    try {
                        ParseWithItem();
                    }
                    finally {
                        PopCallStack();
                    }

                    // Code for ZeroOrMore specified at:
                    // Python.javacc:162:18
                    while (true) {
                        if (!((NextTokenType == TokenType.COMMA))) break;
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:162:19
                        ConsumeToken(TokenType.COMMA);

                        // Code for NonTerminal specified at:
                        // Python.javacc:162:23
                        PushOntoCallStack("WithStatement", "Python.javacc", 162, 23);
                        OuterFollowSet = follow_setΣPython_javaccΣ162Σ23;
                        try {
                            ParseWithItem();
                        }
                        finally {
                            PopCallStack();
                        }


                    }


                }
                else {
                    PushOntoCallStack("WithStatement", "Python.javacc", 160, 9);
                    throw new ParseException(this, first_setΣPython_javaccΣ160Σ9);
                }

                // Code for RegexpStringLiteral specified at:
                // Python.javacc:164:5
                ConsumeToken(TokenType.COLON);

                // Code for NonTerminal specified at:
                // Python.javacc:164:9
                PushOntoCallStack("WithStatement", "Python.javacc", 164, 9);
                try {
                    ParseBlock();
                }
                finally {
                    PopCallStack();
                }

            }
            catch (ParseException e) {
                parseException782 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize783);
                if (WithStatement21 != null) {
                    if (parseException782 == null) {
                        CloseNodeScope(WithStatement21, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseWithStatement

        private static readonly HashSet<TokenType> WithItemsInParentheses_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LPAREN
        );

        
        // Python.javacc:167:1
        public void ParseWithItemsInParentheses() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "WithItemsInParentheses";
            // Code for RegexpStringLiteral specified at:
            // Python.javacc:167:31
            ConsumeToken(TokenType.LPAREN);

            // Code for NonTerminal specified at:
            // Python.javacc:167:35
            PushOntoCallStack("WithItemsInParentheses", "Python.javacc", 167, 35);
            OuterFollowSet = follow_setΣPython_javaccΣ167Σ35;
            try {
                ParseWithItem();
            }
            finally {
                PopCallStack();
            }

            // Code for ZeroOrMore specified at:
            // Python.javacc:167:44
            while (true) {
                if (!(scanΣPython_javaccΣ167Σ45())) break;
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:167:52
                ConsumeToken(TokenType.COMMA);

                // Code for NonTerminal specified at:
                // Python.javacc:167:56
                PushOntoCallStack("WithItemsInParentheses", "Python.javacc", 167, 56);
                OuterFollowSet = follow_setΣPython_javaccΣ167Σ56;
                try {
                    ParseWithItem();
                }
                finally {
                    PopCallStack();
                }


            }

            // Code for ZeroOrOne specified at:
            // Python.javacc:167:67
            if ((NextTokenType == TokenType.COMMA)) {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:167:68
                ConsumeToken(TokenType.COMMA);


            }

            // Code for RegexpStringLiteral specified at:
            // Python.javacc:167:73
            ConsumeToken(TokenType.RPAREN);


        }
        // end of ParseWithItemsInParentheses

        private static readonly HashSet<TokenType> WithItem_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:169:1
        public void ParseWithItem() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "WithItem";
     
            WithItem WithItem22 = null;
            if (BuildTree) {
                WithItem22 = new WithItem(tokenSource);
                OpenNodeScope(WithItem22);
            }

            ParseException parseException864 = null;
            var callStackSize865 = ParsingStack.Count;
            try {
                // Code for NonTerminal specified at:
                // Python.javacc:169:12
                PushOntoCallStack("WithItem", "Python.javacc", 169, 12);
                if (OuterFollowSet != null) {
                    var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ169Σ12);
                    newFollowSet.UnionWith(OuterFollowSet);
                    OuterFollowSet = newFollowSet;
                }
                try {
                    ParseExpression();
                }
                finally {
                    PopCallStack();
                }

                // Code for ZeroOrOne specified at:
                // Python.javacc:169:23
                if ((NextTokenType == TokenType.AS)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:169:24
                    ConsumeToken(TokenType.AS);

                    // Code for NonTerminal specified at:
                    // Python.javacc:169:29
                    PushOntoCallStack("WithItem", "Python.javacc", 169, 29);
                    try {
                        ParseStarTarget();
                    }
                    finally {
                        PopCallStack();
                    }


                }

            }
            catch (ParseException e) {
                parseException864 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize865);
                if (WithItem22 != null) {
                    if (parseException864 == null) {
                        CloseNodeScope(WithItem22, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseWithItem

        private static readonly HashSet<TokenType> ForStatement_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.ASYNC,
            TokenType.FOR
        );

        
        // Python.javacc:171:1
        public void ParseForStatement() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "ForStatement";
     
            ForStatement ForStatement23 = null;
            if (BuildTree) {
                ForStatement23 = new ForStatement(tokenSource);
                OpenNodeScope(ForStatement23);
            }

            ParseException parseException882 = null;
            var callStackSize883 = ParsingStack.Count;
            try {
                // Code for ZeroOrOne specified at:
                // Python.javacc:172:4
                if ((NextTokenType == TokenType.ASYNC)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:172:5
                    ConsumeToken(TokenType.ASYNC);


                }

                // Code for RegexpStringLiteral specified at:
                // Python.javacc:172:14
                ConsumeToken(TokenType.FOR);

                // Code for NonTerminal specified at:
                // Python.javacc:173:4
                PushOntoCallStack("ForStatement", "Python.javacc", 173, 4);
                OuterFollowSet = follow_setΣPython_javaccΣ173Σ4;
                try {
                    ParseStarTargets();
                }
                finally {
                    PopCallStack();
                }

                // Code for RegexpStringLiteral specified at:
                // Python.javacc:173:16
                ConsumeToken(TokenType.IN);

                // Code for NonTerminal specified at:
                // Python.javacc:173:21
                PushOntoCallStack("ForStatement", "Python.javacc", 173, 21);
                OuterFollowSet = follow_setΣPython_javaccΣ173Σ21;
                try {
                    ParseStarExpressions();
                }
                finally {
                    PopCallStack();
                }

                // Code for RegexpStringLiteral specified at:
                // Python.javacc:173:37
                ConsumeToken(TokenType.COLON);

                // Code for NonTerminal specified at:
                // Python.javacc:174:4
                PushOntoCallStack("ForStatement", "Python.javacc", 174, 4);
                if (OuterFollowSet != null) {
                    var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ174Σ4);
                    newFollowSet.UnionWith(OuterFollowSet);
                    OuterFollowSet = newFollowSet;
                }
                try {
                    ParseBlock();
                }
                finally {
                    PopCallStack();
                }

                // Code for ZeroOrOne specified at:
                // Python.javacc:174:10
                if ((NextTokenType == TokenType.ELSE)) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:174:11
                    PushOntoCallStack("ForStatement", "Python.javacc", 174, 11);
                    try {
                        ParseElseBlock();
                    }
                    finally {
                        PopCallStack();
                    }


                }

            }
            catch (ParseException e) {
                parseException882 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize883);
                if (ForStatement23 != null) {
                    if (parseException882 == null) {
                        CloseNodeScope(ForStatement23, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseForStatement

        private static readonly HashSet<TokenType> TryStatement_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.TRY
        );

        
        // Python.javacc:177:1
        public void ParseTryStatement() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "TryStatement";
     
            TryStatement TryStatement24 = null;
            if (BuildTree) {
                TryStatement24 = new TryStatement(tokenSource);
                OpenNodeScope(TryStatement24);
            }

            ParseException parseException921 = null;
            var callStackSize922 = ParsingStack.Count;
            try {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:178:4
                ConsumeToken(TokenType.TRY);

                // Code for RegexpStringLiteral specified at:
                // Python.javacc:178:10
                ConsumeToken(TokenType.COLON);

                // Code for NonTerminal specified at:
                // Python.javacc:178:14
                PushOntoCallStack("TryStatement", "Python.javacc", 178, 14);
                OuterFollowSet = follow_setΣPython_javaccΣ178Σ14;
                try {
                    ParseBlock();
                }
                finally {
                    PopCallStack();
                }

                if ((NextTokenType == TokenType.FINALLY)) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:180:8
                    PushOntoCallStack("TryStatement", "Python.javacc", 180, 8);
                    try {
                        ParseFinallyBlock();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if ((NextTokenType == TokenType.EXCEPT)) {
                    // Code for OneOrMore specified at:
                    // Python.javacc:182:9
                    while (true) {
                        // Code for NonTerminal specified at:
                        // Python.javacc:182:10
                        PushOntoCallStack("TryStatement", "Python.javacc", 182, 10);
                        if (OuterFollowSet != null) {
                            var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ182Σ10);
                            newFollowSet.UnionWith(OuterFollowSet);
                            OuterFollowSet = newFollowSet;
                        }
                        try {
                            ParseExceptBlock();
                        }
                        finally {
                            PopCallStack();
                        }



                        if (!((NextTokenType == TokenType.EXCEPT))) break;
                    }

                    // Code for ZeroOrOne specified at:
                    // Python.javacc:182:24
                    if ((NextTokenType == TokenType.ELSE)) {
                        // Code for NonTerminal specified at:
                        // Python.javacc:182:25
                        PushOntoCallStack("TryStatement", "Python.javacc", 182, 25);
                        if (OuterFollowSet != null) {
                            var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ182Σ25);
                            newFollowSet.UnionWith(OuterFollowSet);
                            OuterFollowSet = newFollowSet;
                        }
                        try {
                            ParseElseBlock();
                        }
                        finally {
                            PopCallStack();
                        }


                    }

                    // Code for ZeroOrOne specified at:
                    // Python.javacc:182:36
                    if ((NextTokenType == TokenType.FINALLY)) {
                        // Code for NonTerminal specified at:
                        // Python.javacc:182:37
                        PushOntoCallStack("TryStatement", "Python.javacc", 182, 37);
                        try {
                            ParseFinallyBlock();
                        }
                        finally {
                            PopCallStack();
                        }


                    }



                }
                else {
                    PushOntoCallStack("TryStatement", "Python.javacc", 180, 8);
                    throw new ParseException(this, first_setΣPython_javaccΣ180Σ8);
                }

            }
            catch (ParseException e) {
                parseException921 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize922);
                if (TryStatement24 != null) {
                    if (parseException921 == null) {
                        CloseNodeScope(TryStatement24, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseTryStatement

        private static readonly HashSet<TokenType> DelStatement_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.DEL
        );

        
        // Python.javacc:186:1
        public void ParseDelStatement() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "DelStatement";
     
            DelStatement DelStatement25 = null;
            if (BuildTree) {
                DelStatement25 = new DelStatement(tokenSource);
                OpenNodeScope(DelStatement25);
            }

            ParseException parseException977 = null;
            var callStackSize978 = ParsingStack.Count;
            try {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:186:16
                ConsumeToken(TokenType.DEL);

                // Code for NonTerminal specified at:
                // Python.javacc:186:22
                PushOntoCallStack("DelStatement", "Python.javacc", 186, 22);
                if (OuterFollowSet != null) {
                    var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ186Σ22);
                    newFollowSet.UnionWith(OuterFollowSet);
                    OuterFollowSet = newFollowSet;
                }
                try {
                    ParsePrimaryExpression();
                }
                finally {
                    PopCallStack();
                }

                // Code for ZeroOrMore specified at:
                // Python.javacc:186:40
                while (true) {
                    if (!(scanΣPython_javaccΣ186Σ41())) break;
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:186:48
                    ConsumeToken(TokenType.COMMA);

                    // Code for NonTerminal specified at:
                    // Python.javacc:186:52
                    PushOntoCallStack("DelStatement", "Python.javacc", 186, 52);
                    if (OuterFollowSet != null) {
                        var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ186Σ52);
                        newFollowSet.UnionWith(OuterFollowSet);
                        OuterFollowSet = newFollowSet;
                    }
                    try {
                        ParsePrimaryExpression();
                    }
                    finally {
                        PopCallStack();
                    }


                }

                // Code for ZeroOrOne specified at:
                // Python.javacc:186:72
                if ((NextTokenType == TokenType.COMMA)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:186:73
                    ConsumeToken(TokenType.COMMA);


                }

            }
            catch (ParseException e) {
                parseException977 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize978);
                if (DelStatement25 != null) {
                    if (parseException977 == null) {
                        CloseNodeScope(DelStatement25, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseDelStatement

        private static readonly HashSet<TokenType> NamedExpression_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:188:1
        public void ParseNamedExpression() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "NamedExpression";
     
            NamedExpression NamedExpression26 = null;
            if (BuildTree) {
                NamedExpression26 = new NamedExpression(tokenSource);
                OpenNodeScope(NamedExpression26);
            }

            ParseException parseException1007 = null;
            var callStackSize1008 = ParsingStack.Count;
            try {
                // Code for ZeroOrOne specified at:
                // Python.javacc:188:19
                if (scanΣPython_javaccΣ188Σ21()) {
                    // Code for RegexpRef specified at:
                    // Python.javacc:188:24
                    ConsumeToken(TokenType.NAME);

                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:188:31
                    ConsumeToken(TokenType.COLONEQUALS);


                }

                // Code for NonTerminal specified at:
                // Python.javacc:188:38
                PushOntoCallStack("NamedExpression", "Python.javacc", 188, 38);
                try {
                    ParseExpression();
                }
                finally {
                    PopCallStack();
                }

            }
            catch (ParseException e) {
                parseException1007 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize1008);
                if (NamedExpression26 != null) {
                    if (parseException1007 == null) {
                        CloseNodeScope(NamedExpression26, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseNamedExpression

        private static readonly HashSet<TokenType> DottedName_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        
        // Python.javacc:190:1
        public void ParseDottedName() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "DottedName";
     
            DottedName DottedName27 = null;
            if (BuildTree) {
                DottedName27 = new DottedName(tokenSource);
                OpenNodeScope(DottedName27);
            }

            ParseException parseException1025 = null;
            var callStackSize1026 = ParsingStack.Count;
            try {
                // Code for RegexpRef specified at:
                // Python.javacc:190:14
                ConsumeToken(TokenType.NAME);

                // Code for ZeroOrMore specified at:
                // Python.javacc:190:21
                while (true) {
                    if (!(scanΣPython_javaccΣ190Σ22())) break;
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:190:25
                    ConsumeToken(TokenType.DOT);

                    // Code for RegexpRef specified at:
                    // Python.javacc:190:29
                    ConsumeToken(TokenType.NAME);


                }

            }
            catch (ParseException e) {
                parseException1025 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize1026);
                if (DottedName27 != null) {
                    if (parseException1025 == null) {
                        CloseNodeScope(DottedName27, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseDottedName

        private static readonly HashSet<TokenType> ImportStatement_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.FROM,
            TokenType.IMPORT
        );

        
        // Python.javacc:192:1
        public void ParseImportStatement() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "ImportStatement";
            // Code for ExpansionChoice specified at:
            // Python.javacc:192:19
     
            ImportStatement ImportStatement28 = null;
            if (BuildTree) {
                ImportStatement28 = new ImportStatement(tokenSource);
                OpenNodeScope(ImportStatement28);
            }

            ParseException parseException1043 = null;
            var callStackSize1044 = ParsingStack.Count;
            try {
                if ((NextTokenType == TokenType.IMPORT)) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:192:19
                    PushOntoCallStack("ImportStatement", "Python.javacc", 192, 19);
                    try {
                        ParseImportName();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if (scanΣPython_javaccΣ192Σ32()) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:192:32
                    PushOntoCallStack("ImportStatement", "Python.javacc", 192, 32);
                    try {
                        ParseImportFrom1();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if (scanΣPython_javaccΣ192Σ46()) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:192:46
                    PushOntoCallStack("ImportStatement", "Python.javacc", 192, 46);
                    try {
                        ParseImportFrom2();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else {
                    PushOntoCallStack("ImportStatement", "Python.javacc", 192, 19);
                    throw new ParseException(this, ImportStatement_FIRST_SET);
                }
            }
            catch (ParseException e) {
                parseException1043 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize1044);
                if (ImportStatement28 != null) {
                    if (parseException1043 == null) {
                        CloseNodeScope(ImportStatement28, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseImportStatement

        private static readonly HashSet<TokenType> ImportName_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.IMPORT
        );

        
        // Python.javacc:194:1
        public void ParseImportName() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "ImportName";
            // Code for RegexpStringLiteral specified at:
            // Python.javacc:194:19
            ConsumeToken(TokenType.IMPORT);

            // Code for NonTerminal specified at:
            // Python.javacc:194:28
            PushOntoCallStack("ImportName", "Python.javacc", 194, 28);
            if (OuterFollowSet != null) {
                var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ194Σ28);
                newFollowSet.UnionWith(OuterFollowSet);
                OuterFollowSet = newFollowSet;
            }
            try {
                ParseDottedName();
            }
            finally {
                PopCallStack();
            }

            // Code for ZeroOrOne specified at:
            // Python.javacc:194:39
            if ((NextTokenType == TokenType.AS)) {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:194:40
                ConsumeToken(TokenType.AS);

                // Code for RegexpRef specified at:
                // Python.javacc:194:45
                ConsumeToken(TokenType.NAME);


            }

            // Code for ZeroOrMore specified at:
            // Python.javacc:194:53
            while (true) {
                if (!((NextTokenType == TokenType.COMMA))) break;
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:194:54
                ConsumeToken(TokenType.COMMA);

                // Code for NonTerminal specified at:
                // Python.javacc:194:58
                PushOntoCallStack("ImportName", "Python.javacc", 194, 58);
                if (OuterFollowSet != null) {
                    var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ194Σ58);
                    newFollowSet.UnionWith(OuterFollowSet);
                    OuterFollowSet = newFollowSet;
                }
                try {
                    ParseDottedName();
                }
                finally {
                    PopCallStack();
                }

                // Code for ZeroOrOne specified at:
                // Python.javacc:194:69
                if ((NextTokenType == TokenType.AS)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:194:70
                    ConsumeToken(TokenType.AS);

                    // Code for RegexpRef specified at:
                    // Python.javacc:194:75
                    ConsumeToken(TokenType.NAME);


                }


            }


        }
        // end of ParseImportName

        private static readonly HashSet<TokenType> ImportFrom1_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.FROM
        );

        
        // Python.javacc:196:1
        public void ParseImportFrom1() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "ImportFrom1";
            // Code for RegexpStringLiteral specified at:
            // Python.javacc:196:20
            ConsumeToken(TokenType.FROM);

            // Code for ZeroOrMore specified at:
            // Python.javacc:196:27
            while (true) {
                // Code for ExpansionChoice specified at:
                // Python.javacc:196:28
                if ((NextTokenType == TokenType.DOT)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:196:28
                    ConsumeToken(TokenType.DOT);


                }
                else if ((NextTokenType == TokenType.ELLIPSIS)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:196:34
                    ConsumeToken(TokenType.ELLIPSIS);


                }
                else {
                    break;
                }

            }

            // Code for NonTerminal specified at:
            // Python.javacc:196:42
            PushOntoCallStack("ImportFrom1", "Python.javacc", 196, 42);
            OuterFollowSet = follow_setΣPython_javaccΣ196Σ42;
            try {
                ParseDottedName();
            }
            finally {
                PopCallStack();
            }

            // Code for RegexpStringLiteral specified at:
            // Python.javacc:196:58
            ConsumeToken(TokenType.IMPORT);

            // Code for NonTerminal specified at:
            // Python.javacc:196:68
            PushOntoCallStack("ImportFrom1", "Python.javacc", 196, 68);
            try {
                ParseImportFromTargets();
            }
            finally {
                PopCallStack();
            }


        }
        // end of ParseImportFrom1

        private static readonly HashSet<TokenType> ImportFrom2_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.FROM
        );

        
        // Python.javacc:198:1
        public void ParseImportFrom2() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "ImportFrom2";
            // Code for RegexpStringLiteral specified at:
            // Python.javacc:198:20
            ConsumeToken(TokenType.FROM);

            // Code for OneOrMore specified at:
            // Python.javacc:198:27
            var inFirst0 = true;
            while (true) {
                // Code for ExpansionChoice specified at:
                // Python.javacc:198:28
                if ((NextTokenType == TokenType.DOT)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:198:28
                    ConsumeToken(TokenType.DOT);


                }
                else if ((NextTokenType == TokenType.ELLIPSIS)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:198:34
                    ConsumeToken(TokenType.ELLIPSIS);


                }
                else if (inFirst0) {
                    PushOntoCallStack("ImportFrom2", "Python.javacc", 198, 28);
                    throw new ParseException(this, first_setΣPython_javaccΣ198Σ28);
                }
                else {
                    break;
                }


                inFirst0 = false;
            }

            // Code for RegexpStringLiteral specified at:
            // Python.javacc:198:42
            ConsumeToken(TokenType.IMPORT);

            // Code for NonTerminal specified at:
            // Python.javacc:198:56
            PushOntoCallStack("ImportFrom2", "Python.javacc", 198, 56);
            try {
                ParseImportFromTargets();
            }
            finally {
                PopCallStack();
            }


        }
        // end of ParseImportFrom2

        private static readonly HashSet<TokenType> ImportFromTargets_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.NAME
        );

        
        // Python.javacc:200:1
        public void ParseImportFromTargets() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "ImportFromTargets";
            // Code for ExpansionChoice specified at:
            // Python.javacc:201:4
     
            ImportFromTargets ImportFromTargets29 = null;
            if (BuildTree) {
                ImportFromTargets29 = new ImportFromTargets(tokenSource);
                OpenNodeScope(ImportFromTargets29);
            }

            ParseException parseException1172 = null;
            var callStackSize1173 = ParsingStack.Count;
            try {
                if ((NextTokenType == TokenType.STAR)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:201:4
                    ConsumeToken(TokenType.STAR);


                }
                else if ((NextTokenType == TokenType.NAME)) {
                    // Code for RegexpRef specified at:
                    // Python.javacc:203:4
                    ConsumeToken(TokenType.NAME);

                    // Code for ZeroOrOne specified at:
                    // Python.javacc:203:11
                    if ((NextTokenType == TokenType.AS)) {
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:203:12
                        ConsumeToken(TokenType.AS);

                        // Code for RegexpRef specified at:
                        // Python.javacc:203:17
                        ConsumeToken(TokenType.NAME);


                    }

                    // Code for ZeroOrMore specified at:
                    // Python.javacc:203:25
                    while (true) {
                        if (!(scanΣPython_javaccΣ203Σ26())) break;
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:203:26
                        ConsumeToken(TokenType.COMMA);

                        // Code for RegexpRef specified at:
                        // Python.javacc:203:30
                        ConsumeToken(TokenType.NAME);

                        // Code for ZeroOrOne specified at:
                        // Python.javacc:203:42
                        if ((NextTokenType == TokenType.AS)) {
                            // Code for RegexpStringLiteral specified at:
                            // Python.javacc:203:43
                            ConsumeToken(TokenType.AS);

                            // Code for RegexpRef specified at:
                            // Python.javacc:203:48
                            ConsumeToken(TokenType.NAME);


                        }


                    }

                    // Code for ZeroOrOne specified at:
                    // Python.javacc:203:58
                    if ((NextTokenType == TokenType.COMMA)) {
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:203:59
                        ConsumeToken(TokenType.COMMA);


                    }


                }
                else if ((NextTokenType == TokenType.LPAREN)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:205:4
                    ConsumeToken(TokenType.LPAREN);

                    // Code for RegexpRef specified at:
                    // Python.javacc:205:8
                    ConsumeToken(TokenType.NAME);

                    // Code for ZeroOrOne specified at:
                    // Python.javacc:205:15
                    if ((NextTokenType == TokenType.AS)) {
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:205:16
                        ConsumeToken(TokenType.AS);

                        // Code for RegexpRef specified at:
                        // Python.javacc:205:21
                        ConsumeToken(TokenType.NAME);


                    }

                    // Code for ZeroOrMore specified at:
                    // Python.javacc:205:29
                    while (true) {
                        if (!(scanΣPython_javaccΣ205Σ30())) break;
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:205:30
                        ConsumeToken(TokenType.COMMA);

                        // Code for RegexpRef specified at:
                        // Python.javacc:205:34
                        ConsumeToken(TokenType.NAME);

                        // Code for ZeroOrOne specified at:
                        // Python.javacc:205:46
                        if ((NextTokenType == TokenType.AS)) {
                            // Code for RegexpStringLiteral specified at:
                            // Python.javacc:205:47
                            ConsumeToken(TokenType.AS);

                            // Code for RegexpRef specified at:
                            // Python.javacc:205:52
                            ConsumeToken(TokenType.NAME);


                        }


                    }

                    // Code for ZeroOrOne specified at:
                    // Python.javacc:205:62
                    if ((NextTokenType == TokenType.COMMA)) {
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:205:63
                        ConsumeToken(TokenType.COMMA);


                    }

                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:205:68
                    ConsumeToken(TokenType.RPAREN);

                    // Code for ZeroOrOne specified at:
                    // Python.javacc:205:72
                    if ((NextTokenType == TokenType.COMMA)) {
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:205:73
                        ConsumeToken(TokenType.COMMA);


                    }


                }
                else {
                    PushOntoCallStack("ImportFromTargets", "Python.javacc", 201, 4);
                    throw new ParseException(this, ImportFromTargets_FIRST_SET);
                }
            }
            catch (ParseException e) {
                parseException1172 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize1173);
                if (ImportFromTargets29 != null) {
                    if (parseException1172 == null) {
                        CloseNodeScope(ImportFromTargets29, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseImportFromTargets

        private static readonly HashSet<TokenType> StarNamedExpression_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:208:1
        public void ParseStarNamedExpression() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "StarNamedExpression";
            // Code for ExpansionChoice specified at:
            // Python.javacc:209:6
     
            StarNamedExpression StarNamedExpression30 = null;
            if (BuildTree) {
                StarNamedExpression30 = new StarNamedExpression(tokenSource);
                OpenNodeScope(StarNamedExpression30);
            }

            ParseException parseException1298 = null;
            var callStackSize1299 = ParsingStack.Count;
            try {
                if ((NextTokenType == TokenType.STAR)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:209:6
                    ConsumeToken(TokenType.STAR);

                    // Code for NonTerminal specified at:
                    // Python.javacc:209:10
                    PushOntoCallStack("StarNamedExpression", "Python.javacc", 209, 10);
                    try {
                        ParseBitwiseOr();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if ((first_setΣPython_javaccΣ211Σ6.Contains(NextTokenType))) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:211:6
                    PushOntoCallStack("StarNamedExpression", "Python.javacc", 211, 6);
                    try {
                        ParseNamedExpression();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else {
                    PushOntoCallStack("StarNamedExpression", "Python.javacc", 209, 6);
                    throw new ParseException(this, StarNamedExpression_FIRST_SET);
                }
            }
            catch (ParseException e) {
                parseException1298 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize1299);
                if (StarNamedExpression30 != null) {
                    if (parseException1298 == null) {
                        CloseNodeScope(StarNamedExpression30, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseStarNamedExpression

        private static readonly HashSet<TokenType> StarExpression_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:214:1
        public void ParseStarExpression() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "StarExpression";
            // Code for ExpansionChoice specified at:
            // Python.javacc:215:5
     
            StarExpression StarExpression31 = null;
            if (BuildTree) {
                StarExpression31 = new StarExpression(tokenSource);
                OpenNodeScope(StarExpression31);
            }

            ParseException parseException1316 = null;
            var callStackSize1317 = ParsingStack.Count;
            try {
                if ((NextTokenType == TokenType.STAR)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:215:5
                    ConsumeToken(TokenType.STAR);

                    // Code for NonTerminal specified at:
                    // Python.javacc:215:9
                    PushOntoCallStack("StarExpression", "Python.javacc", 215, 9);
                    try {
                        ParseBitwiseOr();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if ((first_setΣPython_javaccΣ217Σ5.Contains(NextTokenType))) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:217:5
                    PushOntoCallStack("StarExpression", "Python.javacc", 217, 5);
                    try {
                        ParseExpression();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else {
                    PushOntoCallStack("StarExpression", "Python.javacc", 215, 5);
                    throw new ParseException(this, StarExpression_FIRST_SET);
                }
            }
            catch (ParseException e) {
                parseException1316 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize1317);
                if (StarExpression31 != null) {
                    if (parseException1316 == null) {
                        CloseNodeScope(StarExpression31, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseStarExpression

        private static readonly HashSet<TokenType> StarExpressions_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:220:1
        public void ParseStarExpressions() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "StarExpressions";
     
            StarExpressions StarExpressions32 = null;
            if (BuildTree) {
                StarExpressions32 = new StarExpressions(tokenSource);
                OpenNodeScope(StarExpressions32);
            }

            ParseException parseException1334 = null;
            var callStackSize1335 = ParsingStack.Count;
            try {
                // Code for NonTerminal specified at:
                // Python.javacc:220:19
                PushOntoCallStack("StarExpressions", "Python.javacc", 220, 19);
                if (OuterFollowSet != null) {
                    var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ220Σ19);
                    newFollowSet.UnionWith(OuterFollowSet);
                    OuterFollowSet = newFollowSet;
                }
                try {
                    ParseStarExpression();
                }
                finally {
                    PopCallStack();
                }

                // Code for ZeroOrMore specified at:
                // Python.javacc:220:34
                while (true) {
                    if (!(scanΣPython_javaccΣ220Σ35())) break;
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:220:35
                    ConsumeToken(TokenType.COMMA);

                    // Code for NonTerminal specified at:
                    // Python.javacc:220:45
                    PushOntoCallStack("StarExpressions", "Python.javacc", 220, 45);
                    if (OuterFollowSet != null) {
                        var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ220Σ45);
                        newFollowSet.UnionWith(OuterFollowSet);
                        OuterFollowSet = newFollowSet;
                    }
                    try {
                        ParseStarExpression();
                    }
                    finally {
                        PopCallStack();
                    }


                }

                // Code for ZeroOrOne specified at:
                // Python.javacc:220:62
                if ((NextTokenType == TokenType.COMMA)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:220:63
                    ConsumeToken(TokenType.COMMA);


                }

            }
            catch (ParseException e) {
                parseException1334 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize1335);
                if (StarExpressions32 != null) {
                    if (parseException1334 == null) {
                        CloseNodeScope(StarExpressions32, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseStarExpressions

        private static readonly HashSet<TokenType> StarNamedExpressions_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:222:1
        public void ParseStarNamedExpressions() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "StarNamedExpressions";
     
            StarNamedExpressions StarNamedExpressions33 = null;
            if (BuildTree) {
                StarNamedExpressions33 = new StarNamedExpressions(tokenSource);
                OpenNodeScope(StarNamedExpressions33);
            }

            ParseException parseException1361 = null;
            var callStackSize1362 = ParsingStack.Count;
            try {
                // Code for NonTerminal specified at:
                // Python.javacc:222:24
                PushOntoCallStack("StarNamedExpressions", "Python.javacc", 222, 24);
                if (OuterFollowSet != null) {
                    var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ222Σ24);
                    newFollowSet.UnionWith(OuterFollowSet);
                    OuterFollowSet = newFollowSet;
                }
                try {
                    ParseStarNamedExpression();
                }
                finally {
                    PopCallStack();
                }

                // Code for ZeroOrMore specified at:
                // Python.javacc:222:44
                while (true) {
                    if (!(scanΣPython_javaccΣ222Σ45())) break;
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:222:45
                    ConsumeToken(TokenType.COMMA);

                    // Code for NonTerminal specified at:
                    // Python.javacc:222:55
                    PushOntoCallStack("StarNamedExpressions", "Python.javacc", 222, 55);
                    if (OuterFollowSet != null) {
                        var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ222Σ55);
                        newFollowSet.UnionWith(OuterFollowSet);
                        OuterFollowSet = newFollowSet;
                    }
                    try {
                        ParseStarNamedExpression();
                    }
                    finally {
                        PopCallStack();
                    }


                }

                // Code for ZeroOrOne specified at:
                // Python.javacc:222:77
                if ((NextTokenType == TokenType.COMMA)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:222:78
                    ConsumeToken(TokenType.COMMA);


                }

            }
            catch (ParseException e) {
                parseException1361 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize1362);
                if (StarNamedExpressions33 != null) {
                    if (parseException1361 == null) {
                        CloseNodeScope(StarNamedExpressions33, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseStarNamedExpressions

        private static readonly HashSet<TokenType> BitwiseOr_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:224:1
        public void ParseBitwiseOr() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "BitwiseOr";
     
            BitwiseOr BitwiseOr34 = null;
            if (BuildTree) {
                BitwiseOr34 = new BitwiseOr(tokenSource);
                OpenNodeScope(BitwiseOr34);
            }

            ParseException parseException1388 = null;
            var callStackSize1389 = ParsingStack.Count;
            try {
                // Code for NonTerminal specified at:
                // Python.javacc:224:13
                PushOntoCallStack("BitwiseOr", "Python.javacc", 224, 13);
                if (OuterFollowSet != null) {
                    var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ224Σ13);
                    newFollowSet.UnionWith(OuterFollowSet);
                    OuterFollowSet = newFollowSet;
                }
                try {
                    ParseBitwiseXor();
                }
                finally {
                    PopCallStack();
                }

                // Code for ZeroOrMore specified at:
                // Python.javacc:224:24
                while (true) {
                    if (!((NextTokenType == TokenType.BIT_OR))) break;
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:224:25
                    ConsumeToken(TokenType.BIT_OR);

                    // Code for NonTerminal specified at:
                    // Python.javacc:224:29
                    PushOntoCallStack("BitwiseOr", "Python.javacc", 224, 29);
                    if (OuterFollowSet != null) {
                        var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ224Σ29);
                        newFollowSet.UnionWith(OuterFollowSet);
                        OuterFollowSet = newFollowSet;
                    }
                    try {
                        ParseBitwiseXor();
                    }
                    finally {
                        PopCallStack();
                    }


                }

            }
            catch (ParseException e) {
                parseException1388 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize1389);
                if (BitwiseOr34 != null) {
                    if (parseException1388 == null) {
                        CloseNodeScope(BitwiseOr34, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseBitwiseOr

        private static readonly HashSet<TokenType> BitwiseXor_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:226:1
        public void ParseBitwiseXor() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "BitwiseXor";
     
            BitwiseXor BitwiseXor35 = null;
            if (BuildTree) {
                BitwiseXor35 = new BitwiseXor(tokenSource);
                OpenNodeScope(BitwiseXor35);
            }

            ParseException parseException1406 = null;
            var callStackSize1407 = ParsingStack.Count;
            try {
                // Code for NonTerminal specified at:
                // Python.javacc:226:14
                PushOntoCallStack("BitwiseXor", "Python.javacc", 226, 14);
                if (OuterFollowSet != null) {
                    var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ226Σ14);
                    newFollowSet.UnionWith(OuterFollowSet);
                    OuterFollowSet = newFollowSet;
                }
                try {
                    ParseBitwiseAnd();
                }
                finally {
                    PopCallStack();
                }

                // Code for ZeroOrMore specified at:
                // Python.javacc:226:25
                while (true) {
                    if (!((NextTokenType == TokenType.XOR))) break;
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:226:26
                    ConsumeToken(TokenType.XOR);

                    // Code for NonTerminal specified at:
                    // Python.javacc:226:30
                    PushOntoCallStack("BitwiseXor", "Python.javacc", 226, 30);
                    if (OuterFollowSet != null) {
                        var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ226Σ30);
                        newFollowSet.UnionWith(OuterFollowSet);
                        OuterFollowSet = newFollowSet;
                    }
                    try {
                        ParseBitwiseAnd();
                    }
                    finally {
                        PopCallStack();
                    }


                }

            }
            catch (ParseException e) {
                parseException1406 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize1407);
                if (BitwiseXor35 != null) {
                    if (parseException1406 == null) {
                        CloseNodeScope(BitwiseXor35, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseBitwiseXor

        private static readonly HashSet<TokenType> BitwiseAnd_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:228:1
        public void ParseBitwiseAnd() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "BitwiseAnd";
     
            BitwiseAnd BitwiseAnd36 = null;
            if (BuildTree) {
                BitwiseAnd36 = new BitwiseAnd(tokenSource);
                OpenNodeScope(BitwiseAnd36);
            }

            ParseException parseException1424 = null;
            var callStackSize1425 = ParsingStack.Count;
            try {
                // Code for NonTerminal specified at:
                // Python.javacc:228:14
                PushOntoCallStack("BitwiseAnd", "Python.javacc", 228, 14);
                if (OuterFollowSet != null) {
                    var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ228Σ14);
                    newFollowSet.UnionWith(OuterFollowSet);
                    OuterFollowSet = newFollowSet;
                }
                try {
                    ParseShiftExpression();
                }
                finally {
                    PopCallStack();
                }

                // Code for ZeroOrMore specified at:
                // Python.javacc:228:30
                while (true) {
                    if (!((NextTokenType == TokenType.BIT_AND))) break;
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:228:31
                    ConsumeToken(TokenType.BIT_AND);

                    // Code for NonTerminal specified at:
                    // Python.javacc:228:35
                    PushOntoCallStack("BitwiseAnd", "Python.javacc", 228, 35);
                    if (OuterFollowSet != null) {
                        var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ228Σ35);
                        newFollowSet.UnionWith(OuterFollowSet);
                        OuterFollowSet = newFollowSet;
                    }
                    try {
                        ParseShiftExpression();
                    }
                    finally {
                        PopCallStack();
                    }


                }

            }
            catch (ParseException e) {
                parseException1424 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize1425);
                if (BitwiseAnd36 != null) {
                    if (parseException1424 == null) {
                        CloseNodeScope(BitwiseAnd36, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseBitwiseAnd

        private static readonly HashSet<TokenType> ShiftExpression_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:230:1
        public void ParseShiftExpression() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "ShiftExpression";
     
            ShiftExpression ShiftExpression37 = null;
            if (BuildTree) {
                ShiftExpression37 = new ShiftExpression(tokenSource);
                OpenNodeScope(ShiftExpression37);
            }

            ParseException parseException1442 = null;
            var callStackSize1443 = ParsingStack.Count;
            try {
                // Code for NonTerminal specified at:
                // Python.javacc:230:19
                PushOntoCallStack("ShiftExpression", "Python.javacc", 230, 19);
                if (OuterFollowSet != null) {
                    var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ230Σ19);
                    newFollowSet.UnionWith(OuterFollowSet);
                    OuterFollowSet = newFollowSet;
                }
                try {
                    ParseAdditiveExpression();
                }
                finally {
                    PopCallStack();
                }

                // Code for ZeroOrMore specified at:
                // Python.javacc:230:38
                while (true) {
                    if (!((NextTokenType == TokenType.LSHIFT) || (NextTokenType == TokenType.RSHIFT))) break;
                    if ((NextTokenType == TokenType.LSHIFT)) {
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:230:40
                        ConsumeToken(TokenType.LSHIFT);


                    }
                    else if ((NextTokenType == TokenType.RSHIFT)) {
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:230:47
                        ConsumeToken(TokenType.RSHIFT);


                    }
                    else {
                        PushOntoCallStack("ShiftExpression", "Python.javacc", 230, 40);
                        throw new ParseException(this, first_setΣPython_javaccΣ230Σ40);
                    }

                    // Code for NonTerminal specified at:
                    // Python.javacc:230:53
                    PushOntoCallStack("ShiftExpression", "Python.javacc", 230, 53);
                    if (OuterFollowSet != null) {
                        var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ230Σ53);
                        newFollowSet.UnionWith(OuterFollowSet);
                        OuterFollowSet = newFollowSet;
                    }
                    try {
                        ParseAdditiveExpression();
                    }
                    finally {
                        PopCallStack();
                    }


                }

            }
            catch (ParseException e) {
                parseException1442 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize1443);
                if (ShiftExpression37 != null) {
                    if (parseException1442 == null) {
                        CloseNodeScope(ShiftExpression37, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseShiftExpression

        private static readonly HashSet<TokenType> AdditiveExpression_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:232:1
        public void ParseAdditiveExpression() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "AdditiveExpression";
     
            AdditiveExpression AdditiveExpression38 = null;
            if (BuildTree) {
                AdditiveExpression38 = new AdditiveExpression(tokenSource);
                OpenNodeScope(AdditiveExpression38);
            }

            ParseException parseException1473 = null;
            var callStackSize1474 = ParsingStack.Count;
            try {
                // Code for NonTerminal specified at:
                // Python.javacc:232:22
                PushOntoCallStack("AdditiveExpression", "Python.javacc", 232, 22);
                if (OuterFollowSet != null) {
                    var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ232Σ22);
                    newFollowSet.UnionWith(OuterFollowSet);
                    OuterFollowSet = newFollowSet;
                }
                try {
                    ParseMultiplicativeExpression();
                }
                finally {
                    PopCallStack();
                }

                // Code for ZeroOrMore specified at:
                // Python.javacc:232:47
                while (true) {
                    if (!((NextTokenType == TokenType.MINUS) || (NextTokenType == TokenType.PLUS))) break;
                    if ((NextTokenType == TokenType.PLUS)) {
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:232:49
                        ConsumeToken(TokenType.PLUS);


                    }
                    else if ((NextTokenType == TokenType.MINUS)) {
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:232:53
                        ConsumeToken(TokenType.MINUS);


                    }
                    else {
                        PushOntoCallStack("AdditiveExpression", "Python.javacc", 232, 49);
                        throw new ParseException(this, first_setΣPython_javaccΣ232Σ49);
                    }

                    // Code for NonTerminal specified at:
                    // Python.javacc:232:58
                    PushOntoCallStack("AdditiveExpression", "Python.javacc", 232, 58);
                    if (OuterFollowSet != null) {
                        var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ232Σ58);
                        newFollowSet.UnionWith(OuterFollowSet);
                        OuterFollowSet = newFollowSet;
                    }
                    try {
                        ParseMultiplicativeExpression();
                    }
                    finally {
                        PopCallStack();
                    }


                }

            }
            catch (ParseException e) {
                parseException1473 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize1474);
                if (AdditiveExpression38 != null) {
                    if (parseException1473 == null) {
                        CloseNodeScope(AdditiveExpression38, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseAdditiveExpression

        private static readonly HashSet<TokenType> MultiplicativeExpression_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:234:1
        public void ParseMultiplicativeExpression() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "MultiplicativeExpression";
     
            MultiplicativeExpression MultiplicativeExpression39 = null;
            if (BuildTree) {
                MultiplicativeExpression39 = new MultiplicativeExpression(tokenSource);
                OpenNodeScope(MultiplicativeExpression39);
            }

            ParseException parseException1504 = null;
            var callStackSize1505 = ParsingStack.Count;
            try {
                // Code for NonTerminal specified at:
                // Python.javacc:234:28
                PushOntoCallStack("MultiplicativeExpression", "Python.javacc", 234, 28);
                if (OuterFollowSet != null) {
                    var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ234Σ28);
                    newFollowSet.UnionWith(OuterFollowSet);
                    OuterFollowSet = newFollowSet;
                }
                try {
                    ParseUnaryExpression();
                }
                finally {
                    PopCallStack();
                }

                // Code for ZeroOrMore specified at:
                // Python.javacc:234:44
                while (true) {
                    if (!((first_setΣPython_javaccΣ234Σ45.Contains(NextTokenType)))) break;
                    if ((NextTokenType == TokenType.STAR)) {
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:234:46
                        ConsumeToken(TokenType.STAR);


                    }
                    else if ((NextTokenType == TokenType.SLASH)) {
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:234:50
                        ConsumeToken(TokenType.SLASH);


                    }
                    else if ((NextTokenType == TokenType._TOKEN_100)) {
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:234:54
                        ConsumeToken(TokenType._TOKEN_100);


                    }
                    else if ((NextTokenType == TokenType.PERCENT)) {
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:234:59
                        ConsumeToken(TokenType.PERCENT);


                    }
                    else if ((NextTokenType == TokenType.AT)) {
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:234:63
                        ConsumeToken(TokenType.AT);


                    }
                    else {
                        PushOntoCallStack("MultiplicativeExpression", "Python.javacc", 234, 46);
                        throw new ParseException(this, first_setΣPython_javaccΣ234Σ46);
                    }

                    // Code for NonTerminal specified at:
                    // Python.javacc:234:68
                    PushOntoCallStack("MultiplicativeExpression", "Python.javacc", 234, 68);
                    if (OuterFollowSet != null) {
                        var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ234Σ68);
                        newFollowSet.UnionWith(OuterFollowSet);
                        OuterFollowSet = newFollowSet;
                    }
                    try {
                        ParseUnaryExpression();
                    }
                    finally {
                        PopCallStack();
                    }


                }

            }
            catch (ParseException e) {
                parseException1504 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize1505);
                if (MultiplicativeExpression39 != null) {
                    if (parseException1504 == null) {
                        CloseNodeScope(MultiplicativeExpression39, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseMultiplicativeExpression

        private static readonly HashSet<TokenType> UnaryExpression_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:236:1
        public void ParseUnaryExpression() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "UnaryExpression";
            // Code for ExpansionChoice specified at:
            // Python.javacc:236:19
     
            UnaryExpression UnaryExpression40 = null;
            if (BuildTree) {
                UnaryExpression40 = new UnaryExpression(tokenSource);
                OpenNodeScope(UnaryExpression40);
            }

            ParseException parseException1553 = null;
            var callStackSize1554 = ParsingStack.Count;
            try {
                if ((first_setΣPython_javaccΣ236Σ19.Contains(NextTokenType))) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:236:19
                    PushOntoCallStack("UnaryExpression", "Python.javacc", 236, 19);
                    try {
                        ParsePower();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if ((NextTokenType == TokenType.TILDE) || (NextTokenType == TokenType.MINUS) || (NextTokenType == TokenType.PLUS)) {
                    if ((NextTokenType == TokenType.PLUS)) {
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:236:28
                        ConsumeToken(TokenType.PLUS);


                    }
                    else if ((NextTokenType == TokenType.MINUS)) {
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:236:34
                        ConsumeToken(TokenType.MINUS);


                    }
                    else if ((NextTokenType == TokenType.TILDE)) {
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:236:40
                        ConsumeToken(TokenType.TILDE);


                    }
                    else {
                        PushOntoCallStack("UnaryExpression", "Python.javacc", 236, 28);
                        throw new ParseException(this, first_setΣPython_javaccΣ236Σ28);
                    }

                    // Code for NonTerminal specified at:
                    // Python.javacc:236:45
                    PushOntoCallStack("UnaryExpression", "Python.javacc", 236, 45);
                    try {
                        ParseUnaryExpression();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else {
                    PushOntoCallStack("UnaryExpression", "Python.javacc", 236, 19);
                    throw new ParseException(this, UnaryExpression_FIRST_SET);
                }
            }
            catch (ParseException e) {
                parseException1553 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize1554);
                if (UnaryExpression40 != null) {
                    if (parseException1553 == null) {
                        CloseNodeScope(UnaryExpression40, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseUnaryExpression

        private static readonly HashSet<TokenType> Power_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.ELLIPSIS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:238:1
        public void ParsePower() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "Power";
     
            Power Power41 = null;
            if (BuildTree) {
                Power41 = new Power(tokenSource);
                OpenNodeScope(Power41);
            }

            ParseException parseException1590 = null;
            var callStackSize1591 = ParsingStack.Count;
            try {
                // Code for NonTerminal specified at:
                // Python.javacc:238:9
                PushOntoCallStack("Power", "Python.javacc", 238, 9);
                if (OuterFollowSet != null) {
                    var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ238Σ9);
                    newFollowSet.UnionWith(OuterFollowSet);
                    OuterFollowSet = newFollowSet;
                }
                try {
                    ParseAwaitPrimary();
                }
                finally {
                    PopCallStack();
                }

                // Code for ZeroOrOne specified at:
                // Python.javacc:238:22
                if ((NextTokenType == TokenType.STAR_STAR)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:238:23
                    ConsumeToken(TokenType.STAR_STAR);

                    // Code for NonTerminal specified at:
                    // Python.javacc:238:28
                    PushOntoCallStack("Power", "Python.javacc", 238, 28);
                    try {
                        ParseUnaryExpression();
                    }
                    finally {
                        PopCallStack();
                    }


                }

            }
            catch (ParseException e) {
                parseException1590 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize1591);
                if (Power41 != null) {
                    if (parseException1590 == null) {
                        CloseNodeScope(Power41, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParsePower

        private static readonly HashSet<TokenType> Tuple_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LPAREN
        );

        
        // Python.javacc:240:1
        public void ParseTuple() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "Tuple";
     
            Tuple Tuple42 = null;
            if (BuildTree) {
                Tuple42 = new Tuple(tokenSource);
                OpenNodeScope(Tuple42);
            }

            ParseException parseException1608 = null;
            var callStackSize1609 = ParsingStack.Count;
            try {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:242:5
                ConsumeToken(TokenType.LPAREN);

                // Code for ZeroOrOne specified at:
                // Python.javacc:242:9
                if ((first_setΣPython_javaccΣ242Σ10.Contains(NextTokenType))) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:242:10
                    PushOntoCallStack("Tuple", "Python.javacc", 242, 10);
                    OuterFollowSet = follow_setΣPython_javaccΣ242Σ10Σ;
                    try {
                        ParseStarNamedExpression();
                    }
                    finally {
                        PopCallStack();
                    }

                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:242:30
                    ConsumeToken(TokenType.COMMA);

                    // Code for ZeroOrOne specified at:
                    // Python.javacc:242:34
                    if ((first_setΣPython_javaccΣ242Σ35.Contains(NextTokenType))) {
                        // Code for NonTerminal specified at:
                        // Python.javacc:242:35
                        PushOntoCallStack("Tuple", "Python.javacc", 242, 35);
                        OuterFollowSet = follow_setΣPython_javaccΣ242Σ35Σ;
                        try {
                            ParseStarNamedExpressions();
                        }
                        finally {
                            PopCallStack();
                        }


                    }


                }

                // Code for RegexpStringLiteral specified at:
                // Python.javacc:242:58
                ConsumeToken(TokenType.RPAREN);

            }
            catch (ParseException e) {
                parseException1608 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize1609);
                if (Tuple42 != null) {
                    if (parseException1608 == null) {
                        CloseNodeScope(Tuple42, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseTuple

        private static readonly HashSet<TokenType> Group_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LPAREN
        );

        
        // Python.javacc:245:1
        public void ParseGroup() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "Group";
     
            Group Group43 = null;
            if (BuildTree) {
                Group43 = new Group(tokenSource);
                OpenNodeScope(Group43);
            }

            ParseException parseException1638 = null;
            var callStackSize1639 = ParsingStack.Count;
            try {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:245:9
                ConsumeToken(TokenType.LPAREN);

                if ((NextTokenType == TokenType.YIELD)) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:245:14
                    PushOntoCallStack("Group", "Python.javacc", 245, 14);
                    OuterFollowSet = follow_setΣPython_javaccΣ245Σ14;
                    try {
                        ParseYieldExpression();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if ((first_setΣPython_javaccΣ245Σ32.Contains(NextTokenType))) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:245:32
                    PushOntoCallStack("Group", "Python.javacc", 245, 32);
                    OuterFollowSet = follow_setΣPython_javaccΣ245Σ32Σ;
                    try {
                        ParseNamedExpression();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else {
                    PushOntoCallStack("Group", "Python.javacc", 245, 14);
                    throw new ParseException(this, first_setΣPython_javaccΣ245Σ14Σ);
                }

                // Code for RegexpStringLiteral specified at:
                // Python.javacc:245:49
                ConsumeToken(TokenType.RPAREN);

            }
            catch (ParseException e) {
                parseException1638 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize1639);
                if (Group43 != null) {
                    if (parseException1638 == null) {
                        CloseNodeScope(Group43, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseGroup

        private static readonly HashSet<TokenType> AwaitPrimary_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.ELLIPSIS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:247:1
        public void ParseAwaitPrimary() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "AwaitPrimary";
     
            AwaitPrimary AwaitPrimary44 = null;
            if (BuildTree) {
                AwaitPrimary44 = new AwaitPrimary(tokenSource);
                OpenNodeScope(AwaitPrimary44);
            }

            ParseException parseException1663 = null;
            var callStackSize1664 = ParsingStack.Count;
            try {
                // Code for ZeroOrOne specified at:
                // Python.javacc:247:16
                if ((NextTokenType == TokenType.AWAIT)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:247:17
                    ConsumeToken(TokenType.AWAIT);


                }

                // Code for NonTerminal specified at:
                // Python.javacc:247:26
                PushOntoCallStack("AwaitPrimary", "Python.javacc", 247, 26);
                try {
                    ParsePrimaryExpression();
                }
                finally {
                    PopCallStack();
                }

            }
            catch (ParseException e) {
                parseException1663 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize1664);
                if (AwaitPrimary44 != null) {
                    if (parseException1663 == null) {
                        CloseNodeScope(AwaitPrimary44, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseAwaitPrimary

        private static readonly HashSet<TokenType> PrimaryExpression_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:249:1
        public void ParsePrimaryExpression() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "PrimaryExpression";
            // Code for NonTerminal specified at:
            // Python.javacc:250:4
            PushOntoCallStack("PrimaryExpression", "Python.javacc", 250, 4);
            if (OuterFollowSet != null) {
                var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ250Σ4);
                newFollowSet.UnionWith(OuterFollowSet);
                OuterFollowSet = newFollowSet;
            }
            try {
                ParseAtomicExpression();
            }
            finally {
                PopCallStack();
            }

            // Code for ZeroOrMore specified at:
            // Python.javacc:251:4
            while (true) {
                // Code for ExpansionChoice specified at:
                // Python.javacc:252:8
                if ((NextTokenType == TokenType.DOT)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:252:8
                    ConsumeToken(TokenType.DOT);

                    // Code for RegexpRef specified at:
                    // Python.javacc:252:12
     
                    DotName PrimaryExpression45 = null;
                    if (BuildTree) {
                        PrimaryExpression45 = new DotName(tokenSource);
                        OpenNodeScope(PrimaryExpression45);
                    }

                    ParseException parseException1696 = null;
                    var callStackSize1697 = ParsingStack.Count;
                    try {
                        ConsumeToken(TokenType.NAME);
                    }
                    catch (ParseException e) {
                        parseException1696 = e;
                        throw;
                    }
                    finally {
                        RestoreCallStack(callStackSize1697);
                        if (PrimaryExpression45 != null) {
                            if (parseException1696 == null) {
                                CloseNodeScope(PrimaryExpression45, 3);
                            }
                            else {
                                ClearNodeScope();
                
                            }
                            _currentlyParsedProduction = prevProduction;
                        }
                    }


                }
                else if ((NextTokenType == TokenType.LBRACKET)) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:254:8
     
                    SliceExpression PrimaryExpression46 = null;
                    if (BuildTree) {
                        PrimaryExpression46 = new SliceExpression(tokenSource);
                        OpenNodeScope(PrimaryExpression46);
                    }

                    ParseException parseException1702 = null;
                    var callStackSize1703 = ParsingStack.Count;
                    try {
                        PushOntoCallStack("PrimaryExpression", "Python.javacc", 254, 8);
                        if (OuterFollowSet != null) {
                            var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ254Σ8);
                            newFollowSet.UnionWith(OuterFollowSet);
                            OuterFollowSet = newFollowSet;
                        }
                        try {
                            ParseSlices();
                        }
                        finally {
                            PopCallStack();
                        }
                    }
                    catch (ParseException e) {
                        parseException1702 = e;
                        throw;
                    }
                    finally {
                        RestoreCallStack(callStackSize1703);
                        if (PrimaryExpression46 != null) {
                            if (parseException1702 == null) {
                                CloseNodeScope(PrimaryExpression46, 2);
                            }
                            else {
                                ClearNodeScope();
                
                            }
                            _currentlyParsedProduction = prevProduction;
                        }
                    }


                }
                else if (scanΣPython_javaccΣ256Σ8()) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:256:8
     
                    GenExpression PrimaryExpression47 = null;
                    if (BuildTree) {
                        PrimaryExpression47 = new GenExpression(tokenSource);
                        OpenNodeScope(PrimaryExpression47);
                    }

                    ParseException parseException1708 = null;
                    var callStackSize1709 = ParsingStack.Count;
                    try {
                        PushOntoCallStack("PrimaryExpression", "Python.javacc", 256, 8);
                        if (OuterFollowSet != null) {
                            var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ256Σ8);
                            newFollowSet.UnionWith(OuterFollowSet);
                            OuterFollowSet = newFollowSet;
                        }
                        try {
                            ParseGenExp();
                        }
                        finally {
                            PopCallStack();
                        }
                    }
                    catch (ParseException e) {
                        parseException1708 = e;
                        throw;
                    }
                    finally {
                        RestoreCallStack(callStackSize1709);
                        if (PrimaryExpression47 != null) {
                            if (parseException1708 == null) {
                                CloseNodeScope(PrimaryExpression47, 2);
                            }
                            else {
                                ClearNodeScope();
                
                            }
                            _currentlyParsedProduction = prevProduction;
                        }
                    }


                }
                else if ((NextTokenType == TokenType.LPAREN)) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:258:8
     
                    FunctionCall PrimaryExpression48 = null;
                    if (BuildTree) {
                        PrimaryExpression48 = new FunctionCall(tokenSource);
                        OpenNodeScope(PrimaryExpression48);
                    }

                    ParseException parseException1714 = null;
                    var callStackSize1715 = ParsingStack.Count;
                    try {
                        PushOntoCallStack("PrimaryExpression", "Python.javacc", 258, 8);
                        if (OuterFollowSet != null) {
                            var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ258Σ8);
                            newFollowSet.UnionWith(OuterFollowSet);
                            OuterFollowSet = newFollowSet;
                        }
                        try {
                            ParseInvocationArguments();
                        }
                        finally {
                            PopCallStack();
                        }
                    }
                    catch (ParseException e) {
                        parseException1714 = e;
                        throw;
                    }
                    finally {
                        RestoreCallStack(callStackSize1715);
                        if (PrimaryExpression48 != null) {
                            if (parseException1714 == null) {
                                CloseNodeScope(PrimaryExpression48, 2);
                            }
                            else {
                                ClearNodeScope();
                
                            }
                            _currentlyParsedProduction = prevProduction;
                        }
                    }


                }
                else {
                    break;
                }

            }


        }
        // end of ParsePrimaryExpression

        private static readonly HashSet<TokenType> YieldExpression_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.YIELD
        );

        
        // Python.javacc:262:1
        public void ParseYieldExpression() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "YieldExpression";
            // Code for ExpansionChoice specified at:
            // Python.javacc:263:5
     
            YieldExpression YieldExpression49 = null;
            if (BuildTree) {
                YieldExpression49 = new YieldExpression(tokenSource);
                OpenNodeScope(YieldExpression49);
            }

            ParseException parseException1717 = null;
            var callStackSize1718 = ParsingStack.Count;
            try {
                if (scanΣPython_javaccΣ263Σ5()) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:263:5
                    ConsumeToken(TokenType.YIELD);

                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:263:13
                    ConsumeToken(TokenType.FROM);

                    // Code for NonTerminal specified at:
                    // Python.javacc:263:25
                    PushOntoCallStack("YieldExpression", "Python.javacc", 263, 25);
                    try {
                        ParseExpression();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if ((NextTokenType == TokenType.YIELD)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:265:5
                    ConsumeToken(TokenType.YIELD);

                    // Code for ZeroOrOne specified at:
                    // Python.javacc:265:13
                    if ((first_setΣPython_javaccΣ265Σ14.Contains(NextTokenType))) {
                        // Code for NonTerminal specified at:
                        // Python.javacc:265:14
                        PushOntoCallStack("YieldExpression", "Python.javacc", 265, 14);
                        try {
                            ParseStarExpressions();
                        }
                        finally {
                            PopCallStack();
                        }


                    }


                }
                else {
                    PushOntoCallStack("YieldExpression", "Python.javacc", 263, 5);
                    throw new ParseException(this, YieldExpression_FIRST_SET);
                }
            }
            catch (ParseException e) {
                parseException1717 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize1718);
                if (YieldExpression49 != null) {
                    if (parseException1717 == null) {
                        CloseNodeScope(YieldExpression49, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseYieldExpression

        private static readonly HashSet<TokenType> YieldStatement_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.YIELD
        );

        
        // Python.javacc:268:1
        public void ParseYieldStatement() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "YieldStatement";
     
            YieldStatement YieldStatement50 = null;
            if (BuildTree) {
                YieldStatement50 = new YieldStatement(tokenSource);
                OpenNodeScope(YieldStatement50);
            }

            ParseException parseException1747 = null;
            var callStackSize1748 = ParsingStack.Count;
            try {
                // Code for NonTerminal specified at:
                // Python.javacc:268:19
                PushOntoCallStack("YieldStatement", "Python.javacc", 268, 19);
                try {
                    ParseYieldExpression();
                }
                finally {
                    PopCallStack();
                }

            }
            catch (ParseException e) {
                parseException1747 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize1748);
                if (YieldStatement50 != null) {
                    if (parseException1747 == null) {
                        CloseNodeScope(YieldStatement50, true);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseYieldStatement

        private static readonly HashSet<TokenType> AnnotatedRhs_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:270:1
        public void ParseAnnotatedRhs() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "AnnotatedRhs";
            // Code for ExpansionChoice specified at:
            // Python.javacc:270:16
     
            AnnotatedRhs AnnotatedRhs51 = null;
            if (BuildTree) {
                AnnotatedRhs51 = new AnnotatedRhs(tokenSource);
                OpenNodeScope(AnnotatedRhs51);
            }

            ParseException parseException1753 = null;
            var callStackSize1754 = ParsingStack.Count;
            try {
                if ((NextTokenType == TokenType.YIELD)) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:270:16
                    PushOntoCallStack("AnnotatedRhs", "Python.javacc", 270, 16);
                    try {
                        ParseYieldExpression();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if ((first_setΣPython_javaccΣ270Σ34.Contains(NextTokenType))) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:270:34
                    PushOntoCallStack("AnnotatedRhs", "Python.javacc", 270, 34);
                    try {
                        ParseStarExpressions();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else {
                    PushOntoCallStack("AnnotatedRhs", "Python.javacc", 270, 16);
                    throw new ParseException(this, AnnotatedRhs_FIRST_SET);
                }
            }
            catch (ParseException e) {
                parseException1753 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize1754);
                if (AnnotatedRhs51 != null) {
                    if (parseException1753 == null) {
                        CloseNodeScope(AnnotatedRhs51, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseAnnotatedRhs

        private static readonly HashSet<TokenType> Decorators_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.AT
        );

        
        // Python.javacc:272:1
        public void ParseDecorators() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "Decorators";
     
            Decorators Decorators52 = null;
            if (BuildTree) {
                Decorators52 = new Decorators(tokenSource);
                OpenNodeScope(Decorators52);
            }

            ParseException parseException1768 = null;
            var callStackSize1769 = ParsingStack.Count;
            try {
                // Code for OneOrMore specified at:
                // Python.javacc:272:14
                while (true) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:272:15
                    ConsumeToken(TokenType.AT);

                    // Code for NonTerminal specified at:
                    // Python.javacc:272:19
                    PushOntoCallStack("Decorators", "Python.javacc", 272, 19);
                    OuterFollowSet = follow_setΣPython_javaccΣ272Σ19;
                    try {
                        ParseNamedExpression();
                    }
                    finally {
                        PopCallStack();
                    }

                    // Code for RegexpRef specified at:
                    // Python.javacc:272:35
                    ConsumeToken(TokenType.NEWLINE);



                    if (!((NextTokenType == TokenType.AT))) break;
                }

            }
            catch (ParseException e) {
                parseException1768 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize1769);
                if (Decorators52 != null) {
                    if (parseException1768 == null) {
                        CloseNodeScope(Decorators52, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseDecorators

        private static readonly HashSet<TokenType> Annotation_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        
        // Python.javacc:274:1
        public void ParseAnnotation() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "Annotation";
     
            Annotation Annotation53 = null;
            if (BuildTree) {
                Annotation53 = new Annotation(tokenSource);
                OpenNodeScope(Annotation53);
            }

            ParseException parseException1786 = null;
            var callStackSize1787 = ParsingStack.Count;
            try {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:274:14
                ConsumeToken(TokenType.COLON);

                // Code for NonTerminal specified at:
                // Python.javacc:274:18
                PushOntoCallStack("Annotation", "Python.javacc", 274, 18);
                try {
                    ParseExpression();
                }
                finally {
                    PopCallStack();
                }

            }
            catch (ParseException e) {
                parseException1786 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize1787);
                if (Annotation53 != null) {
                    if (parseException1786 == null) {
                        CloseNodeScope(Annotation53, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseAnnotation

        private static readonly HashSet<TokenType> InvocationArguments_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LPAREN
        );

        
        // Python.javacc:276:1
        public void ParseInvocationArguments() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "InvocationArguments";
     
            InvocationArguments InvocationArguments54 = null;
            if (BuildTree) {
                InvocationArguments54 = new InvocationArguments(tokenSource);
                OpenNodeScope(InvocationArguments54);
            }

            ParseException parseException1795 = null;
            var callStackSize1796 = ParsingStack.Count;
            try {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:277:4
                ConsumeToken(TokenType.LPAREN);

                // Code for ZeroOrOne specified at:
                // Python.javacc:278:4
                if ((first_setΣPython_javaccΣ279Σ7.Contains(NextTokenType))) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:279:7
                    PushOntoCallStack("InvocationArguments", "Python.javacc", 279, 7);
                    OuterFollowSet = follow_setΣPython_javaccΣ279Σ7Σ;
                    try {
                        ParseArgument(false,  false);
                    }
                    finally {
                        PopCallStack();
                    }

                    // Code for CodeBlock specified at:
                    // Python.javacc:280:7
                    bool seenEquals = PeekNode().FirstChildOfType(TokenType.ASSIGN) != null;
                    bool seenDoubleStar = PeekNode().FirstChildOfType(TokenType.STAR_STAR) != null;


                    // Code for ZeroOrMore specified at:
                    // Python.javacc:289:7
                    while (true) {
                        if (!(scanΣPython_javaccΣ290Σ10())) break;
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:291:10
                        ConsumeToken(TokenType.COMMA);

                        // Code for NonTerminal specified at:
                        // Python.javacc:292:10
                        PushOntoCallStack("InvocationArguments", "Python.javacc", 292, 10);
                        OuterFollowSet = follow_setΣPython_javaccΣ292Σ10;
                        try {
                            ParseArgument(seenEquals,  seenDoubleStar);
                        }
                        finally {
                            PopCallStack();
                        }

                        // Code for CodeBlock specified at:
                        // Python.javacc:293:10
                        seenEquals = (PeekNode().FirstChildOfType(TokenType.ASSIGN) != null);
                        seenDoubleStar = (PeekNode().FirstChildOfType(TokenType.STAR_STAR) != null);



                    }

                    // Code for ZeroOrOne specified at:
                    // Python.javacc:298:7
                    if ((NextTokenType == TokenType.COMMA)) {
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:298:8
                        ConsumeToken(TokenType.COMMA);


                    }


                }

                // Code for RegexpStringLiteral specified at:
                // Python.javacc:300:4
                ConsumeToken(TokenType.RPAREN);

            }
            catch (ParseException e) {
                parseException1795 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize1796);
                if (InvocationArguments54 != null) {
                    if (parseException1795 == null) {
                        CloseNodeScope(InvocationArguments54, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseInvocationArguments

        private static readonly HashSet<TokenType> Argument_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.STAR_STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:303:1
        public void ParseArgument(bool seenEquals, bool seenDoubleStar) {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "Argument";
            // Code for ExpansionChoice specified at:
            // Python.javacc:304:4
     
            Argument Argument55 = null;
            if (BuildTree) {
                Argument55 = new Argument(tokenSource);
                OpenNodeScope(Argument55);
            }

            ParseException parseException1840 = null;
            var callStackSize1841 = ParsingStack.Count;
            try {
                if (scanΣPython_javaccΣ304Σ4()) {
                    // Code for RegexpRef specified at:
                    // Python.javacc:304:4
                    ConsumeToken(TokenType.NAME);

                    if ((!seenEquals) && (NextTokenType == TokenType.COLONEQUALS)) {
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:307:7
                        ConsumeToken(TokenType.COLONEQUALS);


                    }
                    else if ((NextTokenType == TokenType.ASSIGN)) {
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:309:7
                        ConsumeToken(TokenType.ASSIGN);


                    }
                    else {
                        PushOntoCallStack("Argument", "Python.javacc", 306, 7);
                        throw new ParseException(this, first_setΣPython_javaccΣ306Σ7);
                    }

                    // Code for NonTerminal specified at:
                    // Python.javacc:312:4
                    PushOntoCallStack("Argument", "Python.javacc", 312, 4);
                    try {
                        ParseExpression();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if ((first_setΣPython_javaccΣ314Σ4.Contains(NextTokenType))) {
                    // Code for ZeroOrOne specified at:
                    // Python.javacc:314:4
                    if ((!seenDoubleStar) && (NextTokenType == TokenType.STAR) || (NextTokenType == TokenType.STAR_STAR)) {
                        if ((NextTokenType == TokenType.STAR)) {
                            // Code for RegexpStringLiteral specified at:
                            // Python.javacc:316:8
                            ConsumeToken(TokenType.STAR);


                        }
                        else if ((NextTokenType == TokenType.STAR_STAR)) {
                            // Code for RegexpStringLiteral specified at:
                            // Python.javacc:316:14
                            ConsumeToken(TokenType.STAR_STAR);


                        }
                        else {
                            PushOntoCallStack("Argument", "Python.javacc", 316, 8);
                            throw new ParseException(this, first_setΣPython_javaccΣ316Σ8);
                        }


                    }

                    // Code for NonTerminal specified at:
                    // Python.javacc:318:4
                    PushOntoCallStack("Argument", "Python.javacc", 318, 4);
                    try {
                        ParseExpression();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else {
                    PushOntoCallStack("Argument", "Python.javacc", 304, 4);
                    throw new ParseException(this, Argument_FIRST_SET);
                }
            }
            catch (ParseException e) {
                parseException1840 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize1841);
                if (Argument55 != null) {
                    if (parseException1840 == null) {
                        CloseNodeScope(Argument55, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseArgument

        private static readonly HashSet<TokenType> KeyValuePair_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:321:1
        public void ParseKeyValuePair() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "KeyValuePair";
     
            KeyValuePair KeyValuePair56 = null;
            if (BuildTree) {
                KeyValuePair56 = new KeyValuePair(tokenSource);
                OpenNodeScope(KeyValuePair56);
            }

            ParseException parseException1896 = null;
            var callStackSize1897 = ParsingStack.Count;
            try {
                // Code for NonTerminal specified at:
                // Python.javacc:321:16
                PushOntoCallStack("KeyValuePair", "Python.javacc", 321, 16);
                OuterFollowSet = follow_setΣPython_javaccΣ321Σ16;
                try {
                    ParseExpression();
                }
                finally {
                    PopCallStack();
                }

                // Code for RegexpStringLiteral specified at:
                // Python.javacc:321:27
                ConsumeToken(TokenType.COLON);

                // Code for NonTerminal specified at:
                // Python.javacc:321:31
                PushOntoCallStack("KeyValuePair", "Python.javacc", 321, 31);
                try {
                    ParseExpression();
                }
                finally {
                    PopCallStack();
                }

            }
            catch (ParseException e) {
                parseException1896 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize1897);
                if (KeyValuePair56 != null) {
                    if (parseException1896 == null) {
                        CloseNodeScope(KeyValuePair56, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseKeyValuePair

        private static readonly HashSet<TokenType> DoubleStarredKeyValuePair_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR_STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:323:1
        public void ParseDoubleStarredKeyValuePair() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "DoubleStarredKeyValuePair";
            // Code for ExpansionChoice specified at:
            // Python.javacc:324:5
     
            DoubleStarredKeyValuePair DoubleStarredKeyValuePair57 = null;
            if (BuildTree) {
                DoubleStarredKeyValuePair57 = new DoubleStarredKeyValuePair(tokenSource);
                OpenNodeScope(DoubleStarredKeyValuePair57);
            }

            ParseException parseException1908 = null;
            var callStackSize1909 = ParsingStack.Count;
            try {
                if ((NextTokenType == TokenType.STAR_STAR)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:324:5
                    ConsumeToken(TokenType.STAR_STAR);

                    // Code for NonTerminal specified at:
                    // Python.javacc:324:10
                    PushOntoCallStack("DoubleStarredKeyValuePair", "Python.javacc", 324, 10);
                    try {
                        ParseBitwiseOr();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if ((first_setΣPython_javaccΣ326Σ5.Contains(NextTokenType))) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:326:5
                    PushOntoCallStack("DoubleStarredKeyValuePair", "Python.javacc", 326, 5);
                    try {
                        ParseKeyValuePair();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else {
                    PushOntoCallStack("DoubleStarredKeyValuePair", "Python.javacc", 324, 5);
                    throw new ParseException(this, DoubleStarredKeyValuePair_FIRST_SET);
                }
            }
            catch (ParseException e) {
                parseException1908 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize1909);
                if (DoubleStarredKeyValuePair57 != null) {
                    if (parseException1908 == null) {
                        CloseNodeScope(DoubleStarredKeyValuePair57, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseDoubleStarredKeyValuePair

        private static readonly HashSet<TokenType> DoubleStarredKeyValuePairs_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR_STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:329:1
        public void ParseDoubleStarredKeyValuePairs() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "DoubleStarredKeyValuePairs";
     
            DoubleStarredKeyValuePairs DoubleStarredKeyValuePairs58 = null;
            if (BuildTree) {
                DoubleStarredKeyValuePairs58 = new DoubleStarredKeyValuePairs(tokenSource);
                OpenNodeScope(DoubleStarredKeyValuePairs58);
            }

            ParseException parseException1926 = null;
            var callStackSize1927 = ParsingStack.Count;
            try {
                // Code for NonTerminal specified at:
                // Python.javacc:329:30
                PushOntoCallStack("DoubleStarredKeyValuePairs", "Python.javacc", 329, 30);
                if (OuterFollowSet != null) {
                    var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ329Σ30);
                    newFollowSet.UnionWith(OuterFollowSet);
                    OuterFollowSet = newFollowSet;
                }
                try {
                    ParseDoubleStarredKeyValuePair();
                }
                finally {
                    PopCallStack();
                }

                // Code for ZeroOrMore specified at:
                // Python.javacc:329:56
                while (true) {
                    if (!(scanΣPython_javaccΣ329Σ57())) break;
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:329:57
                    ConsumeToken(TokenType.COMMA);

                    // Code for NonTerminal specified at:
                    // Python.javacc:329:67
                    PushOntoCallStack("DoubleStarredKeyValuePairs", "Python.javacc", 329, 67);
                    if (OuterFollowSet != null) {
                        var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ329Σ67);
                        newFollowSet.UnionWith(OuterFollowSet);
                        OuterFollowSet = newFollowSet;
                    }
                    try {
                        ParseDoubleStarredKeyValuePair();
                    }
                    finally {
                        PopCallStack();
                    }


                }

                // Code for ZeroOrOne specified at:
                // Python.javacc:329:95
                if ((NextTokenType == TokenType.COMMA)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:329:96
                    ConsumeToken(TokenType.COMMA);


                }

            }
            catch (ParseException e) {
                parseException1926 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize1927);
                if (DoubleStarredKeyValuePairs58 != null) {
                    if (parseException1926 == null) {
                        CloseNodeScope(DoubleStarredKeyValuePairs58, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseDoubleStarredKeyValuePairs

        private static readonly HashSet<TokenType> Dict_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE
        );

        
        // Python.javacc:331:1
        public void ParseDict() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "Dict";
     
            Dict Dict59 = null;
            if (BuildTree) {
                Dict59 = new Dict(tokenSource);
                OpenNodeScope(Dict59);
            }

            ParseException parseException1953 = null;
            var callStackSize1954 = ParsingStack.Count;
            try {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:334:5
                ConsumeToken(TokenType.LBRACE);

                // Code for ZeroOrOne specified at:
                // Python.javacc:335:5
                if ((first_setΣPython_javaccΣ335Σ6.Contains(NextTokenType))) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:335:6
                    PushOntoCallStack("Dict", "Python.javacc", 335, 6);
                    OuterFollowSet = follow_setΣPython_javaccΣ335Σ6Σ;
                    try {
                        ParseDoubleStarredKeyValuePairs();
                    }
                    finally {
                        PopCallStack();
                    }


                }

                // Code for RegexpStringLiteral specified at:
                // Python.javacc:336:5
                ConsumeToken(TokenType.RBRACE);


            }
            catch (ParseException e) {
                parseException1953 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize1954);
                if (Dict59 != null) {
                    if (parseException1953 == null) {
                        CloseNodeScope(Dict59, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseDict

        private static readonly HashSet<TokenType> DictComp_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE
        );

        
        // Python.javacc:340:1
        public void ParseDictComp() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "DictComp";
     
            DictComp DictComp60 = null;
            if (BuildTree) {
                DictComp60 = new DictComp(tokenSource);
                OpenNodeScope(DictComp60);
            }

            ParseException parseException1975 = null;
            var callStackSize1976 = ParsingStack.Count;
            try {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:340:12
                ConsumeToken(TokenType.LBRACE);

                // Code for NonTerminal specified at:
                // Python.javacc:340:16
                PushOntoCallStack("DictComp", "Python.javacc", 340, 16);
                OuterFollowSet = follow_setΣPython_javaccΣ340Σ16;
                try {
                    ParseKeyValuePair();
                }
                finally {
                    PopCallStack();
                }

                // Code for OneOrMore specified at:
                // Python.javacc:340:35
                while (true) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:340:36
                    PushOntoCallStack("DictComp", "Python.javacc", 340, 36);
                    OuterFollowSet = follow_setΣPython_javaccΣ340Σ36;
                    try {
                        ParseForIfClause();
                    }
                    finally {
                        PopCallStack();
                    }



                    if (!((NextTokenType == TokenType.ASYNC) || (NextTokenType == TokenType.FOR))) break;
                }

                // Code for RegexpStringLiteral specified at:
                // Python.javacc:340:50
                ConsumeToken(TokenType.RBRACE);

            }
            catch (ParseException e) {
                parseException1975 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize1976);
                if (DictComp60 != null) {
                    if (parseException1975 == null) {
                        CloseNodeScope(DictComp60, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseDictComp

        private static readonly HashSet<TokenType> Set_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE
        );

        
        // Python.javacc:342:1
        public void ParseSet() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "Set";
     
            Set Set61 = null;
            if (BuildTree) {
                Set61 = new Set(tokenSource);
                OpenNodeScope(Set61);
            }

            ParseException parseException1996 = null;
            var callStackSize1997 = ParsingStack.Count;
            try {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:342:7
                ConsumeToken(TokenType.LBRACE);

                // Code for NonTerminal specified at:
                // Python.javacc:342:11
                PushOntoCallStack("Set", "Python.javacc", 342, 11);
                OuterFollowSet = follow_setΣPython_javaccΣ342Σ11;
                try {
                    ParseStarNamedExpressions();
                }
                finally {
                    PopCallStack();
                }

                // Code for RegexpStringLiteral specified at:
                // Python.javacc:342:32
                ConsumeToken(TokenType.RBRACE);

            }
            catch (ParseException e) {
                parseException1996 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize1997);
                if (Set61 != null) {
                    if (parseException1996 == null) {
                        CloseNodeScope(Set61, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseSet

        private static readonly HashSet<TokenType> SetComp_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE
        );

        
        // Python.javacc:344:1
        public void ParseSetComp() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "SetComp";
     
            SetComp SetComp62 = null;
            if (BuildTree) {
                SetComp62 = new SetComp(tokenSource);
                OpenNodeScope(SetComp62);
            }

            ParseException parseException2008 = null;
            var callStackSize2009 = ParsingStack.Count;
            try {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:344:11
                ConsumeToken(TokenType.LBRACE);

                // Code for NonTerminal specified at:
                // Python.javacc:344:15
                PushOntoCallStack("SetComp", "Python.javacc", 344, 15);
                OuterFollowSet = follow_setΣPython_javaccΣ344Σ15;
                try {
                    ParseNamedExpression();
                }
                finally {
                    PopCallStack();
                }

                // Code for OneOrMore specified at:
                // Python.javacc:344:37
                while (true) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:344:38
                    PushOntoCallStack("SetComp", "Python.javacc", 344, 38);
                    OuterFollowSet = follow_setΣPython_javaccΣ344Σ38;
                    try {
                        ParseForIfClause();
                    }
                    finally {
                        PopCallStack();
                    }



                    if (!((NextTokenType == TokenType.ASYNC) || (NextTokenType == TokenType.FOR))) break;
                }

                // Code for RegexpStringLiteral specified at:
                // Python.javacc:344:52
                ConsumeToken(TokenType.RBRACE);

            }
            catch (ParseException e) {
                parseException2008 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize2009);
                if (SetComp62 != null) {
                    if (parseException2008 == null) {
                        CloseNodeScope(SetComp62, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseSetComp

        private static readonly HashSet<TokenType> ClassDefinition_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.AT,
            TokenType.CLASS
        );

        
        // Python.javacc:346:1
        public void ParseClassDefinition() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "ClassDefinition";
     
            ClassDefinition ClassDefinition63 = null;
            if (BuildTree) {
                ClassDefinition63 = new ClassDefinition(tokenSource);
                OpenNodeScope(ClassDefinition63);
            }

            ParseException parseException2029 = null;
            var callStackSize2030 = ParsingStack.Count;
            try {
                // Code for ZeroOrOne specified at:
                // Python.javacc:347:5
                if ((NextTokenType == TokenType.AT)) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:347:6
                    PushOntoCallStack("ClassDefinition", "Python.javacc", 347, 6);
                    OuterFollowSet = follow_setΣPython_javaccΣ347Σ6;
                    try {
                        ParseDecorators();
                    }
                    finally {
                        PopCallStack();
                    }


                }

                // Code for RegexpStringLiteral specified at:
                // Python.javacc:347:18
                ConsumeToken(TokenType.CLASS);

                // Code for RegexpRef specified at:
                // Python.javacc:348:5
                ConsumeToken(TokenType.NAME);

                // Code for ZeroOrOne specified at:
                // Python.javacc:348:12
                if ((NextTokenType == TokenType.LPAREN)) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:348:13
                    PushOntoCallStack("ClassDefinition", "Python.javacc", 348, 13);
                    OuterFollowSet = follow_setΣPython_javaccΣ348Σ13;
                    try {
                        ParseInvocationArguments();
                    }
                    finally {
                        PopCallStack();
                    }


                }

                // Code for RegexpStringLiteral specified at:
                // Python.javacc:349:5
                ConsumeToken(TokenType.COLON);

                // Code for NonTerminal specified at:
                // Python.javacc:350:5
                PushOntoCallStack("ClassDefinition", "Python.javacc", 350, 5);
                try {
                    ParseBlock();
                }
                finally {
                    PopCallStack();
                }

            }
            catch (ParseException e) {
                parseException2029 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize2030);
                if (ClassDefinition63 != null) {
                    if (parseException2029 == null) {
                        CloseNodeScope(ClassDefinition63, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseClassDefinition

        private static readonly HashSet<TokenType> FunctionDefinition_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.AT,
            TokenType.ASYNC,
            TokenType.DEF
        );

        
        // Python.javacc:353:1
        public void ParseFunctionDefinition() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "FunctionDefinition";
     
            FunctionDefinition FunctionDefinition64 = null;
            if (BuildTree) {
                FunctionDefinition64 = new FunctionDefinition(tokenSource);
                OpenNodeScope(FunctionDefinition64);
            }

            ParseException parseException2062 = null;
            var callStackSize2063 = ParsingStack.Count;
            try {
                // Code for ZeroOrOne specified at:
                // Python.javacc:354:5
                if ((NextTokenType == TokenType.AT)) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:354:6
                    PushOntoCallStack("FunctionDefinition", "Python.javacc", 354, 6);
                    OuterFollowSet = follow_setΣPython_javaccΣ354Σ6;
                    try {
                        ParseDecorators();
                    }
                    finally {
                        PopCallStack();
                    }


                }

                // Code for ZeroOrOne specified at:
                // Python.javacc:355:5
                if ((NextTokenType == TokenType.ASYNC)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:355:6
                    ConsumeToken(TokenType.ASYNC);


                }

                // Code for RegexpStringLiteral specified at:
                // Python.javacc:356:5
                ConsumeToken(TokenType.DEF);

                // Code for RegexpRef specified at:
                // Python.javacc:357:5
                ConsumeToken(TokenType.NAME);

                // Code for RegexpStringLiteral specified at:
                // Python.javacc:358:5
                ConsumeToken(TokenType.LPAREN);

                // Code for NonTerminal specified at:
                // Python.javacc:359:5
                PushOntoCallStack("FunctionDefinition", "Python.javacc", 359, 5);
                OuterFollowSet = follow_setΣPython_javaccΣ359Σ5;
                try {
                    ParseParameters();
                }
                finally {
                    PopCallStack();
                }

                // Code for RegexpStringLiteral specified at:
                // Python.javacc:360:5
                ConsumeToken(TokenType.RPAREN);

                // Code for ZeroOrOne specified at:
                // Python.javacc:361:5
                if ((NextTokenType == TokenType.RARROW)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:361:6
                    ConsumeToken(TokenType.RARROW);

                    // Code for NonTerminal specified at:
                    // Python.javacc:361:11
                    PushOntoCallStack("FunctionDefinition", "Python.javacc", 361, 11);
                    OuterFollowSet = follow_setΣPython_javaccΣ361Σ11;
                    try {
                        ParseExpression();
                    }
                    finally {
                        PopCallStack();
                    }


                }

                // Code for RegexpStringLiteral specified at:
                // Python.javacc:362:5
                ConsumeToken(TokenType.COLON);

                // Code for NonTerminal specified at:
                // Python.javacc:362:9
                PushOntoCallStack("FunctionDefinition", "Python.javacc", 362, 9);
                try {
                    ParseBlock();
                }
                finally {
                    PopCallStack();
                }

            }
            catch (ParseException e) {
                parseException2062 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize2063);
                if (FunctionDefinition64 != null) {
                    if (parseException2062 == null) {
                        CloseNodeScope(FunctionDefinition64, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseFunctionDefinition

        private static readonly HashSet<TokenType> LambdaDefinition_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LAMBDA
        );

        
        // Python.javacc:365:1
        public void ParseLambdaDefinition() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "LambdaDefinition";
     
            LambdaDefinition LambdaDefinition65 = null;
            if (BuildTree) {
                LambdaDefinition65 = new LambdaDefinition(tokenSource);
                OpenNodeScope(LambdaDefinition65);
            }

            ParseException parseException2116 = null;
            var callStackSize2117 = ParsingStack.Count;
            try {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:365:20
                ConsumeToken(TokenType.LAMBDA);

                // Code for NonTerminal specified at:
                // Python.javacc:365:29
                PushOntoCallStack("LambdaDefinition", "Python.javacc", 365, 29);
                OuterFollowSet = follow_setΣPython_javaccΣ365Σ29;
                try {
                    ParseParameters();
                }
                finally {
                    PopCallStack();
                }

                // Code for RegexpStringLiteral specified at:
                // Python.javacc:365:40
                ConsumeToken(TokenType.COLON);

                // Code for NonTerminal specified at:
                // Python.javacc:365:44
                PushOntoCallStack("LambdaDefinition", "Python.javacc", 365, 44);
                try {
                    ParseExpression();
                }
                finally {
                    PopCallStack();
                }

            }
            catch (ParseException e) {
                parseException2116 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize2117);
                if (LambdaDefinition65 != null) {
                    if (parseException2116 == null) {
                        CloseNodeScope(LambdaDefinition65, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseLambdaDefinition

        private static readonly HashSet<TokenType> Expression_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:371:1
        public void ParseExpression() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "Expression";
            // Code for ExpansionChoice specified at:
            // Python.javacc:371:14
     
            Expression Expression66 = null;
            if (BuildTree) {
                Expression66 = new Expression(tokenSource);
                OpenNodeScope(Expression66);
            }

            ParseException parseException2131 = null;
            var callStackSize2132 = ParsingStack.Count;
            try {
                if ((first_setΣPython_javaccΣ371Σ14.Contains(NextTokenType))) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:371:14
                    PushOntoCallStack("Expression", "Python.javacc", 371, 14);
                    if (OuterFollowSet != null) {
                        var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ371Σ14Σ);
                        newFollowSet.UnionWith(OuterFollowSet);
                        OuterFollowSet = newFollowSet;
                    }
                    try {
                        ParseDisjunction();
                    }
                    finally {
                        PopCallStack();
                    }

                    // Code for ZeroOrOne specified at:
                    // Python.javacc:371:26
                    if ((NextTokenType == TokenType.IF)) {
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:371:27
                        ConsumeToken(TokenType.IF);

                        // Code for NonTerminal specified at:
                        // Python.javacc:371:32
                        PushOntoCallStack("Expression", "Python.javacc", 371, 32);
                        OuterFollowSet = follow_setΣPython_javaccΣ371Σ32;
                        try {
                            ParseDisjunction();
                        }
                        finally {
                            PopCallStack();
                        }

                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:371:44
                        ConsumeToken(TokenType.ELSE);

                        // Code for NonTerminal specified at:
                        // Python.javacc:371:51
                        PushOntoCallStack("Expression", "Python.javacc", 371, 51);
                        try {
                            ParseExpression();
                        }
                        finally {
                            PopCallStack();
                        }


                    }


                }
                else if ((NextTokenType == TokenType.LAMBDA)) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:371:65
                    PushOntoCallStack("Expression", "Python.javacc", 371, 65);
                    try {
                        ParseLambdaDefinition();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else {
                    PushOntoCallStack("Expression", "Python.javacc", 371, 14);
                    throw new ParseException(this, Expression_FIRST_SET);
                }
            }
            catch (ParseException e) {
                parseException2131 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize2132);
                if (Expression66 != null) {
                    if (parseException2131 == null) {
                        CloseNodeScope(Expression66, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseExpression

        private static readonly HashSet<TokenType> Disjunction_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:373:1
        public void ParseDisjunction() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "Disjunction";
     
            Disjunction Disjunction67 = null;
            if (BuildTree) {
                Disjunction67 = new Disjunction(tokenSource);
                OpenNodeScope(Disjunction67);
            }

            ParseException parseException2164 = null;
            var callStackSize2165 = ParsingStack.Count;
            try {
                // Code for NonTerminal specified at:
                // Python.javacc:373:15
                PushOntoCallStack("Disjunction", "Python.javacc", 373, 15);
                if (OuterFollowSet != null) {
                    var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ373Σ15);
                    newFollowSet.UnionWith(OuterFollowSet);
                    OuterFollowSet = newFollowSet;
                }
                try {
                    ParseConjunction();
                }
                finally {
                    PopCallStack();
                }

                // Code for ZeroOrMore specified at:
                // Python.javacc:373:27
                while (true) {
                    if (!((NextTokenType == TokenType.OR))) break;
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:373:28
                    ConsumeToken(TokenType.OR);

                    // Code for NonTerminal specified at:
                    // Python.javacc:373:33
                    PushOntoCallStack("Disjunction", "Python.javacc", 373, 33);
                    if (OuterFollowSet != null) {
                        var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ373Σ33);
                        newFollowSet.UnionWith(OuterFollowSet);
                        OuterFollowSet = newFollowSet;
                    }
                    try {
                        ParseConjunction();
                    }
                    finally {
                        PopCallStack();
                    }


                }

            }
            catch (ParseException e) {
                parseException2164 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize2165);
                if (Disjunction67 != null) {
                    if (parseException2164 == null) {
                        CloseNodeScope(Disjunction67, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseDisjunction

        private static readonly HashSet<TokenType> Conjunction_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:375:1
        public void ParseConjunction() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "Conjunction";
     
            Conjunction Conjunction68 = null;
            if (BuildTree) {
                Conjunction68 = new Conjunction(tokenSource);
                OpenNodeScope(Conjunction68);
            }

            ParseException parseException2182 = null;
            var callStackSize2183 = ParsingStack.Count;
            try {
                // Code for NonTerminal specified at:
                // Python.javacc:375:15
                PushOntoCallStack("Conjunction", "Python.javacc", 375, 15);
                if (OuterFollowSet != null) {
                    var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ375Σ15);
                    newFollowSet.UnionWith(OuterFollowSet);
                    OuterFollowSet = newFollowSet;
                }
                try {
                    ParseInversion();
                }
                finally {
                    PopCallStack();
                }

                // Code for ZeroOrMore specified at:
                // Python.javacc:375:25
                while (true) {
                    if (!((NextTokenType == TokenType.AND))) break;
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:375:26
                    ConsumeToken(TokenType.AND);

                    // Code for NonTerminal specified at:
                    // Python.javacc:375:32
                    PushOntoCallStack("Conjunction", "Python.javacc", 375, 32);
                    if (OuterFollowSet != null) {
                        var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ375Σ32);
                        newFollowSet.UnionWith(OuterFollowSet);
                        OuterFollowSet = newFollowSet;
                    }
                    try {
                        ParseInversion();
                    }
                    finally {
                        PopCallStack();
                    }


                }

            }
            catch (ParseException e) {
                parseException2182 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize2183);
                if (Conjunction68 != null) {
                    if (parseException2182 == null) {
                        CloseNodeScope(Conjunction68, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseConjunction

        private static readonly HashSet<TokenType> Inversion_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:377:1
        public void ParseInversion() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "Inversion";
     
            Inversion Inversion69 = null;
            if (BuildTree) {
                Inversion69 = new Inversion(tokenSource);
                OpenNodeScope(Inversion69);
            }

            ParseException parseException2200 = null;
            var callStackSize2201 = ParsingStack.Count;
            try {
                // Code for ZeroOrMore specified at:
                // Python.javacc:377:13
                while (true) {
                    if (!((NextTokenType == TokenType.NOT))) break;
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:377:14
                    ConsumeToken(TokenType.NOT);


                }

                // Code for NonTerminal specified at:
                // Python.javacc:377:22
                PushOntoCallStack("Inversion", "Python.javacc", 377, 22);
                try {
                    ParseComparison();
                }
                finally {
                    PopCallStack();
                }

            }
            catch (ParseException e) {
                parseException2200 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize2201);
                if (Inversion69 != null) {
                    if (parseException2200 == null) {
                        CloseNodeScope(Inversion69, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseInversion

        private static readonly HashSet<TokenType> Comparison_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:379:1
        public void ParseComparison() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "Comparison";
     
            Comparison Comparison70 = null;
            if (BuildTree) {
                Comparison70 = new Comparison(tokenSource);
                OpenNodeScope(Comparison70);
            }

            ParseException parseException2215 = null;
            var callStackSize2216 = ParsingStack.Count;
            try {
                // Code for NonTerminal specified at:
                // Python.javacc:379:14
                PushOntoCallStack("Comparison", "Python.javacc", 379, 14);
                if (OuterFollowSet != null) {
                    var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ379Σ14);
                    newFollowSet.UnionWith(OuterFollowSet);
                    OuterFollowSet = newFollowSet;
                }
                try {
                    ParseBitwiseOr();
                }
                finally {
                    PopCallStack();
                }

                // Code for ZeroOrMore specified at:
                // Python.javacc:379:24
                while (true) {
                    if (!((first_setΣPython_javaccΣ379Σ25.Contains(NextTokenType)))) break;
                    // Code for NonTerminal specified at:
                    // Python.javacc:379:25
                    PushOntoCallStack("Comparison", "Python.javacc", 379, 25);
                    OuterFollowSet = follow_setΣPython_javaccΣ379Σ25Σ;
                    try {
                        ParseComparisonOperator();
                    }
                    finally {
                        PopCallStack();
                    }

                    // Code for NonTerminal specified at:
                    // Python.javacc:379:44
                    PushOntoCallStack("Comparison", "Python.javacc", 379, 44);
                    if (OuterFollowSet != null) {
                        var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ379Σ44);
                        newFollowSet.UnionWith(OuterFollowSet);
                        OuterFollowSet = newFollowSet;
                    }
                    try {
                        ParseBitwiseOr();
                    }
                    finally {
                        PopCallStack();
                    }


                }

            }
            catch (ParseException e) {
                parseException2215 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize2216);
                if (Comparison70 != null) {
                    if (parseException2215 == null) {
                        CloseNodeScope(Comparison70, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseComparison

        private static readonly HashSet<TokenType> ComparisonOperator_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.EQ,
            TokenType.LE,
            TokenType.GE,
            TokenType.NE,
            TokenType.GT,
            TokenType.LT,
            TokenType.IN,
            TokenType.IS,
            TokenType.NOT
        );

        
        // Python.javacc:381:1
        public void ParseComparisonOperator() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "ComparisonOperator";
            // Code for ExpansionChoice specified at:
            // Python.javacc:382:4
            if ((NextTokenType == TokenType.LT)) {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:382:4
                ConsumeToken(TokenType.LT);


            }
            else if ((NextTokenType == TokenType.GT)) {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:382:10
                ConsumeToken(TokenType.GT);


            }
            else if ((NextTokenType == TokenType.EQ)) {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:382:16
                ConsumeToken(TokenType.EQ);


            }
            else if ((NextTokenType == TokenType.GE)) {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:382:23
                ConsumeToken(TokenType.GE);


            }
            else if ((NextTokenType == TokenType.LE)) {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:382:30
                ConsumeToken(TokenType.LE);


            }
            else if ((NextTokenType == TokenType.NE)) {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:382:37
                ConsumeToken(TokenType.NE);


            }
            else if ((NextTokenType == TokenType.IN) || (NextTokenType == TokenType.NOT)) {
                // Code for ZeroOrOne specified at:
                // Python.javacc:384:4
                if ((NextTokenType == TokenType.NOT)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:384:5
                    ConsumeToken(TokenType.NOT);


                }

                // Code for RegexpStringLiteral specified at:
                // Python.javacc:384:12
                ConsumeToken(TokenType.IN);


            }
            else if ((NextTokenType == TokenType.IS)) {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:386:4
                ConsumeToken(TokenType.IS);

                // Code for ZeroOrOne specified at:
                // Python.javacc:386:9
                if ((NextTokenType == TokenType.NOT)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:386:10
                    ConsumeToken(TokenType.NOT);


                }


            }
            else {
                PushOntoCallStack("ComparisonOperator", "Python.javacc", 382, 4);
                throw new ParseException(this, ComparisonOperator_FIRST_SET);
            }

        }
        // end of ParseComparisonOperator

        private static readonly HashSet<TokenType> StarTarget_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:389:1
        public void ParseStarTarget() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "StarTarget";
     
            StarTarget StarTarget71 = null;
            if (BuildTree) {
                StarTarget71 = new StarTarget(tokenSource);
                OpenNodeScope(StarTarget71);
            }

            ParseException parseException2302 = null;
            var callStackSize2303 = ParsingStack.Count;
            try {
                // Code for ZeroOrOne specified at:
                // Python.javacc:389:14
                if ((NextTokenType == TokenType.STAR)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:389:15
                    ConsumeToken(TokenType.STAR);


                }

                // Code for NonTerminal specified at:
                // Python.javacc:389:20
                PushOntoCallStack("StarTarget", "Python.javacc", 389, 20);
                try {
                    ParsePrimaryExpression();
                }
                finally {
                    PopCallStack();
                }

            }
            catch (ParseException e) {
                parseException2302 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize2303);
                if (StarTarget71 != null) {
                    if (parseException2302 == null) {
                        CloseNodeScope(StarTarget71, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseStarTarget

        private static readonly HashSet<TokenType> StarTargets_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:391:1
        public void ParseStarTargets() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "StarTargets";
     
            StarTargets StarTargets72 = null;
            if (BuildTree) {
                StarTargets72 = new StarTargets(tokenSource);
                OpenNodeScope(StarTargets72);
            }

            ParseException parseException2317 = null;
            var callStackSize2318 = ParsingStack.Count;
            try {
                // Code for NonTerminal specified at:
                // Python.javacc:391:15
                PushOntoCallStack("StarTargets", "Python.javacc", 391, 15);
                if (OuterFollowSet != null) {
                    var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ391Σ15);
                    newFollowSet.UnionWith(OuterFollowSet);
                    OuterFollowSet = newFollowSet;
                }
                try {
                    ParseStarTarget();
                }
                finally {
                    PopCallStack();
                }

                // Code for ZeroOrMore specified at:
                // Python.javacc:391:26
                while (true) {
                    if (!(scanΣPython_javaccΣ391Σ27())) break;
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:391:27
                    ConsumeToken(TokenType.COMMA);

                    // Code for NonTerminal specified at:
                    // Python.javacc:391:37
                    PushOntoCallStack("StarTargets", "Python.javacc", 391, 37);
                    if (OuterFollowSet != null) {
                        var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ391Σ37);
                        newFollowSet.UnionWith(OuterFollowSet);
                        OuterFollowSet = newFollowSet;
                    }
                    try {
                        ParseStarTarget();
                    }
                    finally {
                        PopCallStack();
                    }


                }

                // Code for ZeroOrOne specified at:
                // Python.javacc:391:50
                if ((NextTokenType == TokenType.COMMA)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:391:51
                    ConsumeToken(TokenType.COMMA);


                }

            }
            catch (ParseException e) {
                parseException2317 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize2318);
                if (StarTargets72 != null) {
                    if (parseException2317 == null) {
                        CloseNodeScope(StarTargets72, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseStarTargets

        private static readonly HashSet<TokenType> ForIfClause_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.ASYNC,
            TokenType.FOR
        );

        
        // Python.javacc:393:1
        public void ParseForIfClause() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "ForIfClause";
     
            ForIfClause ForIfClause73 = null;
            if (BuildTree) {
                ForIfClause73 = new ForIfClause(tokenSource);
                OpenNodeScope(ForIfClause73);
            }

            ParseException parseException2344 = null;
            var callStackSize2345 = ParsingStack.Count;
            try {
                // Code for ZeroOrOne specified at:
                // Python.javacc:393:15
                if ((NextTokenType == TokenType.ASYNC)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:393:16
                    ConsumeToken(TokenType.ASYNC);


                }

                // Code for RegexpStringLiteral specified at:
                // Python.javacc:393:25
                ConsumeToken(TokenType.FOR);

                // Code for NonTerminal specified at:
                // Python.javacc:393:31
                PushOntoCallStack("ForIfClause", "Python.javacc", 393, 31);
                OuterFollowSet = follow_setΣPython_javaccΣ393Σ31;
                try {
                    ParseStarTargets();
                }
                finally {
                    PopCallStack();
                }

                // Code for RegexpStringLiteral specified at:
                // Python.javacc:393:43
                ConsumeToken(TokenType.IN);

                // Code for NonTerminal specified at:
                // Python.javacc:393:48
                PushOntoCallStack("ForIfClause", "Python.javacc", 393, 48);
                if (OuterFollowSet != null) {
                    var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ393Σ48);
                    newFollowSet.UnionWith(OuterFollowSet);
                    OuterFollowSet = newFollowSet;
                }
                try {
                    ParseDisjunction();
                }
                finally {
                    PopCallStack();
                }

                // Code for ZeroOrMore specified at:
                // Python.javacc:393:60
                while (true) {
                    if (!((NextTokenType == TokenType.IF))) break;
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:393:61
                    ConsumeToken(TokenType.IF);

                    // Code for NonTerminal specified at:
                    // Python.javacc:393:66
                    PushOntoCallStack("ForIfClause", "Python.javacc", 393, 66);
                    if (OuterFollowSet != null) {
                        var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ393Σ66);
                        newFollowSet.UnionWith(OuterFollowSet);
                        OuterFollowSet = newFollowSet;
                    }
                    try {
                        ParseDisjunction();
                    }
                    finally {
                        PopCallStack();
                    }


                }

            }
            catch (ParseException e) {
                parseException2344 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize2345);
                if (ForIfClause73 != null) {
                    if (parseException2344 == null) {
                        CloseNodeScope(ForIfClause73, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseForIfClause

        private static readonly HashSet<TokenType> GenExp_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LPAREN
        );

        
        // Python.javacc:395:1
        public void ParseGenExp() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "GenExp";
     
            GenExp GenExp74 = null;
            if (BuildTree) {
                GenExp74 = new GenExp(tokenSource);
                OpenNodeScope(GenExp74);
            }

            ParseException parseException2380 = null;
            var callStackSize2381 = ParsingStack.Count;
            try {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:395:10
                ConsumeToken(TokenType.LPAREN);

                // Code for NonTerminal specified at:
                // Python.javacc:395:14
                PushOntoCallStack("GenExp", "Python.javacc", 395, 14);
                OuterFollowSet = follow_setΣPython_javaccΣ395Σ14;
                try {
                    ParseNamedExpression();
                }
                finally {
                    PopCallStack();
                }

                // Code for OneOrMore specified at:
                // Python.javacc:395:36
                while (true) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:395:37
                    PushOntoCallStack("GenExp", "Python.javacc", 395, 37);
                    OuterFollowSet = follow_setΣPython_javaccΣ395Σ37;
                    try {
                        ParseForIfClause();
                    }
                    finally {
                        PopCallStack();
                    }



                    if (!((NextTokenType == TokenType.ASYNC) || (NextTokenType == TokenType.FOR))) break;
                }

                // Code for RegexpStringLiteral specified at:
                // Python.javacc:395:51
                ConsumeToken(TokenType.RPAREN);

            }
            catch (ParseException e) {
                parseException2380 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize2381);
                if (GenExp74 != null) {
                    if (parseException2380 == null) {
                        CloseNodeScope(GenExp74, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseGenExp

        private static readonly HashSet<TokenType> List_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACKET
        );

        
        // Python.javacc:397:1
        public void ParseList() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "List";
     
            List List75 = null;
            if (BuildTree) {
                List75 = new List(tokenSource);
                OpenNodeScope(List75);
            }

            ParseException parseException2401 = null;
            var callStackSize2402 = ParsingStack.Count;
            try {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:397:8
                ConsumeToken(TokenType.LBRACKET);

                // Code for ZeroOrOne specified at:
                // Python.javacc:397:12
                if ((first_setΣPython_javaccΣ397Σ13.Contains(NextTokenType))) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:397:13
                    PushOntoCallStack("List", "Python.javacc", 397, 13);
                    OuterFollowSet = follow_setΣPython_javaccΣ397Σ13Σ;
                    try {
                        ParseStarNamedExpressions();
                    }
                    finally {
                        PopCallStack();
                    }


                }

                // Code for RegexpStringLiteral specified at:
                // Python.javacc:397:35
                ConsumeToken(TokenType.RBRACKET);

            }
            catch (ParseException e) {
                parseException2401 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize2402);
                if (List75 != null) {
                    if (parseException2401 == null) {
                        CloseNodeScope(List75, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseList

        private static readonly HashSet<TokenType> ListComp_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACKET
        );

        
        // Python.javacc:399:1
        public void ParseListComp() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "ListComp";
     
            ListComp ListComp76 = null;
            if (BuildTree) {
                ListComp76 = new ListComp(tokenSource);
                OpenNodeScope(ListComp76);
            }

            ParseException parseException2419 = null;
            var callStackSize2420 = ParsingStack.Count;
            try {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:399:12
                ConsumeToken(TokenType.LBRACKET);

                // Code for NonTerminal specified at:
                // Python.javacc:399:16
                PushOntoCallStack("ListComp", "Python.javacc", 399, 16);
                OuterFollowSet = follow_setΣPython_javaccΣ399Σ16;
                try {
                    ParseNamedExpression();
                }
                finally {
                    PopCallStack();
                }

                // Code for OneOrMore specified at:
                // Python.javacc:399:38
                while (true) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:399:39
                    PushOntoCallStack("ListComp", "Python.javacc", 399, 39);
                    OuterFollowSet = follow_setΣPython_javaccΣ399Σ39;
                    try {
                        ParseForIfClause();
                    }
                    finally {
                        PopCallStack();
                    }



                    if (!((NextTokenType == TokenType.ASYNC) || (NextTokenType == TokenType.FOR))) break;
                }

                // Code for RegexpStringLiteral specified at:
                // Python.javacc:399:53
                ConsumeToken(TokenType.RBRACKET);

            }
            catch (ParseException e) {
                parseException2419 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize2420);
                if (ListComp76 != null) {
                    if (parseException2419 == null) {
                        CloseNodeScope(ListComp76, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseListComp

        private static readonly HashSet<TokenType> StarEtc_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.STAR,
            TokenType.STAR_STAR
        );

        
        // Python.javacc:401:1
        public void ParseStarEtc() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "StarEtc";
            // Code for ExpansionChoice specified at:
            // Python.javacc:402:4
     
            StarEtc StarEtc77 = null;
            if (BuildTree) {
                StarEtc77 = new StarEtc(tokenSource);
                OpenNodeScope(StarEtc77);
            }

            ParseException parseException2440 = null;
            var callStackSize2441 = ParsingStack.Count;
            try {
                if ((NextTokenType == TokenType.STAR_STAR)) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:402:4
                    PushOntoCallStack("StarEtc", "Python.javacc", 402, 4);
                    try {
                        ParseKeyWords();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if (scanΣPython_javaccΣ404Σ4()) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:404:4
                    ConsumeToken(TokenType.STAR);

                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:404:8
                    ConsumeToken(TokenType.COMMA);

                    // Code for NonTerminal specified at:
                    // Python.javacc:404:17
                    PushOntoCallStack("StarEtc", "Python.javacc", 404, 17);
                    if (OuterFollowSet != null) {
                        var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ404Σ17);
                        newFollowSet.UnionWith(OuterFollowSet);
                        OuterFollowSet = newFollowSet;
                    }
                    try {
                        ParseParamMaybeDefault();
                    }
                    finally {
                        PopCallStack();
                    }

                    // Code for ZeroOrMore specified at:
                    // Python.javacc:404:35
                    while (true) {
                        if (!(scanΣPython_javaccΣ404Σ36())) break;
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:404:36
                        ConsumeToken(TokenType.COMMA);

                        // Code for NonTerminal specified at:
                        // Python.javacc:404:46
                        PushOntoCallStack("StarEtc", "Python.javacc", 404, 46);
                        if (OuterFollowSet != null) {
                            var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ404Σ46);
                            newFollowSet.UnionWith(OuterFollowSet);
                            OuterFollowSet = newFollowSet;
                        }
                        try {
                            ParseParamMaybeDefault();
                        }
                        finally {
                            PopCallStack();
                        }


                    }

                    // Code for ZeroOrOne specified at:
                    // Python.javacc:404:66
                    if ((NextTokenType == TokenType.COMMA)) {
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:404:67
                        ConsumeToken(TokenType.COMMA);

                        // Code for ZeroOrOne specified at:
                        // Python.javacc:404:71
                        if ((NextTokenType == TokenType.STAR_STAR)) {
                            // Code for NonTerminal specified at:
                            // Python.javacc:404:72
                            PushOntoCallStack("StarEtc", "Python.javacc", 404, 72);
                            try {
                                ParseKeyWords();
                            }
                            finally {
                                PopCallStack();
                            }


                        }


                    }


                }
                else if ((NextTokenType == TokenType.STAR)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:406:4
                    ConsumeToken(TokenType.STAR);

                    // Code for RegexpRef specified at:
                    // Python.javacc:406:8
                    ConsumeToken(TokenType.NAME);

                    // Code for ZeroOrOne specified at:
                    // Python.javacc:406:15
                    if (scanΣPython_javaccΣ406Σ16()) {
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:406:48
                        ConsumeToken(TokenType.COLON);

                        // Code for NonTerminal specified at:
                        // Python.javacc:406:52
                        PushOntoCallStack("StarEtc", "Python.javacc", 406, 52);
                        if (OuterFollowSet != null) {
                            var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ406Σ52);
                            newFollowSet.UnionWith(OuterFollowSet);
                            OuterFollowSet = newFollowSet;
                        }
                        try {
                            ParseExpression();
                        }
                        finally {
                            PopCallStack();
                        }


                    }

                    // Code for ZeroOrMore specified at:
                    // Python.javacc:406:64
                    while (true) {
                        if (!(scanΣPython_javaccΣ406Σ65())) break;
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:406:65
                        ConsumeToken(TokenType.COMMA);

                        // Code for NonTerminal specified at:
                        // Python.javacc:406:75
                        PushOntoCallStack("StarEtc", "Python.javacc", 406, 75);
                        if (OuterFollowSet != null) {
                            var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ406Σ75);
                            newFollowSet.UnionWith(OuterFollowSet);
                            OuterFollowSet = newFollowSet;
                        }
                        try {
                            ParseParamMaybeDefault();
                        }
                        finally {
                            PopCallStack();
                        }


                    }

                    // Code for ZeroOrOne specified at:
                    // Python.javacc:406:95
                    if ((NextTokenType == TokenType.COMMA)) {
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:406:96
                        ConsumeToken(TokenType.COMMA);

                        // Code for ZeroOrOne specified at:
                        // Python.javacc:406:100
                        if ((NextTokenType == TokenType.STAR_STAR)) {
                            // Code for NonTerminal specified at:
                            // Python.javacc:406:101
                            PushOntoCallStack("StarEtc", "Python.javacc", 406, 101);
                            try {
                                ParseKeyWords();
                            }
                            finally {
                                PopCallStack();
                            }


                        }


                    }


                }
                else {
                    PushOntoCallStack("StarEtc", "Python.javacc", 402, 4);
                    throw new ParseException(this, StarEtc_FIRST_SET);
                }
            }
            catch (ParseException e) {
                parseException2440 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize2441);
                if (StarEtc77 != null) {
                    if (parseException2440 == null) {
                        CloseNodeScope(StarEtc77, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseStarEtc

        private static readonly HashSet<TokenType> ParamMaybeDefault_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        
        // Python.javacc:409:1
        public void ParseParamMaybeDefault() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "ParamMaybeDefault";
     
            ParamMaybeDefault ParamMaybeDefault78 = null;
            if (BuildTree) {
                ParamMaybeDefault78 = new ParamMaybeDefault(tokenSource);
                OpenNodeScope(ParamMaybeDefault78);
            }

            ParseException parseException2542 = null;
            var callStackSize2543 = ParsingStack.Count;
            try {
                // Code for RegexpRef specified at:
                // Python.javacc:409:21
                ConsumeToken(TokenType.NAME);

                // Code for ZeroOrOne specified at:
                // Python.javacc:409:28
                if ((NextTokenType == TokenType.COLON)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:409:29
                    ConsumeToken(TokenType.COLON);

                    // Code for NonTerminal specified at:
                    // Python.javacc:409:33
                    PushOntoCallStack("ParamMaybeDefault", "Python.javacc", 409, 33);
                    if (OuterFollowSet != null) {
                        var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ409Σ33);
                        newFollowSet.UnionWith(OuterFollowSet);
                        OuterFollowSet = newFollowSet;
                    }
                    try {
                        ParseExpression();
                    }
                    finally {
                        PopCallStack();
                    }


                }

                // Code for ZeroOrOne specified at:
                // Python.javacc:409:45
                if ((NextTokenType == TokenType.ASSIGN)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:409:46
                    ConsumeToken(TokenType.ASSIGN);

                    // Code for NonTerminal specified at:
                    // Python.javacc:409:50
                    PushOntoCallStack("ParamMaybeDefault", "Python.javacc", 409, 50);
                    try {
                        ParseExpression();
                    }
                    finally {
                        PopCallStack();
                    }


                }

            }
            catch (ParseException e) {
                parseException2542 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize2543);
                if (ParamMaybeDefault78 != null) {
                    if (parseException2542 == null) {
                        CloseNodeScope(ParamMaybeDefault78, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseParamMaybeDefault

        private static readonly HashSet<TokenType> KeyWords_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.STAR_STAR
        );

        
        // Python.javacc:411:1
        public void ParseKeyWords() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "KeyWords";
     
            KeyWords KeyWords79 = null;
            if (BuildTree) {
                KeyWords79 = new KeyWords(tokenSource);
                OpenNodeScope(KeyWords79);
            }

            ParseException parseException2572 = null;
            var callStackSize2573 = ParsingStack.Count;
            try {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:412:4
                ConsumeToken(TokenType.STAR_STAR);

                // Code for RegexpRef specified at:
                // Python.javacc:412:9
                ConsumeToken(TokenType.NAME);

                // Code for ZeroOrOne specified at:
                // Python.javacc:413:4
                if (scanΣPython_javaccΣ414Σ8()) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:415:8
                    ConsumeToken(TokenType.COLON);

                    // Code for NonTerminal specified at:
                    // Python.javacc:415:12
                    PushOntoCallStack("KeyWords", "Python.javacc", 415, 12);
                    try {
                        ParseExpression();
                    }
                    finally {
                        PopCallStack();
                    }


                }

            }
            catch (ParseException e) {
                parseException2572 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize2573);
                if (KeyWords79 != null) {
                    if (parseException2572 == null) {
                        CloseNodeScope(KeyWords79, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseKeyWords

        private static readonly HashSet<TokenType> Parameters_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.STAR,
            TokenType.STAR_STAR,
            TokenType.NAME
        );

        
        // Python.javacc:419:1
        public void ParseParameters() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "Parameters";
     
            Parameters Parameters80 = null;
            if (BuildTree) {
                Parameters80 = new Parameters(tokenSource);
                OpenNodeScope(Parameters80);
            }
            bool seenDefault = false, seenSlash = false;

            ParseException parseException2593 = null;
            var callStackSize2594 = ParsingStack.Count;
            try {
                // Code for ZeroOrOne specified at:
                // Python.javacc:421:5
                if ((NextTokenType == TokenType.NAME)) {
                    // Code for RegexpRef specified at:
                    // Python.javacc:422:7
                    ConsumeToken(TokenType.NAME);

                    // Code for ZeroOrOne specified at:
                    // Python.javacc:425:7
                    if (scanΣPython_javaccΣ425Σ8()) {
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:425:38
                        ConsumeToken(TokenType.COLON);

                        // Code for NonTerminal specified at:
                        // Python.javacc:425:42
                        PushOntoCallStack("Parameters", "Python.javacc", 425, 42);
                        if (OuterFollowSet != null) {
                            var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ425Σ42);
                            newFollowSet.UnionWith(OuterFollowSet);
                            OuterFollowSet = newFollowSet;
                        }
                        try {
                            ParseExpression();
                        }
                        finally {
                            PopCallStack();
                        }


                    }

                    // Code for ZeroOrOne specified at:
                    // Python.javacc:426:7
                    if ((NextTokenType == TokenType.ASSIGN)) {
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:426:8
                        ConsumeToken(TokenType.ASSIGN);

                        // Code for NonTerminal specified at:
                        // Python.javacc:426:12
                        PushOntoCallStack("Parameters", "Python.javacc", 426, 12);
                        if (OuterFollowSet != null) {
                            var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ426Σ12);
                            newFollowSet.UnionWith(OuterFollowSet);
                            OuterFollowSet = newFollowSet;
                        }
                        try {
                            ParseExpression();
                        }
                        finally {
                            PopCallStack();
                        }

                        // Code for CodeBlock specified at:
                        // Python.javacc:426:23
                        seenDefault = true;



                    }

                    // Code for ZeroOrMore specified at:
                    // Python.javacc:427:7
                    while (true) {
                        if (!(scanΣPython_javaccΣ427Σ8())) break;
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:427:8
                        ConsumeToken(TokenType.COMMA);

                        if ((!seenSlash) && (NextTokenType == TokenType.SLASH)) {
                            // Code for RegexpStringLiteral specified at:
                            // Python.javacc:431:11
                            ConsumeToken(TokenType.SLASH);

                            // Code for CodeBlock specified at:
                            // Python.javacc:431:15
                            seenSlash = true;



                        }
                        else if ((NextTokenType == TokenType.NAME)) {
                            // Code for RegexpRef specified at:
                            // Python.javacc:433:11
                            ConsumeToken(TokenType.NAME);

                            // Code for ZeroOrOne specified at:
                            // Python.javacc:433:18
                            if (scanΣPython_javaccΣ433Σ19()) {
                                // Code for RegexpStringLiteral specified at:
                                // Python.javacc:433:49
                                ConsumeToken(TokenType.COLON);

                                // Code for NonTerminal specified at:
                                // Python.javacc:433:53
                                PushOntoCallStack("Parameters", "Python.javacc", 433, 53);
                                if (OuterFollowSet != null) {
                                    var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ433Σ53);
                                    newFollowSet.UnionWith(OuterFollowSet);
                                    OuterFollowSet = newFollowSet;
                                }
                                try {
                                    ParseExpression();
                                }
                                finally {
                                    PopCallStack();
                                }


                            }

                            // Code for ZeroOrOne specified at:
                            // Python.javacc:434:11
                            if ((seenDefault || (GetToken(1).Type == TokenType.ASSIGN)) && true) {
                                // Code for RegexpStringLiteral specified at:
                                // Python.javacc:438:17
                                ConsumeToken(TokenType.ASSIGN);

                                // Code for NonTerminal specified at:
                                // Python.javacc:438:21
                                PushOntoCallStack("Parameters", "Python.javacc", 438, 21);
                                if (OuterFollowSet != null) {
                                    var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ438Σ21);
                                    newFollowSet.UnionWith(OuterFollowSet);
                                    OuterFollowSet = newFollowSet;
                                }
                                try {
                                    ParseExpression();
                                }
                                finally {
                                    PopCallStack();
                                }

                                // Code for CodeBlock specified at:
                                // Python.javacc:438:32
                                seenDefault = true;



                            }


                        }
                        else {
                            PushOntoCallStack("Parameters", "Python.javacc", 430, 11);
                            throw new ParseException(this, first_setΣPython_javaccΣ430Σ11);
                        }


                    }

                    // Code for ZeroOrOne specified at:
                    // Python.javacc:442:7
                    if ((NextTokenType == TokenType.COMMA)) {
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:442:9
                        ConsumeToken(TokenType.COMMA);


                    }


                }

                // Code for ZeroOrOne specified at:
                // Python.javacc:444:5
                if (scanΣPython_javaccΣ445Σ7()) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:445:26
                    PushOntoCallStack("Parameters", "Python.javacc", 445, 26);
                    if (OuterFollowSet != null) {
                        var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ445Σ26);
                        newFollowSet.UnionWith(OuterFollowSet);
                        OuterFollowSet = newFollowSet;
                    }
                    try {
                        ParseStarEtc();
                    }
                    finally {
                        PopCallStack();
                    }


                }

                // Code for ZeroOrOne specified at:
                // Python.javacc:447:5
                if ((NextTokenType == TokenType.COMMA)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:447:6
                    ConsumeToken(TokenType.COMMA);


                }

            }
            catch (ParseException e) {
                parseException2593 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize2594);
                if (Parameters80 != null) {
                    if (parseException2593 == null) {
                        CloseNodeScope(Parameters80, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseParameters

        private static readonly HashSet<TokenType> AugAssign_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.MINUSASSIGN,
            TokenType.PLUSASSIGN,
            TokenType.STARASSIGN,
            TokenType.ATASSIGN,
            TokenType.SLASHASSIGN,
            TokenType.REMASSIGN,
            TokenType.ANDASSIGN,
            TokenType.ORASSIGN,
            TokenType.XORASSIGN,
            TokenType.LSHIFTASSIGN,
            TokenType.RSHIFTASSIGN,
            TokenType.STARSTARASSIGN,
            TokenType.SLASHSLASHASSIGN
        );

        
        // Python.javacc:450:1
        public void ParseAugAssign() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "AugAssign";
            // Code for ExpansionChoice specified at:
            // Python.javacc:451:5
            if ((NextTokenType == TokenType.PLUSASSIGN)) {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:451:5
                ConsumeToken(TokenType.PLUSASSIGN);


            }
            else if ((NextTokenType == TokenType.MINUSASSIGN)) {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:451:12
                ConsumeToken(TokenType.MINUSASSIGN);


            }
            else if ((NextTokenType == TokenType.STARASSIGN)) {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:451:19
                ConsumeToken(TokenType.STARASSIGN);


            }
            else if ((NextTokenType == TokenType.ATASSIGN)) {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:451:26
                ConsumeToken(TokenType.ATASSIGN);


            }
            else if ((NextTokenType == TokenType.SLASHASSIGN)) {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:451:33
                ConsumeToken(TokenType.SLASHASSIGN);


            }
            else if ((NextTokenType == TokenType.REMASSIGN)) {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:451:40
                ConsumeToken(TokenType.REMASSIGN);


            }
            else if ((NextTokenType == TokenType.ANDASSIGN)) {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:451:47
                ConsumeToken(TokenType.ANDASSIGN);


            }
            else if ((NextTokenType == TokenType.ORASSIGN)) {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:451:54
                ConsumeToken(TokenType.ORASSIGN);


            }
            else if ((NextTokenType == TokenType.XORASSIGN)) {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:451:61
                ConsumeToken(TokenType.XORASSIGN);


            }
            else if ((NextTokenType == TokenType.LSHIFTASSIGN)) {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:451:68
                ConsumeToken(TokenType.LSHIFTASSIGN);


            }
            else if ((NextTokenType == TokenType.RSHIFTASSIGN)) {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:452:7
                ConsumeToken(TokenType.RSHIFTASSIGN);


            }
            else if ((NextTokenType == TokenType.STARSTARASSIGN)) {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:452:15
                ConsumeToken(TokenType.STARSTARASSIGN);


            }
            else if ((NextTokenType == TokenType.SLASHSLASHASSIGN)) {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:452:23
                ConsumeToken(TokenType.SLASHSLASHASSIGN);


            }
            else {
                PushOntoCallStack("AugAssign", "Python.javacc", 451, 5);
                throw new ParseException(this, AugAssign_FIRST_SET);
            }

        }
        // end of ParseAugAssign

        private static readonly HashSet<TokenType> SimpleAssignTarget_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:455:1
        public void ParseSimpleAssignTarget() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "SimpleAssignTarget";
            // Code for ExpansionChoice specified at:
            // Python.javacc:456:4
     
            SimpleAssignTarget SimpleAssignTarget81 = null;
            if (BuildTree) {
                SimpleAssignTarget81 = new SimpleAssignTarget(tokenSource);
                OpenNodeScope(SimpleAssignTarget81);
            }

            ParseException parseException2795 = null;
            var callStackSize2796 = ParsingStack.Count;
            try {
                if ((first_setΣPython_javaccΣ456Σ4.Contains(NextTokenType))) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:456:4
                    PushOntoCallStack("SimpleAssignTarget", "Python.javacc", 456, 4);
                    try {
                        ParsePrimaryExpression();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if ((NextTokenType == TokenType.LPAREN)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:458:4
                    ConsumeToken(TokenType.LPAREN);

                    // Code for NonTerminal specified at:
                    // Python.javacc:458:8
                    PushOntoCallStack("SimpleAssignTarget", "Python.javacc", 458, 8);
                    OuterFollowSet = follow_setΣPython_javaccΣ458Σ8;
                    try {
                        ParseSimpleAssignTarget();
                    }
                    finally {
                        PopCallStack();
                    }

                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:458:27
                    ConsumeToken(TokenType.RPAREN);


                }
                else {
                    PushOntoCallStack("SimpleAssignTarget", "Python.javacc", 456, 4);
                    throw new ParseException(this, SimpleAssignTarget_FIRST_SET);
                }
            }
            catch (ParseException e) {
                parseException2795 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize2796);
                if (SimpleAssignTarget81 != null) {
                    if (parseException2795 == null) {
                        CloseNodeScope(SimpleAssignTarget81, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseSimpleAssignTarget

        private static readonly HashSet<TokenType> Assignment_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:461:1
        public void ParseAssignment() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "Assignment";
     
            Assignment Assignment82 = null;
            if (BuildTree) {
                Assignment82 = new Assignment(tokenSource);
                OpenNodeScope(Assignment82);
            }

            ParseException parseException2816 = null;
            var callStackSize2817 = ParsingStack.Count;
            try {
                if (scanΣPython_javaccΣ464Σ3()) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:464:3
                    PushOntoCallStack("Assignment", "Python.javacc", 464, 3);
                    OuterFollowSet = follow_setΣPython_javaccΣ464Σ3;
                    try {
                        ParseSimpleAssignTarget();
                    }
                    finally {
                        PopCallStack();
                    }

                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:464:22
                    ConsumeToken(TokenType.COLON);

                    // Code for NonTerminal specified at:
                    // Python.javacc:464:31
                    PushOntoCallStack("Assignment", "Python.javacc", 464, 31);
                    if (OuterFollowSet != null) {
                        var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ464Σ31);
                        newFollowSet.UnionWith(OuterFollowSet);
                        OuterFollowSet = newFollowSet;
                    }
                    try {
                        ParseExpression();
                    }
                    finally {
                        PopCallStack();
                    }

                    // Code for ZeroOrOne specified at:
                    // Python.javacc:464:42
                    if ((NextTokenType == TokenType.ASSIGN)) {
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:464:43
                        ConsumeToken(TokenType.ASSIGN);

                        // Code for NonTerminal specified at:
                        // Python.javacc:464:47
                        PushOntoCallStack("Assignment", "Python.javacc", 464, 47);
                        try {
                            ParseAnnotatedRhs();
                        }
                        finally {
                            PopCallStack();
                        }


                    }


                }
                else if (scanΣPython_javaccΣ466Σ3()) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:466:3
                    PushOntoCallStack("Assignment", "Python.javacc", 466, 3);
                    OuterFollowSet = follow_setΣPython_javaccΣ466Σ3;
                    try {
                        ParseSimpleAssignTarget();
                    }
                    finally {
                        PopCallStack();
                    }

                    // Code for NonTerminal specified at:
                    // Python.javacc:466:22
                    PushOntoCallStack("Assignment", "Python.javacc", 466, 22);
                    OuterFollowSet = follow_setΣPython_javaccΣ466Σ22;
                    try {
                        ParseAugAssign();
                    }
                    finally {
                        PopCallStack();
                    }

                    if ((NextTokenType == TokenType.YIELD)) {
                        // Code for NonTerminal specified at:
                        // Python.javacc:466:38
                        PushOntoCallStack("Assignment", "Python.javacc", 466, 38);
                        try {
                            ParseYieldExpression();
                        }
                        finally {
                            PopCallStack();
                        }


                    }
                    else if ((first_setΣPython_javaccΣ466Σ56.Contains(NextTokenType))) {
                        // Code for NonTerminal specified at:
                        // Python.javacc:466:56
                        PushOntoCallStack("Assignment", "Python.javacc", 466, 56);
                        try {
                            ParseStarExpressions();
                        }
                        finally {
                            PopCallStack();
                        }


                    }
                    else {
                        PushOntoCallStack("Assignment", "Python.javacc", 466, 38);
                        throw new ParseException(this, first_setΣPython_javaccΣ466Σ38);
                    }


                }
                else if (scanΣPython_javaccΣ468Σ3()) {
                    // Code for OneOrMore specified at:
                    // Python.javacc:468:3
                    while (true) {
                        // Code for NonTerminal specified at:
                        // Python.javacc:468:6
                        PushOntoCallStack("Assignment", "Python.javacc", 468, 6);
                        OuterFollowSet = follow_setΣPython_javaccΣ468Σ6;
                        try {
                            ParseStarTargets();
                        }
                        finally {
                            PopCallStack();
                        }

                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:468:18
                        ConsumeToken(TokenType.ASSIGN);



                        if (!(scanΣPython_javaccΣ468Σ4())) break;
                    }

                    if ((NextTokenType == TokenType.YIELD)) {
                        // Code for NonTerminal specified at:
                        // Python.javacc:468:30
                        PushOntoCallStack("Assignment", "Python.javacc", 468, 30);
                        try {
                            ParseYieldExpression();
                        }
                        finally {
                            PopCallStack();
                        }


                    }
                    else if ((first_setΣPython_javaccΣ468Σ48.Contains(NextTokenType))) {
                        // Code for NonTerminal specified at:
                        // Python.javacc:468:48
                        PushOntoCallStack("Assignment", "Python.javacc", 468, 48);
                        try {
                            ParseStarExpressions();
                        }
                        finally {
                            PopCallStack();
                        }


                    }
                    else {
                        PushOntoCallStack("Assignment", "Python.javacc", 468, 30);
                        throw new ParseException(this, first_setΣPython_javaccΣ468Σ30);
                    }


                }
                else {
                    PushOntoCallStack("Assignment", "Python.javacc", 464, 3);
                    throw new ParseException(this, first_setΣPython_javaccΣ464Σ3Σ);
                }

            }
            catch (ParseException e) {
                parseException2816 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize2817);
                if (Assignment82 != null) {
                    if (parseException2816 == null) {
                        CloseNodeScope(Assignment82, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseAssignment

        private static readonly HashSet<TokenType> MatchStatement_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.MATCH
        );

        
        // Python.javacc:475:1
        public void ParseMatchStatement() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "MatchStatement";
     
            MatchStatement MatchStatement83 = null;
            if (BuildTree) {
                MatchStatement83 = new MatchStatement(tokenSource);
                OpenNodeScope(MatchStatement83);
            }

            ParseException parseException2903 = null;
            var callStackSize2904 = ParsingStack.Count;
            try {
                var previousActives2906 = new SetAdapter<TokenType>(tokenSource.ActiveTokenTypes);
                var somethingChanged2907 = ActivateTokenTypes(
                    TokenType.MATCH
                );
                try {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:476:27
                    ConsumeToken(TokenType.MATCH);

                }
                finally {
                    tokenSource.ActiveTokenTypes = previousActives2906;
                    if (somethingChanged2907) {
                        tokenSource.Reset(GetToken(0));
                        _nextTokenType = null;
                    }
                }

                // Code for NonTerminal specified at:
                // Python.javacc:477:4
                PushOntoCallStack("MatchStatement", "Python.javacc", 477, 4);
                OuterFollowSet = follow_setΣPython_javaccΣ477Σ4;
                try {
                    ParseSubjectExpression();
                }
                finally {
                    PopCallStack();
                }

                // Code for RegexpStringLiteral specified at:
                // Python.javacc:478:4
                ConsumeToken(TokenType.COLON);

                // Code for RegexpRef specified at:
                // Python.javacc:480:4
                ConsumeToken(TokenType.NEWLINE);

                // Code for RegexpRef specified at:
                // Python.javacc:481:4
                ConsumeToken(TokenType.INDENT);

                // Code for OneOrMore specified at:
                // Python.javacc:482:25
                var previousActives2927 = new SetAdapter<TokenType>(tokenSource.ActiveTokenTypes);
                var somethingChanged2928 = ActivateTokenTypes(
                    TokenType.CASE
                );
                try {
                    while (true) {
                        // Code for NonTerminal specified at:
                        // Python.javacc:482:26
                        PushOntoCallStack("MatchStatement", "Python.javacc", 482, 26);
                        OuterFollowSet = follow_setΣPython_javaccΣ482Σ26;
                        try {
                            ParseCaseBlock();
                        }
                        finally {
                            PopCallStack();
                        }



                        if (!((NextTokenType == TokenType.CASE))) break;
                    }
                }
                finally {
                    tokenSource.ActiveTokenTypes = previousActives2927;
                    if (somethingChanged2928) {
                        tokenSource.Reset(GetToken(0));
                        _nextTokenType = null;
                    }
                }

                // Code for RegexpRef specified at:
                // Python.javacc:483:4
                ConsumeToken(TokenType.DEDENT);

            }
            catch (ParseException e) {
                parseException2903 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize2904);
                if (MatchStatement83 != null) {
                    if (parseException2903 == null) {
                        CloseNodeScope(MatchStatement83, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseMatchStatement

        private static readonly HashSet<TokenType> CaseBlock_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.CASE
        );

        
        // Python.javacc:486:1
        public void ParseCaseBlock() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "CaseBlock";
     
            CaseBlock CaseBlock84 = null;
            if (BuildTree) {
                CaseBlock84 = new CaseBlock(tokenSource);
                OpenNodeScope(CaseBlock84);
            }

            ParseException parseException2941 = null;
            var callStackSize2942 = ParsingStack.Count;
            try {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:487:5
                ConsumeToken(TokenType.CASE);

                var previousActives2947 = new SetAdapter<TokenType>(tokenSource.ActiveTokenTypes);
                var somethingChanged2948 = DeactivateTokenTypes(
                    TokenType.CASE
                );
                try {
                    // Code for NonTerminal specified at:
                    // Python.javacc:490:7
                    PushOntoCallStack("CaseBlock", "Python.javacc", 490, 7);
                    OuterFollowSet = follow_setΣPython_javaccΣ490Σ7;
                    try {
                        ParsePatterns();
                    }
                    finally {
                        PopCallStack();
                    }

                    // Code for ZeroOrOne specified at:
                    // Python.javacc:491:7
                    if ((NextTokenType == TokenType.IF)) {
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:491:8
                        ConsumeToken(TokenType.IF);

                        // Code for NonTerminal specified at:
                        // Python.javacc:491:13
                        PushOntoCallStack("CaseBlock", "Python.javacc", 491, 13);
                        OuterFollowSet = follow_setΣPython_javaccΣ491Σ13;
                        try {
                            ParseNamedExpression();
                        }
                        finally {
                            PopCallStack();
                        }


                    }

                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:492:7
                    ConsumeToken(TokenType.COLON);

                    // Code for NonTerminal specified at:
                    // Python.javacc:493:7
                    PushOntoCallStack("CaseBlock", "Python.javacc", 493, 7);
                    try {
                        ParseBlock();
                    }
                    finally {
                        PopCallStack();
                    }

                }
                finally {
                    tokenSource.ActiveTokenTypes = previousActives2947;
                    if (somethingChanged2948) {
                        tokenSource.Reset(GetToken(0));
                        _nextTokenType = null;
                    }
                }

            }
            catch (ParseException e) {
                parseException2941 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize2942);
                if (CaseBlock84 != null) {
                    if (parseException2941 == null) {
                        CloseNodeScope(CaseBlock84, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseCaseBlock

        private static readonly HashSet<TokenType> Patterns_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:498:1
        public void ParsePatterns() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "Patterns";
            // Code for ExpansionChoice specified at:
            // Python.javacc:499:4
     
            Patterns Patterns85 = null;
            if (BuildTree) {
                Patterns85 = new Patterns(tokenSource);
                OpenNodeScope(Patterns85);
            }

            ParseException parseException2974 = null;
            var callStackSize2975 = ParsingStack.Count;
            try {
                if (scanΣPython_javaccΣ499Σ4()) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:499:4
                    PushOntoCallStack("Patterns", "Python.javacc", 499, 4);
                    try {
                        ParseOpenSequencePattern();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if ((first_setΣPython_javaccΣ501Σ4.Contains(NextTokenType))) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:501:4
                    PushOntoCallStack("Patterns", "Python.javacc", 501, 4);
                    try {
                        ParsePattern();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else {
                    PushOntoCallStack("Patterns", "Python.javacc", 499, 4);
                    throw new ParseException(this, Patterns_FIRST_SET);
                }
            }
            catch (ParseException e) {
                parseException2974 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize2975);
                if (Patterns85 != null) {
                    if (parseException2974 == null) {
                        CloseNodeScope(Patterns85, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParsePatterns

        private static readonly HashSet<TokenType> StarPattern_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.STAR
        );

        
        // Python.javacc:504:1
        public void ParseStarPattern() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "StarPattern";
     
            StarPattern StarPattern86 = null;
            if (BuildTree) {
                StarPattern86 = new StarPattern(tokenSource);
                OpenNodeScope(StarPattern86);
            }

            ParseException parseException2989 = null;
            var callStackSize2990 = ParsingStack.Count;
            try {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:505:4
                ConsumeToken(TokenType.STAR);

                // Code for RegexpRef specified at:
                // Python.javacc:505:8
                ConsumeToken(TokenType.NAME);

            }
            catch (ParseException e) {
                parseException2989 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize2990);
                if (StarPattern86 != null) {
                    if (parseException2989 == null) {
                        CloseNodeScope(StarPattern86, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseStarPattern

        private static readonly HashSet<TokenType> MaybeStarPattern_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:508:1
        public void ParseMaybeStarPattern() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "MaybeStarPattern";
            // Code for ExpansionChoice specified at:
            // Python.javacc:508:25
            if ((NextTokenType == TokenType.STAR)) {
                // Code for NonTerminal specified at:
                // Python.javacc:508:25
                PushOntoCallStack("MaybeStarPattern", "Python.javacc", 508, 25);
                try {
                    ParseStarPattern();
                }
                finally {
                    PopCallStack();
                }


            }
            else if ((first_setΣPython_javaccΣ508Σ39.Contains(NextTokenType))) {
                // Code for NonTerminal specified at:
                // Python.javacc:508:39
                PushOntoCallStack("MaybeStarPattern", "Python.javacc", 508, 39);
                try {
                    ParsePattern();
                }
                finally {
                    PopCallStack();
                }


            }
            else {
                PushOntoCallStack("MaybeStarPattern", "Python.javacc", 508, 25);
                throw new ParseException(this, MaybeStarPattern_FIRST_SET);
            }

        }
        // end of ParseMaybeStarPattern

        private static readonly HashSet<TokenType> ClosedPattern_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:510:1
        public void ParseClosedPattern() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "ClosedPattern";
            // Code for ExpansionChoice specified at:
            // Python.javacc:511:4
     
            ClosedPattern ClosedPattern87 = null;
            if (BuildTree) {
                ClosedPattern87 = new ClosedPattern(tokenSource);
                OpenNodeScope(ClosedPattern87);
            }

            ParseException parseException3013 = null;
            var callStackSize3014 = ParsingStack.Count;
            try {
                if (scanΣPython_javaccΣ511Σ4()) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:511:4
                    PushOntoCallStack("ClosedPattern", "Python.javacc", 511, 4);
                    try {
                        ParseClassPattern();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if ((first_setΣPython_javaccΣ513Σ4.Contains(NextTokenType))) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:513:4
                    PushOntoCallStack("ClosedPattern", "Python.javacc", 513, 4);
                    try {
                        ParseLiteralPattern();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if ((NextTokenType == TokenType.NAME)) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:515:4
                    PushOntoCallStack("ClosedPattern", "Python.javacc", 515, 4);
                    try {
                        ParseNameOrAttribute();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if (scanΣPython_javaccΣ517Σ4()) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:517:6
                    PushOntoCallStack("ClosedPattern", "Python.javacc", 517, 6);
                    try {
                        ParseGroupPattern();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if ((NextTokenType == TokenType.LBRACKET) || (NextTokenType == TokenType.LPAREN)) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:519:4
                    PushOntoCallStack("ClosedPattern", "Python.javacc", 519, 4);
                    try {
                        ParseSequencePattern();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if ((NextTokenType == TokenType.LBRACE)) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:521:4
                    PushOntoCallStack("ClosedPattern", "Python.javacc", 521, 4);
                    try {
                        ParseMappingPattern();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else {
                    PushOntoCallStack("ClosedPattern", "Python.javacc", 511, 4);
                    throw new ParseException(this, ClosedPattern_FIRST_SET);
                }
            }
            catch (ParseException e) {
                parseException3013 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize3014);
                if (ClosedPattern87 != null) {
                    if (parseException3013 == null) {
                        CloseNodeScope(ClosedPattern87, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseClosedPattern

        private static readonly HashSet<TokenType> GroupPattern_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LPAREN
        );

        
        // Python.javacc:524:1
        public void ParseGroupPattern() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "GroupPattern";
     
            GroupPattern GroupPattern88 = null;
            if (BuildTree) {
                GroupPattern88 = new GroupPattern(tokenSource);
                OpenNodeScope(GroupPattern88);
            }

            ParseException parseException3052 = null;
            var callStackSize3053 = ParsingStack.Count;
            try {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:524:16
                ConsumeToken(TokenType.LPAREN);

                // Code for NonTerminal specified at:
                // Python.javacc:524:20
                PushOntoCallStack("GroupPattern", "Python.javacc", 524, 20);
                OuterFollowSet = follow_setΣPython_javaccΣ524Σ20;
                try {
                    ParsePattern();
                }
                finally {
                    PopCallStack();
                }

                // Code for RegexpStringLiteral specified at:
                // Python.javacc:524:28
                ConsumeToken(TokenType.RPAREN);

            }
            catch (ParseException e) {
                parseException3052 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize3053);
                if (GroupPattern88 != null) {
                    if (parseException3052 == null) {
                        CloseNodeScope(GroupPattern88, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseGroupPattern

        private static readonly HashSet<TokenType> KeyValuePattern_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:526:1
        public void ParseKeyValuePattern() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "KeyValuePattern";
     
            KeyValuePattern KeyValuePattern89 = null;
            if (BuildTree) {
                KeyValuePattern89 = new KeyValuePattern(tokenSource);
                OpenNodeScope(KeyValuePattern89);
            }

            ParseException parseException3064 = null;
            var callStackSize3065 = ParsingStack.Count;
            try {
                if ((first_setΣPython_javaccΣ526Σ19.Contains(NextTokenType))) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:526:19
                    PushOntoCallStack("KeyValuePattern", "Python.javacc", 526, 19);
                    OuterFollowSet = follow_setΣPython_javaccΣ526Σ19Σ;
                    try {
                        ParseLiteralPattern();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if ((NextTokenType == TokenType.NAME)) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:526:36
                    PushOntoCallStack("KeyValuePattern", "Python.javacc", 526, 36);
                    OuterFollowSet = follow_setΣPython_javaccΣ526Σ36;
                    try {
                        ParseAttribute();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else {
                    PushOntoCallStack("KeyValuePattern", "Python.javacc", 526, 19);
                    throw new ParseException(this, first_setΣPython_javaccΣ526Σ19ΣΣ);
                }

                // Code for RegexpStringLiteral specified at:
                // Python.javacc:526:47
                ConsumeToken(TokenType.COLON);

                // Code for NonTerminal specified at:
                // Python.javacc:526:51
                PushOntoCallStack("KeyValuePattern", "Python.javacc", 526, 51);
                try {
                    ParsePattern();
                }
                finally {
                    PopCallStack();
                }

            }
            catch (ParseException e) {
                parseException3064 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize3065);
                if (KeyValuePattern89 != null) {
                    if (parseException3064 == null) {
                        CloseNodeScope(KeyValuePattern89, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseKeyValuePattern

        private static readonly HashSet<TokenType> ItemsPattern_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:528:1
        public void ParseItemsPattern() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "ItemsPattern";
     
            ItemsPattern ItemsPattern90 = null;
            if (BuildTree) {
                ItemsPattern90 = new ItemsPattern(tokenSource);
                OpenNodeScope(ItemsPattern90);
            }

            ParseException parseException3089 = null;
            var callStackSize3090 = ParsingStack.Count;
            try {
                // Code for NonTerminal specified at:
                // Python.javacc:528:16
                PushOntoCallStack("ItemsPattern", "Python.javacc", 528, 16);
                if (OuterFollowSet != null) {
                    var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ528Σ16);
                    newFollowSet.UnionWith(OuterFollowSet);
                    OuterFollowSet = newFollowSet;
                }
                try {
                    ParseKeyValuePattern();
                }
                finally {
                    PopCallStack();
                }

                // Code for ZeroOrMore specified at:
                // Python.javacc:528:32
                while (true) {
                    if (!(scanΣPython_javaccΣ528Σ33())) break;
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:528:33
                    ConsumeToken(TokenType.COMMA);

                    // Code for NonTerminal specified at:
                    // Python.javacc:528:43
                    PushOntoCallStack("ItemsPattern", "Python.javacc", 528, 43);
                    if (OuterFollowSet != null) {
                        var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ528Σ43);
                        newFollowSet.UnionWith(OuterFollowSet);
                        OuterFollowSet = newFollowSet;
                    }
                    try {
                        ParseKeyValuePattern();
                    }
                    finally {
                        PopCallStack();
                    }


                }

            }
            catch (ParseException e) {
                parseException3089 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize3090);
                if (ItemsPattern90 != null) {
                    if (parseException3089 == null) {
                        CloseNodeScope(ItemsPattern90, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseItemsPattern

        private static readonly HashSet<TokenType> MappingPattern_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE
        );

        
        // Python.javacc:530:1
        public void ParseMappingPattern() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "MappingPattern";
     
            MappingPattern MappingPattern91 = null;
            if (BuildTree) {
                MappingPattern91 = new MappingPattern(tokenSource);
                OpenNodeScope(MappingPattern91);
            }

            ParseException parseException3107 = null;
            var callStackSize3108 = ParsingStack.Count;
            try {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:531:3
                ConsumeToken(TokenType.LBRACE);

                // Code for ZeroOrOne specified at:
                // Python.javacc:532:6
                // Code for ExpansionChoice specified at:
                // Python.javacc:533:10
                if ((first_setΣPython_javaccΣ533Σ10.Contains(NextTokenType))) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:533:10
                    PushOntoCallStack("MappingPattern", "Python.javacc", 533, 10);
                    OuterFollowSet = follow_setΣPython_javaccΣ533Σ10Σ;
                    try {
                        ParseItemsPattern();
                    }
                    finally {
                        PopCallStack();
                    }

                    // Code for ZeroOrOne specified at:
                    // Python.javacc:533:23
                    if (scanΣPython_javaccΣ533Σ24()) {
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:533:24
                        ConsumeToken(TokenType.COMMA);

                        // Code for NonTerminal specified at:
                        // Python.javacc:533:34
                        PushOntoCallStack("MappingPattern", "Python.javacc", 533, 34);
                        OuterFollowSet = follow_setΣPython_javaccΣ533Σ34;
                        try {
                            ParseDoubleStarPattern();
                        }
                        finally {
                            PopCallStack();
                        }


                    }

                    // Code for ZeroOrOne specified at:
                    // Python.javacc:533:53
                    if ((NextTokenType == TokenType.COMMA)) {
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:533:54
                        ConsumeToken(TokenType.COMMA);


                    }


                }
                else if ((NextTokenType == TokenType.STAR_STAR)) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:535:10
                    PushOntoCallStack("MappingPattern", "Python.javacc", 535, 10);
                    OuterFollowSet = follow_setΣPython_javaccΣ535Σ10;
                    try {
                        ParseDoubleStarPattern();
                    }
                    finally {
                        PopCallStack();
                    }

                    // Code for ZeroOrOne specified at:
                    // Python.javacc:535:28
                    if ((NextTokenType == TokenType.COMMA)) {
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:535:29
                        ConsumeToken(TokenType.COMMA);


                    }


                }


                // Code for RegexpStringLiteral specified at:
                // Python.javacc:537:3
                ConsumeToken(TokenType.RBRACE);

            }
            catch (ParseException e) {
                parseException3107 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize3108);
                if (MappingPattern91 != null) {
                    if (parseException3107 == null) {
                        CloseNodeScope(MappingPattern91, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseMappingPattern

        private static readonly HashSet<TokenType> DoubleStarPattern_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.STAR_STAR
        );

        
        // Python.javacc:540:1
        public void ParseDoubleStarPattern() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "DoubleStarPattern";
     
            DoubleStarPattern DoubleStarPattern92 = null;
            if (BuildTree) {
                DoubleStarPattern92 = new DoubleStarPattern(tokenSource);
                OpenNodeScope(DoubleStarPattern92);
            }

            ParseException parseException3164 = null;
            var callStackSize3165 = ParsingStack.Count;
            try {
                // Code for RegexpStringLiteral specified at:
                // Python.javacc:540:21
                ConsumeToken(TokenType.STAR_STAR);

                // Code for RegexpRef specified at:
                // Python.javacc:540:26
                ConsumeToken(TokenType.NAME);

            }
            catch (ParseException e) {
                parseException3164 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize3165);
                if (DoubleStarPattern92 != null) {
                    if (parseException3164 == null) {
                        CloseNodeScope(DoubleStarPattern92, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseDoubleStarPattern

        private static readonly HashSet<TokenType> LiteralPattern_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL
        );

        
        // Python.javacc:542:1
        public void ParseLiteralPattern() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "LiteralPattern";
            // Code for ExpansionChoice specified at:
            // Python.javacc:543:4
     
            LiteralPattern LiteralPattern93 = null;
            if (BuildTree) {
                LiteralPattern93 = new LiteralPattern(tokenSource);
                OpenNodeScope(LiteralPattern93);
            }

            ParseException parseException3173 = null;
            var callStackSize3174 = ParsingStack.Count;
            try {
                if ((NextTokenType == TokenType.NONE)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:543:4
                    ConsumeToken(TokenType.NONE);


                }
                else if ((NextTokenType == TokenType.TRUE)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:545:4
                    ConsumeToken(TokenType.TRUE);


                }
                else if ((NextTokenType == TokenType.FALSE)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:547:4
                    ConsumeToken(TokenType.FALSE);


                }
                else if ((first_setΣPython_javaccΣ549Σ4.Contains(NextTokenType))) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:549:4
                    PushOntoCallStack("LiteralPattern", "Python.javacc", 549, 4);
                    try {
                        ParseSignedNumber();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else if ((NextTokenType == TokenType.STRING_LITERAL)) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:551:4
                    PushOntoCallStack("LiteralPattern", "Python.javacc", 551, 4);
                    try {
                        ParseStrings();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else {
                    PushOntoCallStack("LiteralPattern", "Python.javacc", 543, 4);
                    throw new ParseException(this, LiteralPattern_FIRST_SET);
                }
            }
            catch (ParseException e) {
                parseException3173 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize3174);
                if (LiteralPattern93 != null) {
                    if (parseException3173 == null) {
                        CloseNodeScope(LiteralPattern93, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseLiteralPattern

        private static readonly HashSet<TokenType> MaybeSequencePattern_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:554:1
        public void ParseMaybeSequencePattern() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "MaybeSequencePattern";
     
            MaybeSequencePattern MaybeSequencePattern94 = null;
            if (BuildTree) {
                MaybeSequencePattern94 = new MaybeSequencePattern(tokenSource);
                OpenNodeScope(MaybeSequencePattern94);
            }

            ParseException parseException3206 = null;
            var callStackSize3207 = ParsingStack.Count;
            try {
                // Code for NonTerminal specified at:
                // Python.javacc:555:4
                PushOntoCallStack("MaybeSequencePattern", "Python.javacc", 555, 4);
                if (OuterFollowSet != null) {
                    var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ555Σ4);
                    newFollowSet.UnionWith(OuterFollowSet);
                    OuterFollowSet = newFollowSet;
                }
                try {
                    ParseMaybeStarPattern();
                }
                finally {
                    PopCallStack();
                }

                // Code for ZeroOrMore specified at:
                // Python.javacc:555:21
                while (true) {
                    if (!(scanΣPython_javaccΣ555Σ22())) break;
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:555:22
                    ConsumeToken(TokenType.COMMA);

                    // Code for NonTerminal specified at:
                    // Python.javacc:555:32
                    PushOntoCallStack("MaybeSequencePattern", "Python.javacc", 555, 32);
                    if (OuterFollowSet != null) {
                        var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ555Σ32);
                        newFollowSet.UnionWith(OuterFollowSet);
                        OuterFollowSet = newFollowSet;
                    }
                    try {
                        ParseMaybeStarPattern();
                    }
                    finally {
                        PopCallStack();
                    }


                }

                // Code for ZeroOrOne specified at:
                // Python.javacc:555:51
                if ((NextTokenType == TokenType.COMMA)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:555:52
                    ConsumeToken(TokenType.COMMA);


                }

            }
            catch (ParseException e) {
                parseException3206 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize3207);
                if (MaybeSequencePattern94 != null) {
                    if (parseException3206 == null) {
                        CloseNodeScope(MaybeSequencePattern94, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseMaybeSequencePattern

        private static readonly HashSet<TokenType> OpenSequencePattern_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:558:1
        public void ParseOpenSequencePattern() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "OpenSequencePattern";
     
            OpenSequencePattern OpenSequencePattern95 = null;
            if (BuildTree) {
                OpenSequencePattern95 = new OpenSequencePattern(tokenSource);
                OpenNodeScope(OpenSequencePattern95);
            }

            ParseException parseException3233 = null;
            var callStackSize3234 = ParsingStack.Count;
            try {
                // Code for NonTerminal specified at:
                // Python.javacc:559:4
                PushOntoCallStack("OpenSequencePattern", "Python.javacc", 559, 4);
                OuterFollowSet = follow_setΣPython_javaccΣ559Σ4;
                try {
                    ParseMaybeStarPattern();
                }
                finally {
                    PopCallStack();
                }

                // Code for RegexpStringLiteral specified at:
                // Python.javacc:559:21
                ConsumeToken(TokenType.COMMA);

                // Code for ZeroOrOne specified at:
                // Python.javacc:559:30
                if ((first_setΣPython_javaccΣ559Σ31.Contains(NextTokenType))) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:559:31
                    PushOntoCallStack("OpenSequencePattern", "Python.javacc", 559, 31);
                    try {
                        ParseMaybeSequencePattern();
                    }
                    finally {
                        PopCallStack();
                    }


                }

            }
            catch (ParseException e) {
                parseException3233 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize3234);
                if (OpenSequencePattern95 != null) {
                    if (parseException3233 == null) {
                        CloseNodeScope(OpenSequencePattern95, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseOpenSequencePattern

        private static readonly HashSet<TokenType> SequencePattern_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACKET,
            TokenType.LPAREN
        );

        
        // Python.javacc:562:1
        public void ParseSequencePattern() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "SequencePattern";
            // Code for ExpansionChoice specified at:
            // Python.javacc:563:5
     
            SequencePattern SequencePattern96 = null;
            if (BuildTree) {
                SequencePattern96 = new SequencePattern(tokenSource);
                OpenNodeScope(SequencePattern96);
            }

            ParseException parseException3251 = null;
            var callStackSize3252 = ParsingStack.Count;
            try {
                if ((NextTokenType == TokenType.LBRACKET)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:563:5
                    ConsumeToken(TokenType.LBRACKET);

                    // Code for ZeroOrOne specified at:
                    // Python.javacc:563:9
                    if ((first_setΣPython_javaccΣ563Σ10.Contains(NextTokenType))) {
                        // Code for NonTerminal specified at:
                        // Python.javacc:563:10
                        PushOntoCallStack("SequencePattern", "Python.javacc", 563, 10);
                        OuterFollowSet = follow_setΣPython_javaccΣ563Σ10Σ;
                        try {
                            ParseMaybeSequencePattern();
                        }
                        finally {
                            PopCallStack();
                        }


                    }

                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:563:32
                    ConsumeToken(TokenType.RBRACKET);


                }
                else if ((NextTokenType == TokenType.LPAREN)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:565:5
                    ConsumeToken(TokenType.LPAREN);

                    // Code for ZeroOrOne specified at:
                    // Python.javacc:565:9
                    if (scanΣPython_javaccΣ565Σ10()) {
                        // Code for NonTerminal specified at:
                        // Python.javacc:565:10
                        PushOntoCallStack("SequencePattern", "Python.javacc", 565, 10);
                        OuterFollowSet = follow_setΣPython_javaccΣ565Σ10;
                        try {
                            ParseOpenSequencePattern();
                        }
                        finally {
                            PopCallStack();
                        }


                    }

                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:565:31
                    ConsumeToken(TokenType.RPAREN);


                }
                else {
                    PushOntoCallStack("SequencePattern", "Python.javacc", 563, 5);
                    throw new ParseException(this, SequencePattern_FIRST_SET);
                }
            }
            catch (ParseException e) {
                parseException3251 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize3252);
                if (SequencePattern96 != null) {
                    if (parseException3251 == null) {
                        CloseNodeScope(SequencePattern96, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseSequencePattern

        private static readonly HashSet<TokenType> ClassPattern_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        
        // Python.javacc:568:1
        public void ParseClassPattern() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "ClassPattern";
     
            ClassPattern ClassPattern97 = null;
            if (BuildTree) {
                ClassPattern97 = new ClassPattern(tokenSource);
                OpenNodeScope(ClassPattern97);
            }

            ParseException parseException3290 = null;
            var callStackSize3291 = ParsingStack.Count;
            try {
                // Code for NonTerminal specified at:
                // Python.javacc:569:4
                PushOntoCallStack("ClassPattern", "Python.javacc", 569, 4);
                OuterFollowSet = follow_setΣPython_javaccΣ569Σ4;
                try {
                    ParseNameOrAttribute();
                }
                finally {
                    PopCallStack();
                }

                // Code for RegexpStringLiteral specified at:
                // Python.javacc:570:4
                ConsumeToken(TokenType.LPAREN);

                // Code for ZeroOrOne specified at:
                // Python.javacc:572:7
                // Code for ExpansionChoice specified at:
                // Python.javacc:573:11
                if (scanΣPython_javaccΣ573Σ11()) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:574:11
                    PushOntoCallStack("ClassPattern", "Python.javacc", 574, 11);
                    OuterFollowSet = follow_setΣPython_javaccΣ574Σ11;
                    try {
                        ParseKeywordPatterns();
                    }
                    finally {
                        PopCallStack();
                    }

                    // Code for ZeroOrOne specified at:
                    // Python.javacc:574:27
                    if ((NextTokenType == TokenType.COMMA)) {
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:574:28
                        ConsumeToken(TokenType.COMMA);


                    }


                }
                else if ((first_setΣPython_javaccΣ576Σ11.Contains(NextTokenType))) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:576:11
                    PushOntoCallStack("ClassPattern", "Python.javacc", 576, 11);
                    OuterFollowSet = follow_setΣPython_javaccΣ576Σ11Σ;
                    try {
                        ParsePositionalPatterns();
                    }
                    finally {
                        PopCallStack();
                    }

                    // Code for ZeroOrOne specified at:
                    // Python.javacc:576:30
                    if (scanΣPython_javaccΣ576Σ31()) {
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:576:31
                        ConsumeToken(TokenType.COMMA);

                        // Code for NonTerminal specified at:
                        // Python.javacc:576:41
                        PushOntoCallStack("ClassPattern", "Python.javacc", 576, 41);
                        OuterFollowSet = follow_setΣPython_javaccΣ576Σ41;
                        try {
                            ParseKeywordPatterns();
                        }
                        finally {
                            PopCallStack();
                        }


                    }

                    // Code for ZeroOrOne specified at:
                    // Python.javacc:576:58
                    if ((NextTokenType == TokenType.COMMA)) {
                        // Code for RegexpStringLiteral specified at:
                        // Python.javacc:576:59
                        ConsumeToken(TokenType.COMMA);


                    }


                }


                // Code for RegexpStringLiteral specified at:
                // Python.javacc:578:4
                ConsumeToken(TokenType.RPAREN);

            }
            catch (ParseException e) {
                parseException3290 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize3291);
                if (ClassPattern97 != null) {
                    if (parseException3290 == null) {
                        CloseNodeScope(ClassPattern97, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseClassPattern

        private static readonly HashSet<TokenType> PositionalPatterns_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:581:1
        public void ParsePositionalPatterns() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "PositionalPatterns";
     
            PositionalPatterns PositionalPatterns98 = null;
            if (BuildTree) {
                PositionalPatterns98 = new PositionalPatterns(tokenSource);
                OpenNodeScope(PositionalPatterns98);
            }

            ParseException parseException3350 = null;
            var callStackSize3351 = ParsingStack.Count;
            try {
                // Code for NonTerminal specified at:
                // Python.javacc:582:4
                PushOntoCallStack("PositionalPatterns", "Python.javacc", 582, 4);
                if (OuterFollowSet != null) {
                    var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ582Σ4);
                    newFollowSet.UnionWith(OuterFollowSet);
                    OuterFollowSet = newFollowSet;
                }
                try {
                    ParsePattern();
                }
                finally {
                    PopCallStack();
                }

                // Code for ZeroOrMore specified at:
                // Python.javacc:583:4
                while (true) {
                    if (!(scanΣPython_javaccΣ586Σ8())) break;
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:587:11
                    ConsumeToken(TokenType.COMMA);

                    // Code for NonTerminal specified at:
                    // Python.javacc:587:15
                    PushOntoCallStack("PositionalPatterns", "Python.javacc", 587, 15);
                    if (OuterFollowSet != null) {
                        var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ587Σ15);
                        newFollowSet.UnionWith(OuterFollowSet);
                        OuterFollowSet = newFollowSet;
                    }
                    try {
                        ParsePattern();
                    }
                    finally {
                        PopCallStack();
                    }


                }

            }
            catch (ParseException e) {
                parseException3350 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize3351);
                if (PositionalPatterns98 != null) {
                    if (parseException3350 == null) {
                        CloseNodeScope(PositionalPatterns98, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParsePositionalPatterns

        private static readonly HashSet<TokenType> KeywordPattern_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        
        // Python.javacc:591:1
        public void ParseKeywordPattern() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "KeywordPattern";
     
            KeywordPattern KeywordPattern99 = null;
            if (BuildTree) {
                KeywordPattern99 = new KeywordPattern(tokenSource);
                OpenNodeScope(KeywordPattern99);
            }

            ParseException parseException3368 = null;
            var callStackSize3369 = ParsingStack.Count;
            try {
                // Code for RegexpRef specified at:
                // Python.javacc:591:18
                ConsumeToken(TokenType.NAME);

                // Code for RegexpStringLiteral specified at:
                // Python.javacc:591:25
                ConsumeToken(TokenType.ASSIGN);

                // Code for NonTerminal specified at:
                // Python.javacc:591:29
                PushOntoCallStack("KeywordPattern", "Python.javacc", 591, 29);
                try {
                    ParsePattern();
                }
                finally {
                    PopCallStack();
                }

            }
            catch (ParseException e) {
                parseException3368 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize3369);
                if (KeywordPattern99 != null) {
                    if (parseException3368 == null) {
                        CloseNodeScope(KeywordPattern99, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseKeywordPattern

        private static readonly HashSet<TokenType> KeywordPatterns_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        
        // Python.javacc:593:1
        public void ParseKeywordPatterns() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "KeywordPatterns";
     
            KeywordPatterns KeywordPatterns100 = null;
            if (BuildTree) {
                KeywordPatterns100 = new KeywordPatterns(tokenSource);
                OpenNodeScope(KeywordPatterns100);
            }

            ParseException parseException3380 = null;
            var callStackSize3381 = ParsingStack.Count;
            try {
                // Code for NonTerminal specified at:
                // Python.javacc:593:19
                PushOntoCallStack("KeywordPatterns", "Python.javacc", 593, 19);
                if (OuterFollowSet != null) {
                    var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ593Σ19);
                    newFollowSet.UnionWith(OuterFollowSet);
                    OuterFollowSet = newFollowSet;
                }
                try {
                    ParseKeywordPattern();
                }
                finally {
                    PopCallStack();
                }

                // Code for ZeroOrMore specified at:
                // Python.javacc:593:34
                while (true) {
                    if (!(scanΣPython_javaccΣ593Σ35())) break;
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:593:35
                    ConsumeToken(TokenType.COMMA);

                    // Code for NonTerminal specified at:
                    // Python.javacc:593:45
                    PushOntoCallStack("KeywordPatterns", "Python.javacc", 593, 45);
                    if (OuterFollowSet != null) {
                        var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ593Σ45);
                        newFollowSet.UnionWith(OuterFollowSet);
                        OuterFollowSet = newFollowSet;
                    }
                    try {
                        ParseKeywordPattern();
                    }
                    finally {
                        PopCallStack();
                    }


                }

            }
            catch (ParseException e) {
                parseException3380 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize3381);
                if (KeywordPatterns100 != null) {
                    if (parseException3380 == null) {
                        CloseNodeScope(KeywordPatterns100, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseKeywordPatterns

        private static readonly HashSet<TokenType> OrPattern_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:595:1
        public void ParseOrPattern() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "OrPattern";
     
            OrPattern OrPattern101 = null;
            if (BuildTree) {
                OrPattern101 = new OrPattern(tokenSource);
                OpenNodeScope(OrPattern101);
            }

            ParseException parseException3398 = null;
            var callStackSize3399 = ParsingStack.Count;
            try {
                // Code for NonTerminal specified at:
                // Python.javacc:595:13
                PushOntoCallStack("OrPattern", "Python.javacc", 595, 13);
                if (OuterFollowSet != null) {
                    var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ595Σ13);
                    newFollowSet.UnionWith(OuterFollowSet);
                    OuterFollowSet = newFollowSet;
                }
                try {
                    ParseClosedPattern();
                }
                finally {
                    PopCallStack();
                }

                // Code for ZeroOrMore specified at:
                // Python.javacc:595:27
                while (true) {
                    if (!((NextTokenType == TokenType.BIT_OR))) break;
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:595:28
                    ConsumeToken(TokenType.BIT_OR);

                    // Code for NonTerminal specified at:
                    // Python.javacc:595:32
                    PushOntoCallStack("OrPattern", "Python.javacc", 595, 32);
                    if (OuterFollowSet != null) {
                        var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ595Σ32);
                        newFollowSet.UnionWith(OuterFollowSet);
                        OuterFollowSet = newFollowSet;
                    }
                    try {
                        ParseClosedPattern();
                    }
                    finally {
                        PopCallStack();
                    }


                }

            }
            catch (ParseException e) {
                parseException3398 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize3399);
                if (OrPattern101 != null) {
                    if (parseException3398 == null) {
                        CloseNodeScope(OrPattern101, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseOrPattern

        private static readonly HashSet<TokenType> Pattern_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:597:1
        public void ParsePattern() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "Pattern";
     
            Pattern Pattern102 = null;
            if (BuildTree) {
                Pattern102 = new Pattern(tokenSource);
                OpenNodeScope(Pattern102);
            }

            ParseException parseException3416 = null;
            var callStackSize3417 = ParsingStack.Count;
            try {
                // Code for NonTerminal specified at:
                // Python.javacc:597:11
                PushOntoCallStack("Pattern", "Python.javacc", 597, 11);
                if (OuterFollowSet != null) {
                    var newFollowSet = new SetAdapter<TokenType>(follow_setΣPython_javaccΣ597Σ11);
                    newFollowSet.UnionWith(OuterFollowSet);
                    OuterFollowSet = newFollowSet;
                }
                try {
                    ParseOrPattern();
                }
                finally {
                    PopCallStack();
                }

                // Code for ZeroOrOne specified at:
                // Python.javacc:597:21
                if ((NextTokenType == TokenType.AS)) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:597:22
                    ConsumeToken(TokenType.AS);

                    // Code for RegexpRef specified at:
                    // Python.javacc:597:27
                    ConsumeToken(TokenType.NAME);


                }

            }
            catch (ParseException e) {
                parseException3416 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize3417);
                if (Pattern102 != null) {
                    if (parseException3416 == null) {
                        CloseNodeScope(Pattern102, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParsePattern

        private static readonly HashSet<TokenType> SubjectExpression_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        
        // Python.javacc:599:1
        public void ParseSubjectExpression() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "SubjectExpression";
            // Code for ExpansionChoice specified at:
            // Python.javacc:600:4
     
            SubjectExpression SubjectExpression103 = null;
            if (BuildTree) {
                SubjectExpression103 = new SubjectExpression(tokenSource);
                OpenNodeScope(SubjectExpression103);
            }

            ParseException parseException3434 = null;
            var callStackSize3435 = ParsingStack.Count;
            try {
                if (scanΣPython_javaccΣ600Σ4()) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:600:4
                    PushOntoCallStack("SubjectExpression", "Python.javacc", 600, 4);
                    OuterFollowSet = follow_setΣPython_javaccΣ600Σ4;
                    try {
                        ParseStarNamedExpression();
                    }
                    finally {
                        PopCallStack();
                    }

                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:600:24
                    ConsumeToken(TokenType.COMMA);

                    // Code for ZeroOrOne specified at:
                    // Python.javacc:600:33
                    if ((first_setΣPython_javaccΣ600Σ34.Contains(NextTokenType))) {
                        // Code for NonTerminal specified at:
                        // Python.javacc:600:34
                        PushOntoCallStack("SubjectExpression", "Python.javacc", 600, 34);
                        try {
                            ParseStarNamedExpressions();
                        }
                        finally {
                            PopCallStack();
                        }


                    }


                }
                else if ((first_setΣPython_javaccΣ602Σ4.Contains(NextTokenType))) {
                    // Code for NonTerminal specified at:
                    // Python.javacc:602:4
                    PushOntoCallStack("SubjectExpression", "Python.javacc", 602, 4);
                    try {
                        ParseNamedExpression();
                    }
                    finally {
                        PopCallStack();
                    }


                }
                else {
                    PushOntoCallStack("SubjectExpression", "Python.javacc", 600, 4);
                    throw new ParseException(this, SubjectExpression_FIRST_SET);
                }
            }
            catch (ParseException e) {
                parseException3434 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize3435);
                if (SubjectExpression103 != null) {
                    if (parseException3434 == null) {
                        CloseNodeScope(SubjectExpression103, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseSubjectExpression

        private static readonly HashSet<TokenType> Attribute_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        
        // Python.javacc:605:1
        public void ParseAttribute() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "Attribute";
     
            Attribute Attribute104 = null;
            if (BuildTree) {
                Attribute104 = new Attribute(tokenSource);
                OpenNodeScope(Attribute104);
            }

            ParseException parseException3461 = null;
            var callStackSize3462 = ParsingStack.Count;
            try {
                // Code for RegexpRef specified at:
                // Python.javacc:605:13
                ConsumeToken(TokenType.NAME);

                // Code for OneOrMore specified at:
                // Python.javacc:605:20
                while (true) {
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:605:21
                    ConsumeToken(TokenType.DOT);

                    // Code for RegexpRef specified at:
                    // Python.javacc:605:25
                    ConsumeToken(TokenType.NAME);



                    if (!((NextTokenType == TokenType.DOT))) break;
                }

            }
            catch (ParseException e) {
                parseException3461 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize3462);
                if (Attribute104 != null) {
                    if (parseException3461 == null) {
                        CloseNodeScope(Attribute104, NodeArity > 1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseAttribute

        private static readonly HashSet<TokenType> NameOrAttribute_FIRST_SET = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        
        // Python.javacc:607:1
        public void ParseNameOrAttribute() {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "NameOrAttribute";
     
            Attribute NameOrAttribute105 = null;
            if (BuildTree) {
                NameOrAttribute105 = new Attribute(tokenSource);
                OpenNodeScope(NameOrAttribute105);
            }

            ParseException parseException3479 = null;
            var callStackSize3480 = ParsingStack.Count;
            try {
                // Code for RegexpRef specified at:
                // Python.javacc:607:34
                ConsumeToken(TokenType.NAME);

                // Code for ZeroOrMore specified at:
                // Python.javacc:607:41
                while (true) {
                    if (!((NextTokenType == TokenType.DOT))) break;
                    // Code for RegexpStringLiteral specified at:
                    // Python.javacc:607:42
                    ConsumeToken(TokenType.DOT);

                    // Code for RegexpRef specified at:
                    // Python.javacc:607:46
                    ConsumeToken(TokenType.NAME);


                }

            }
            catch (ParseException e) {
                parseException3479 = e;
                throw;
            }
            finally {
                RestoreCallStack(callStackSize3480);
                if (NameOrAttribute105 != null) {
                    if (parseException3479 == null) {
                        CloseNodeScope(NameOrAttribute105, NodeArity>1);
                    }
                    else {
                        ClearNodeScope();
                
                    }
                    _currentlyParsedProduction = prevProduction;
                }
            }

        }
        // end of ParseNameOrAttribute

    // ==================================================================
    // EnumSets that represent the various expansions' first set (i.e. the set of tokens with which the expansion can begin)
    // ==================================================================
        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ24Σ4 = Utils.GetOrMakeSet(
            TokenType.AT,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.ASYNC,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CLASS,
            TokenType.CONTINUE,
            TokenType.DEF,
            TokenType.DEL,
            TokenType.FOR,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.IF,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.MATCH,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.TRY,
            TokenType.WHILE,
            TokenType.WITH,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ24Σ5 = Utils.GetOrMakeSet(
            TokenType.AT,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.ASYNC,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CLASS,
            TokenType.CONTINUE,
            TokenType.DEF,
            TokenType.DEL,
            TokenType.FOR,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.IF,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.MATCH,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.TRY,
            TokenType.WHILE,
            TokenType.WITH,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ24Σ5Σ = Utils.GetOrMakeSet(
            TokenType.AT,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.ASYNC,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CLASS,
            TokenType.CONTINUE,
            TokenType.DEF,
            TokenType.DEL,
            TokenType.FOR,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.IF,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.MATCH,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.TRY,
            TokenType.WHILE,
            TokenType.WITH,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ25Σ4 = Utils.GetOrMakeSet(
            TokenType.EOF
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ30Σ3 = Utils.GetOrMakeSet(
            TokenType.HEXNUMBER
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ30Σ17 = Utils.GetOrMakeSet(
            TokenType.BINNUMBER
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ30Σ31 = Utils.GetOrMakeSet(
            TokenType.OCTNUMBER
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ30Σ45 = Utils.GetOrMakeSet(
            TokenType.DECNUMBER
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ30Σ59 = Utils.GetOrMakeSet(
            TokenType.FLOAT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ30Σ69 = Utils.GetOrMakeSet(
            TokenType.COMPLEX
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ34Σ3 = Utils.GetOrMakeSet(
            TokenType.MINUS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ34Σ4 = Utils.GetOrMakeSet(
            TokenType.MINUS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ35Σ3 = Utils.GetOrMakeSet(
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ36Σ3 = Utils.GetOrMakeSet(
            TokenType.MINUS,
            TokenType.PLUS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ36Σ4 = Utils.GetOrMakeSet(
            TokenType.MINUS,
            TokenType.PLUS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ36Σ4Σ = Utils.GetOrMakeSet(
            TokenType.MINUS,
            TokenType.PLUS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ36Σ5 = Utils.GetOrMakeSet(
            TokenType.MINUS,
            TokenType.PLUS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ36Σ5Σ = Utils.GetOrMakeSet(
            TokenType.PLUS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ36Σ9 = Utils.GetOrMakeSet(
            TokenType.MINUS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ39Σ11 = Utils.GetOrMakeSet(
            TokenType.STRING_LITERAL
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ39Σ12 = Utils.GetOrMakeSet(
            TokenType.STRING_LITERAL
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ42Σ5 = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ44Σ5 = Utils.GetOrMakeSet(
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ44Σ5Σ = Utils.GetOrMakeSet(
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ46Σ5 = Utils.GetOrMakeSet(
            TokenType.STRING_LITERAL
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ46Σ5Σ = Utils.GetOrMakeSet(
            TokenType.STRING_LITERAL
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ48Σ5 = Utils.GetOrMakeSet(
            TokenType.TRUE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ50Σ5 = Utils.GetOrMakeSet(
            TokenType.FALSE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ52Σ5 = Utils.GetOrMakeSet(
            TokenType.NONE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ54Σ5 = Utils.GetOrMakeSet(
            TokenType.PEG_PARSER
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ56Σ5 = Utils.GetOrMakeSet(
            TokenType.LPAREN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ56Σ5Σ = Utils.GetOrMakeSet(
            TokenType.LPAREN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ56Σ6 = Utils.GetOrMakeSet(
            TokenType.LPAREN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ56Σ6Σ = Utils.GetOrMakeSet(
            TokenType.LPAREN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ56Σ6ΣΣ = Utils.GetOrMakeSet(
            TokenType.LPAREN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ56Σ14 = Utils.GetOrMakeSet(
            TokenType.LPAREN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ56Σ14Σ = Utils.GetOrMakeSet(
            TokenType.LPAREN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ56Σ23 = Utils.GetOrMakeSet(
            TokenType.LPAREN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ56Σ23Σ = Utils.GetOrMakeSet(
            TokenType.LPAREN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ58Σ5 = Utils.GetOrMakeSet(
            TokenType.LBRACKET
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ58Σ5Σ = Utils.GetOrMakeSet(
            TokenType.LBRACKET
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ58Σ6 = Utils.GetOrMakeSet(
            TokenType.LBRACKET
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ58Σ6Σ = Utils.GetOrMakeSet(
            TokenType.LBRACKET
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ58Σ6ΣΣ = Utils.GetOrMakeSet(
            TokenType.LBRACKET
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ58Σ17 = Utils.GetOrMakeSet(
            TokenType.LBRACKET
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ58Σ17Σ = Utils.GetOrMakeSet(
            TokenType.LBRACKET
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ60Σ5 = Utils.GetOrMakeSet(
            TokenType.LBRACE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ60Σ5Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ60Σ6 = Utils.GetOrMakeSet(
            TokenType.LBRACE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ60Σ6Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ60Σ6ΣΣ = Utils.GetOrMakeSet(
            TokenType.LBRACE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ60Σ16 = Utils.GetOrMakeSet(
            TokenType.LBRACE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ60Σ16Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ60Σ27 = Utils.GetOrMakeSet(
            TokenType.LBRACE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ60Σ27Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ60Σ34 = Utils.GetOrMakeSet(
            TokenType.LBRACE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ60Σ34Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ62Σ5 = Utils.GetOrMakeSet(
            TokenType.ELLIPSIS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ66Σ5 = Utils.GetOrMakeSet(
            TokenType.COLON,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ66Σ5Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ66Σ6 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ66Σ6Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ66Σ27 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ66Σ28 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ66Σ28Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ66Σ40 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ66Σ41 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ66Σ45 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ66Σ46 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ66Σ46Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ68Σ5 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ68Σ5Σ = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ68Σ6 = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ68Σ22 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ71Σ14 = Utils.GetOrMakeSet(
            TokenType.COLON,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ71Σ20 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ71Σ21 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ71Σ31 = Utils.GetOrMakeSet(
            TokenType.COLON,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ71Σ39 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ71Σ40 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ74Σ4 = Utils.GetOrMakeSet(
            TokenType.MATCH
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ74Σ4Σ = Utils.GetOrMakeSet(
            TokenType.MATCH
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ76Σ4 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CONTINUE,
            TokenType.DEL,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ76Σ4Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CONTINUE,
            TokenType.DEL,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ78Σ4 = Utils.GetOrMakeSet(
            TokenType.AT,
            TokenType.ASYNC,
            TokenType.CLASS,
            TokenType.DEF,
            TokenType.FOR,
            TokenType.IF,
            TokenType.TRY,
            TokenType.WHILE,
            TokenType.WITH
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ78Σ4Σ = Utils.GetOrMakeSet(
            TokenType.AT,
            TokenType.ASYNC,
            TokenType.CLASS,
            TokenType.DEF,
            TokenType.FOR,
            TokenType.IF,
            TokenType.TRY,
            TokenType.WHILE,
            TokenType.WITH
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ81Σ24 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CONTINUE,
            TokenType.DEL,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ81Σ39 = Utils.GetOrMakeSet(
            TokenType.SEMICOLON
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ81Σ40 = Utils.GetOrMakeSet(
            TokenType.SEMICOLON
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ81Σ50 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CONTINUE,
            TokenType.DEL,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ81Σ67 = Utils.GetOrMakeSet(
            TokenType.SEMICOLON
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ81Σ68 = Utils.GetOrMakeSet(
            TokenType.SEMICOLON
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ84Σ4 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ84Σ4Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ86Σ4 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ86Σ4Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ88Σ4 = Utils.GetOrMakeSet(
            TokenType.RETURN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ88Σ4Σ = Utils.GetOrMakeSet(
            TokenType.RETURN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ90Σ4 = Utils.GetOrMakeSet(
            TokenType.FROM,
            TokenType.IMPORT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ90Σ4Σ = Utils.GetOrMakeSet(
            TokenType.FROM,
            TokenType.IMPORT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ92Σ4 = Utils.GetOrMakeSet(
            TokenType.GLOBAL
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ92Σ4Σ = Utils.GetOrMakeSet(
            TokenType.GLOBAL
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ94Σ4 = Utils.GetOrMakeSet(
            TokenType.NONLOCAL
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ94Σ4Σ = Utils.GetOrMakeSet(
            TokenType.NONLOCAL
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ96Σ4 = Utils.GetOrMakeSet(
            TokenType.BREAK
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ98Σ4 = Utils.GetOrMakeSet(
            TokenType.CONTINUE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ100Σ4 = Utils.GetOrMakeSet(
            TokenType.PASS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ102Σ4 = Utils.GetOrMakeSet(
            TokenType.DEL
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ102Σ4Σ = Utils.GetOrMakeSet(
            TokenType.DEL
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ104Σ4 = Utils.GetOrMakeSet(
            TokenType._ASSERT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ104Σ4Σ = Utils.GetOrMakeSet(
            TokenType._ASSERT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ106Σ4 = Utils.GetOrMakeSet(
            TokenType.RAISE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ106Σ4Σ = Utils.GetOrMakeSet(
            TokenType.RAISE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ108Σ4 = Utils.GetOrMakeSet(
            TokenType.YIELD
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ108Σ4Σ = Utils.GetOrMakeSet(
            TokenType.YIELD
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ112Σ5 = Utils.GetOrMakeSet(
            TokenType.AT,
            TokenType.ASYNC,
            TokenType.DEF
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ112Σ5Σ = Utils.GetOrMakeSet(
            TokenType.AT,
            TokenType.ASYNC,
            TokenType.DEF
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ114Σ5 = Utils.GetOrMakeSet(
            TokenType.IF
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ114Σ5Σ = Utils.GetOrMakeSet(
            TokenType.IF
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ116Σ5 = Utils.GetOrMakeSet(
            TokenType.AT,
            TokenType.CLASS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ116Σ5Σ = Utils.GetOrMakeSet(
            TokenType.AT,
            TokenType.CLASS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ118Σ5 = Utils.GetOrMakeSet(
            TokenType.ASYNC,
            TokenType.WITH
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ118Σ5Σ = Utils.GetOrMakeSet(
            TokenType.ASYNC,
            TokenType.WITH
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ120Σ5 = Utils.GetOrMakeSet(
            TokenType.WHILE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ120Σ5Σ = Utils.GetOrMakeSet(
            TokenType.WHILE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ122Σ5 = Utils.GetOrMakeSet(
            TokenType.ASYNC,
            TokenType.FOR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ122Σ5Σ = Utils.GetOrMakeSet(
            TokenType.ASYNC,
            TokenType.FOR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ124Σ5 = Utils.GetOrMakeSet(
            TokenType.TRY
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ124Σ5Σ = Utils.GetOrMakeSet(
            TokenType.TRY
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ127Σ28 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ127Σ29 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ127Σ29Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ129Σ35 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ129Σ36 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ131Σ39 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ131Σ40 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ133Σ28 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ133Σ39 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ133Σ40 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ133Σ44 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ135Σ26 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ135Σ28 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ135Σ28Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ135Σ39 = Utils.GetOrMakeSet(
            TokenType.FROM
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ135Σ40 = Utils.GetOrMakeSet(
            TokenType.FROM
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ135Σ47 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ138Σ5 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CONTINUE,
            TokenType.DEL,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ138Σ5Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CONTINUE,
            TokenType.DEL,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ140Σ5 = Utils.GetOrMakeSet(
            TokenType.NEWLINE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ140Σ22 = Utils.GetOrMakeSet(
            TokenType.AT,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.ASYNC,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CLASS,
            TokenType.CONTINUE,
            TokenType.DEF,
            TokenType.DEL,
            TokenType.FOR,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.IF,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.MATCH,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.TRY,
            TokenType.WHILE,
            TokenType.WITH,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ140Σ23Σ = Utils.GetOrMakeSet(
            TokenType.AT,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.ASYNC,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CLASS,
            TokenType.CONTINUE,
            TokenType.DEF,
            TokenType.DEL,
            TokenType.FOR,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.IF,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.MATCH,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.TRY,
            TokenType.WHILE,
            TokenType.WITH,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ140Σ23 = Utils.GetOrMakeSet(
            TokenType.AT,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.ASYNC,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CLASS,
            TokenType.CONTINUE,
            TokenType.DEF,
            TokenType.DEL,
            TokenType.FOR,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.IF,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.MATCH,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.TRY,
            TokenType.WHILE,
            TokenType.WITH,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ143Σ24 = Utils.GetOrMakeSet(
            TokenType.NEWLINE,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CONTINUE,
            TokenType.DEL,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ145Σ24 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ145Σ26 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ145Σ26Σ = Utils.GetOrMakeSet(
            TokenType.STAR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ145Σ27 = Utils.GetOrMakeSet(
            TokenType.STAR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ145Σ32 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ145Σ43 = Utils.GetOrMakeSet(
            TokenType.AS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ145Σ44 = Utils.GetOrMakeSet(
            TokenType.AS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ145Σ63 = Utils.GetOrMakeSet(
            TokenType.NEWLINE,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CONTINUE,
            TokenType.DEL,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ148Σ10 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ148Σ30 = Utils.GetOrMakeSet(
            TokenType.NEWLINE,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CONTINUE,
            TokenType.DEL,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ149Σ6 = Utils.GetOrMakeSet(
            TokenType.ELIF
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ149Σ7 = Utils.GetOrMakeSet(
            TokenType.ELIF
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ149Σ14 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ149Σ34 = Utils.GetOrMakeSet(
            TokenType.NEWLINE,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CONTINUE,
            TokenType.DEL,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ150Σ6 = Utils.GetOrMakeSet(
            TokenType.ELSE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ150Σ7 = Utils.GetOrMakeSet(
            TokenType.ELSE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ150Σ18 = Utils.GetOrMakeSet(
            TokenType.NEWLINE,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CONTINUE,
            TokenType.DEL,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ153Σ30 = Utils.GetOrMakeSet(
            TokenType.NEWLINE,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CONTINUE,
            TokenType.DEL,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ155Σ26 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ155Σ46 = Utils.GetOrMakeSet(
            TokenType.NEWLINE,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CONTINUE,
            TokenType.DEL,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ155Σ52 = Utils.GetOrMakeSet(
            TokenType.ELSE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ155Σ53 = Utils.GetOrMakeSet(
            TokenType.ELSE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ155Σ53Σ = Utils.GetOrMakeSet(
            TokenType.ELSE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ158Σ5 = Utils.GetOrMakeSet(
            TokenType.ASYNC
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ158Σ6 = Utils.GetOrMakeSet(
            TokenType.ASYNC
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ159Σ5 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ160Σ9 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ160Σ9Σ = Utils.GetOrMakeSet(
            TokenType.LPAREN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ160Σ14 = Utils.GetOrMakeSet(
            TokenType.LPAREN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ160Σ14Σ = Utils.GetOrMakeSet(
            TokenType.LPAREN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ160Σ44 = Utils.GetOrMakeSet(
            TokenType.LPAREN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ162Σ9 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ162Σ9Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ162Σ18 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ162Σ19 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ162Σ23 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ164Σ9 = Utils.GetOrMakeSet(
            TokenType.NEWLINE,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CONTINUE,
            TokenType.DEL,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ167Σ35 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ167Σ44 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ167Σ45 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ167Σ56 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ167Σ67 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ167Σ68 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ169Σ12 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ169Σ23 = Utils.GetOrMakeSet(
            TokenType.AS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ169Σ24 = Utils.GetOrMakeSet(
            TokenType.AS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ169Σ29 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ172Σ4 = Utils.GetOrMakeSet(
            TokenType.ASYNC
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ172Σ5 = Utils.GetOrMakeSet(
            TokenType.ASYNC
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ173Σ4 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ173Σ21 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ174Σ4 = Utils.GetOrMakeSet(
            TokenType.NEWLINE,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CONTINUE,
            TokenType.DEL,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ174Σ10 = Utils.GetOrMakeSet(
            TokenType.ELSE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ174Σ11 = Utils.GetOrMakeSet(
            TokenType.ELSE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ174Σ11Σ = Utils.GetOrMakeSet(
            TokenType.ELSE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ178Σ14 = Utils.GetOrMakeSet(
            TokenType.NEWLINE,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CONTINUE,
            TokenType.DEL,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ179Σ4 = Utils.GetOrMakeSet(
            TokenType.EXCEPT,
            TokenType.FINALLY
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ180Σ8 = Utils.GetOrMakeSet(
            TokenType.EXCEPT,
            TokenType.FINALLY
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ180Σ8Σ = Utils.GetOrMakeSet(
            TokenType.FINALLY
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ180Σ8ΣΣ = Utils.GetOrMakeSet(
            TokenType.FINALLY
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ182Σ8 = Utils.GetOrMakeSet(
            TokenType.EXCEPT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ182Σ8Σ = Utils.GetOrMakeSet(
            TokenType.EXCEPT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ182Σ9 = Utils.GetOrMakeSet(
            TokenType.EXCEPT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ182Σ9Σ = Utils.GetOrMakeSet(
            TokenType.EXCEPT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ182Σ10Σ = Utils.GetOrMakeSet(
            TokenType.EXCEPT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ182Σ10 = Utils.GetOrMakeSet(
            TokenType.EXCEPT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ182Σ24 = Utils.GetOrMakeSet(
            TokenType.ELSE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ182Σ25Σ = Utils.GetOrMakeSet(
            TokenType.ELSE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ182Σ25 = Utils.GetOrMakeSet(
            TokenType.ELSE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ182Σ36 = Utils.GetOrMakeSet(
            TokenType.FINALLY
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ182Σ37 = Utils.GetOrMakeSet(
            TokenType.FINALLY
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ182Σ37Σ = Utils.GetOrMakeSet(
            TokenType.FINALLY
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ186Σ22 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ186Σ40 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ186Σ41 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ186Σ52 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ186Σ72 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ186Σ73 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ188Σ19 = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ188Σ21 = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ188Σ38 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ190Σ21 = Utils.GetOrMakeSet(
            TokenType.DOT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ190Σ22 = Utils.GetOrMakeSet(
            TokenType.DOT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ192Σ19 = Utils.GetOrMakeSet(
            TokenType.IMPORT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ192Σ19Σ = Utils.GetOrMakeSet(
            TokenType.IMPORT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ192Σ32 = Utils.GetOrMakeSet(
            TokenType.FROM
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ192Σ32Σ = Utils.GetOrMakeSet(
            TokenType.FROM
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ192Σ46 = Utils.GetOrMakeSet(
            TokenType.FROM
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ192Σ46Σ = Utils.GetOrMakeSet(
            TokenType.FROM
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ194Σ28 = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ194Σ39 = Utils.GetOrMakeSet(
            TokenType.AS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ194Σ40 = Utils.GetOrMakeSet(
            TokenType.AS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ194Σ53 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ194Σ54 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ194Σ58 = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ194Σ69 = Utils.GetOrMakeSet(
            TokenType.AS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ194Σ70 = Utils.GetOrMakeSet(
            TokenType.AS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ196Σ27 = Utils.GetOrMakeSet(
            TokenType.DOT,
            TokenType.ELLIPSIS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ196Σ28 = Utils.GetOrMakeSet(
            TokenType.DOT,
            TokenType.ELLIPSIS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ196Σ28Σ = Utils.GetOrMakeSet(
            TokenType.DOT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ196Σ34 = Utils.GetOrMakeSet(
            TokenType.ELLIPSIS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ196Σ42 = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ196Σ68 = Utils.GetOrMakeSet(
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ198Σ27 = Utils.GetOrMakeSet(
            TokenType.DOT,
            TokenType.ELLIPSIS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ198Σ28 = Utils.GetOrMakeSet(
            TokenType.DOT,
            TokenType.ELLIPSIS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ198Σ28Σ = Utils.GetOrMakeSet(
            TokenType.DOT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ198Σ34 = Utils.GetOrMakeSet(
            TokenType.ELLIPSIS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ198Σ56 = Utils.GetOrMakeSet(
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ201Σ4 = Utils.GetOrMakeSet(
            TokenType.STAR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ203Σ4 = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ203Σ11 = Utils.GetOrMakeSet(
            TokenType.AS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ203Σ12 = Utils.GetOrMakeSet(
            TokenType.AS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ203Σ25 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ203Σ26 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ203Σ42 = Utils.GetOrMakeSet(
            TokenType.AS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ203Σ43 = Utils.GetOrMakeSet(
            TokenType.AS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ203Σ58 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ203Σ59 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ205Σ4 = Utils.GetOrMakeSet(
            TokenType.LPAREN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ205Σ15 = Utils.GetOrMakeSet(
            TokenType.AS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ205Σ16 = Utils.GetOrMakeSet(
            TokenType.AS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ205Σ29 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ205Σ30 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ205Σ46 = Utils.GetOrMakeSet(
            TokenType.AS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ205Σ47 = Utils.GetOrMakeSet(
            TokenType.AS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ205Σ62 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ205Σ63 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ205Σ72 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ205Σ73 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ209Σ6 = Utils.GetOrMakeSet(
            TokenType.STAR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ209Σ10 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ211Σ6 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ211Σ6Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ215Σ5 = Utils.GetOrMakeSet(
            TokenType.STAR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ215Σ9 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ217Σ5 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ217Σ5Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ220Σ19 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ220Σ34 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ220Σ35 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ220Σ45 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ220Σ62 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ220Σ63 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ222Σ24 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ222Σ44 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ222Σ45 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ222Σ55 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ222Σ77 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ222Σ78 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ224Σ13 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ224Σ24 = Utils.GetOrMakeSet(
            TokenType.BIT_OR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ224Σ25 = Utils.GetOrMakeSet(
            TokenType.BIT_OR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ224Σ29 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ226Σ14 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ226Σ25 = Utils.GetOrMakeSet(
            TokenType.XOR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ226Σ26 = Utils.GetOrMakeSet(
            TokenType.XOR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ226Σ30 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ228Σ14 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ228Σ30 = Utils.GetOrMakeSet(
            TokenType.BIT_AND
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ228Σ31 = Utils.GetOrMakeSet(
            TokenType.BIT_AND
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ228Σ35 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ230Σ19 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ230Σ38 = Utils.GetOrMakeSet(
            TokenType.LSHIFT,
            TokenType.RSHIFT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ230Σ39 = Utils.GetOrMakeSet(
            TokenType.LSHIFT,
            TokenType.RSHIFT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ230Σ39Σ = Utils.GetOrMakeSet(
            TokenType.LSHIFT,
            TokenType.RSHIFT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ230Σ40 = Utils.GetOrMakeSet(
            TokenType.LSHIFT,
            TokenType.RSHIFT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ230Σ40Σ = Utils.GetOrMakeSet(
            TokenType.LSHIFT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ230Σ47 = Utils.GetOrMakeSet(
            TokenType.RSHIFT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ230Σ53 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ232Σ22 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ232Σ47 = Utils.GetOrMakeSet(
            TokenType.MINUS,
            TokenType.PLUS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ232Σ48 = Utils.GetOrMakeSet(
            TokenType.MINUS,
            TokenType.PLUS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ232Σ48Σ = Utils.GetOrMakeSet(
            TokenType.MINUS,
            TokenType.PLUS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ232Σ49 = Utils.GetOrMakeSet(
            TokenType.MINUS,
            TokenType.PLUS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ232Σ49Σ = Utils.GetOrMakeSet(
            TokenType.PLUS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ232Σ53 = Utils.GetOrMakeSet(
            TokenType.MINUS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ232Σ58 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ234Σ28 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ234Σ44 = Utils.GetOrMakeSet(
            TokenType.AT,
            TokenType.STAR,
            TokenType.SLASH,
            TokenType.PERCENT,
            TokenType._TOKEN_100
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ234Σ45 = Utils.GetOrMakeSet(
            TokenType.AT,
            TokenType.STAR,
            TokenType.SLASH,
            TokenType.PERCENT,
            TokenType._TOKEN_100
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ234Σ45Σ = Utils.GetOrMakeSet(
            TokenType.AT,
            TokenType.STAR,
            TokenType.SLASH,
            TokenType.PERCENT,
            TokenType._TOKEN_100
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ234Σ46 = Utils.GetOrMakeSet(
            TokenType.AT,
            TokenType.STAR,
            TokenType.SLASH,
            TokenType.PERCENT,
            TokenType._TOKEN_100
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ234Σ46Σ = Utils.GetOrMakeSet(
            TokenType.STAR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ234Σ50 = Utils.GetOrMakeSet(
            TokenType.SLASH
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ234Σ54 = Utils.GetOrMakeSet(
            TokenType._TOKEN_100
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ234Σ59 = Utils.GetOrMakeSet(
            TokenType.PERCENT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ234Σ63 = Utils.GetOrMakeSet(
            TokenType.AT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ234Σ68 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ236Σ19 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.ELLIPSIS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ236Σ19Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.ELLIPSIS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ236Σ27 = Utils.GetOrMakeSet(
            TokenType.TILDE,
            TokenType.MINUS,
            TokenType.PLUS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ236Σ27Σ = Utils.GetOrMakeSet(
            TokenType.TILDE,
            TokenType.MINUS,
            TokenType.PLUS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ236Σ28 = Utils.GetOrMakeSet(
            TokenType.TILDE,
            TokenType.MINUS,
            TokenType.PLUS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ236Σ28Σ = Utils.GetOrMakeSet(
            TokenType.PLUS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ236Σ34 = Utils.GetOrMakeSet(
            TokenType.MINUS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ236Σ40 = Utils.GetOrMakeSet(
            TokenType.TILDE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ236Σ45 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ238Σ9 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.ELLIPSIS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ238Σ22 = Utils.GetOrMakeSet(
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ238Σ23 = Utils.GetOrMakeSet(
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ238Σ28 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ241Σ9 = Utils.GetOrMakeSet(
            TokenType.LPAREN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ241Σ13 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.RPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ241Σ14 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.RPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ241Σ14Σ = Utils.GetOrMakeSet(
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ241Σ20 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ241Σ20Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ242Σ9 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ242Σ10 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ242Σ10Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ242Σ34 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ242Σ35 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ242Σ35Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ245Σ13 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ245Σ14Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ245Σ14ΣΣ = Utils.GetOrMakeSet(
            TokenType.YIELD
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ245Σ14 = Utils.GetOrMakeSet(
            TokenType.YIELD
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ245Σ32 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ245Σ32Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ247Σ16 = Utils.GetOrMakeSet(
            TokenType.AWAIT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ247Σ17 = Utils.GetOrMakeSet(
            TokenType.AWAIT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ247Σ26 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ250Σ4 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ251Σ4 = Utils.GetOrMakeSet(
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.DOT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ252Σ8 = Utils.GetOrMakeSet(
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.DOT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ252Σ8Σ = Utils.GetOrMakeSet(
            TokenType.DOT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ254Σ8Σ = Utils.GetOrMakeSet(
            TokenType.LBRACKET
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ254Σ8 = Utils.GetOrMakeSet(
            TokenType.LBRACKET
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ256Σ8Σ = Utils.GetOrMakeSet(
            TokenType.LPAREN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ256Σ8 = Utils.GetOrMakeSet(
            TokenType.LPAREN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ258Σ8Σ = Utils.GetOrMakeSet(
            TokenType.LPAREN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ258Σ8 = Utils.GetOrMakeSet(
            TokenType.LPAREN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ263Σ5 = Utils.GetOrMakeSet(
            TokenType.YIELD
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ263Σ25 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ265Σ5 = Utils.GetOrMakeSet(
            TokenType.YIELD
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ265Σ13 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ265Σ14 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ265Σ14Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ268Σ19 = Utils.GetOrMakeSet(
            TokenType.YIELD
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ270Σ16 = Utils.GetOrMakeSet(
            TokenType.YIELD
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ270Σ16Σ = Utils.GetOrMakeSet(
            TokenType.YIELD
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ270Σ34 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ270Σ34Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ272Σ14 = Utils.GetOrMakeSet(
            TokenType.AT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ272Σ15 = Utils.GetOrMakeSet(
            TokenType.AT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ272Σ19 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ274Σ18 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ278Σ4 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.STAR_STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ279Σ7 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.STAR_STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ279Σ7Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.STAR_STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ289Σ7 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ290Σ10 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ292Σ10 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.STAR_STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ298Σ7 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ298Σ8 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ304Σ4 = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ305Σ4 = Utils.GetOrMakeSet(
            TokenType.ASSIGN,
            TokenType.COLONEQUALS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ306Σ7 = Utils.GetOrMakeSet(
            TokenType.ASSIGN,
            TokenType.COLONEQUALS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ306Σ7Σ = Utils.GetOrMakeSet(
            TokenType.COLONEQUALS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ309Σ7 = Utils.GetOrMakeSet(
            TokenType.ASSIGN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ312Σ4 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ314Σ4 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.STAR_STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ314Σ4Σ = Utils.GetOrMakeSet(
            TokenType.STAR,
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ315Σ7 = Utils.GetOrMakeSet(
            TokenType.STAR,
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ316Σ7 = Utils.GetOrMakeSet(
            TokenType.STAR,
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ316Σ8 = Utils.GetOrMakeSet(
            TokenType.STAR,
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ316Σ8Σ = Utils.GetOrMakeSet(
            TokenType.STAR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ316Σ14 = Utils.GetOrMakeSet(
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ318Σ4 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ321Σ16 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ321Σ31 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ324Σ5 = Utils.GetOrMakeSet(
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ324Σ10 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ326Σ5 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ326Σ5Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ329Σ30 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR_STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ329Σ56 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ329Σ57 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ329Σ67 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR_STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ329Σ95 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ329Σ96 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ332Σ8 = Utils.GetOrMakeSet(
            TokenType.LBRACE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ332Σ12 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.RBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR_STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ332Σ13 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.RBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR_STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ332Σ13Σ = Utils.GetOrMakeSet(
            TokenType.RBRACE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ332Σ19 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR_STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ332Σ19Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR_STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ333Σ3 = Utils.GetOrMakeSet(
            TokenType.LBRACE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ334Σ5 = Utils.GetOrMakeSet(
            TokenType.LBRACE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ335Σ5 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR_STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ335Σ6 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR_STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ335Σ6Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR_STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ340Σ16 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ340Σ35 = Utils.GetOrMakeSet(
            TokenType.ASYNC,
            TokenType.FOR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ340Σ36Σ = Utils.GetOrMakeSet(
            TokenType.ASYNC,
            TokenType.FOR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ340Σ36 = Utils.GetOrMakeSet(
            TokenType.ASYNC,
            TokenType.FOR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ342Σ11 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ344Σ15 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ344Σ37 = Utils.GetOrMakeSet(
            TokenType.ASYNC,
            TokenType.FOR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ344Σ38Σ = Utils.GetOrMakeSet(
            TokenType.ASYNC,
            TokenType.FOR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ344Σ38 = Utils.GetOrMakeSet(
            TokenType.ASYNC,
            TokenType.FOR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ347Σ5 = Utils.GetOrMakeSet(
            TokenType.AT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ347Σ6Σ = Utils.GetOrMakeSet(
            TokenType.AT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ347Σ6 = Utils.GetOrMakeSet(
            TokenType.AT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ348Σ12 = Utils.GetOrMakeSet(
            TokenType.LPAREN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ348Σ13Σ = Utils.GetOrMakeSet(
            TokenType.LPAREN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ348Σ13 = Utils.GetOrMakeSet(
            TokenType.LPAREN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ350Σ5 = Utils.GetOrMakeSet(
            TokenType.NEWLINE,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CONTINUE,
            TokenType.DEL,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ354Σ5 = Utils.GetOrMakeSet(
            TokenType.AT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ354Σ6Σ = Utils.GetOrMakeSet(
            TokenType.AT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ354Σ6 = Utils.GetOrMakeSet(
            TokenType.AT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ355Σ5 = Utils.GetOrMakeSet(
            TokenType.ASYNC
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ355Σ6 = Utils.GetOrMakeSet(
            TokenType.ASYNC
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ359Σ5 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.STAR,
            TokenType.STAR_STAR,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ361Σ5 = Utils.GetOrMakeSet(
            TokenType.RARROW
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ361Σ6 = Utils.GetOrMakeSet(
            TokenType.RARROW
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ361Σ11 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ362Σ9 = Utils.GetOrMakeSet(
            TokenType.NEWLINE,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CONTINUE,
            TokenType.DEL,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ365Σ29 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.STAR,
            TokenType.STAR_STAR,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ365Σ44 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ371Σ14 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ371Σ14Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ371Σ26 = Utils.GetOrMakeSet(
            TokenType.IF
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ371Σ27 = Utils.GetOrMakeSet(
            TokenType.IF
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ371Σ32 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ371Σ51 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ371Σ65 = Utils.GetOrMakeSet(
            TokenType.LAMBDA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ371Σ65Σ = Utils.GetOrMakeSet(
            TokenType.LAMBDA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ373Σ15 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ373Σ27 = Utils.GetOrMakeSet(
            TokenType.OR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ373Σ28 = Utils.GetOrMakeSet(
            TokenType.OR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ373Σ33 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ375Σ15 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ375Σ25 = Utils.GetOrMakeSet(
            TokenType.AND
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ375Σ26 = Utils.GetOrMakeSet(
            TokenType.AND
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ375Σ32 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ377Σ13 = Utils.GetOrMakeSet(
            TokenType.NOT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ377Σ14 = Utils.GetOrMakeSet(
            TokenType.NOT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ377Σ22 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ379Σ14 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ379Σ24 = Utils.GetOrMakeSet(
            TokenType.EQ,
            TokenType.LE,
            TokenType.GE,
            TokenType.NE,
            TokenType.GT,
            TokenType.LT,
            TokenType.IN,
            TokenType.IS,
            TokenType.NOT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ379Σ25 = Utils.GetOrMakeSet(
            TokenType.EQ,
            TokenType.LE,
            TokenType.GE,
            TokenType.NE,
            TokenType.GT,
            TokenType.LT,
            TokenType.IN,
            TokenType.IS,
            TokenType.NOT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ379Σ25Σ = Utils.GetOrMakeSet(
            TokenType.EQ,
            TokenType.LE,
            TokenType.GE,
            TokenType.NE,
            TokenType.GT,
            TokenType.LT,
            TokenType.IN,
            TokenType.IS,
            TokenType.NOT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ379Σ44 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ382Σ4 = Utils.GetOrMakeSet(
            TokenType.LT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ382Σ10 = Utils.GetOrMakeSet(
            TokenType.GT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ382Σ16 = Utils.GetOrMakeSet(
            TokenType.EQ
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ382Σ23 = Utils.GetOrMakeSet(
            TokenType.GE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ382Σ30 = Utils.GetOrMakeSet(
            TokenType.LE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ382Σ37 = Utils.GetOrMakeSet(
            TokenType.NE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ384Σ4 = Utils.GetOrMakeSet(
            TokenType.IN,
            TokenType.NOT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ384Σ4Σ = Utils.GetOrMakeSet(
            TokenType.NOT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ384Σ5 = Utils.GetOrMakeSet(
            TokenType.NOT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ386Σ4 = Utils.GetOrMakeSet(
            TokenType.IS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ386Σ9 = Utils.GetOrMakeSet(
            TokenType.NOT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ386Σ10 = Utils.GetOrMakeSet(
            TokenType.NOT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ389Σ14 = Utils.GetOrMakeSet(
            TokenType.STAR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ389Σ15 = Utils.GetOrMakeSet(
            TokenType.STAR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ389Σ20 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ391Σ15 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ391Σ26 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ391Σ27 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ391Σ37 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ391Σ50 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ391Σ51 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ393Σ15 = Utils.GetOrMakeSet(
            TokenType.ASYNC
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ393Σ16 = Utils.GetOrMakeSet(
            TokenType.ASYNC
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ393Σ31 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ393Σ48 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ393Σ60 = Utils.GetOrMakeSet(
            TokenType.IF
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ393Σ61 = Utils.GetOrMakeSet(
            TokenType.IF
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ393Σ66 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ395Σ14 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ395Σ36 = Utils.GetOrMakeSet(
            TokenType.ASYNC,
            TokenType.FOR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ395Σ37Σ = Utils.GetOrMakeSet(
            TokenType.ASYNC,
            TokenType.FOR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ395Σ37 = Utils.GetOrMakeSet(
            TokenType.ASYNC,
            TokenType.FOR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ397Σ12 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ397Σ13 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ397Σ13Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ399Σ16 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ399Σ38 = Utils.GetOrMakeSet(
            TokenType.ASYNC,
            TokenType.FOR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ399Σ39Σ = Utils.GetOrMakeSet(
            TokenType.ASYNC,
            TokenType.FOR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ399Σ39 = Utils.GetOrMakeSet(
            TokenType.ASYNC,
            TokenType.FOR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ402Σ4 = Utils.GetOrMakeSet(
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ402Σ4Σ = Utils.GetOrMakeSet(
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ404Σ4 = Utils.GetOrMakeSet(
            TokenType.STAR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ404Σ17 = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ404Σ35 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ404Σ36 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ404Σ46 = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ404Σ66 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ404Σ67 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ404Σ71 = Utils.GetOrMakeSet(
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ404Σ72 = Utils.GetOrMakeSet(
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ404Σ72Σ = Utils.GetOrMakeSet(
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ406Σ4 = Utils.GetOrMakeSet(
            TokenType.STAR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ406Σ15 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ406Σ16 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ406Σ52 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ406Σ64 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ406Σ65 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ406Σ75 = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ406Σ95 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ406Σ96 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ406Σ100 = Utils.GetOrMakeSet(
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ406Σ101 = Utils.GetOrMakeSet(
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ406Σ101Σ = Utils.GetOrMakeSet(
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ409Σ28 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ409Σ29 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ409Σ33 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ409Σ45 = Utils.GetOrMakeSet(
            TokenType.ASSIGN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ409Σ46 = Utils.GetOrMakeSet(
            TokenType.ASSIGN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ409Σ50 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ413Σ4 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ414Σ8 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ415Σ12 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ421Σ5 = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ422Σ7 = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ425Σ7 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ425Σ8 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ425Σ42 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ426Σ7 = Utils.GetOrMakeSet(
            TokenType.ASSIGN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ426Σ8 = Utils.GetOrMakeSet(
            TokenType.ASSIGN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ426Σ12 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ427Σ7 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ427Σ8 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ428Σ9 = Utils.GetOrMakeSet(
            TokenType.SLASH,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ430Σ11 = Utils.GetOrMakeSet(
            TokenType.SLASH,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ430Σ11Σ = Utils.GetOrMakeSet(
            TokenType.SLASH
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ433Σ11 = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ433Σ18 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ433Σ19 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ433Σ53 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ434Σ11 = Utils.GetOrMakeSet(
            TokenType.ASSIGN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ437Σ14 = Utils.GetOrMakeSet(
            TokenType.ASSIGN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ438Σ21 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ442Σ7 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ442Σ9 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ444Σ5 = Utils.GetOrMakeSet(
            TokenType.STAR,
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ445Σ7 = Utils.GetOrMakeSet(
            TokenType.STAR,
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ445Σ13 = Utils.GetOrMakeSet(
            TokenType.COLON,
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ445Σ13Σ = Utils.GetOrMakeSet(
            TokenType.COLON,
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ445Σ14 = Utils.GetOrMakeSet(
            TokenType.COLON,
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ445Σ14Σ = Utils.GetOrMakeSet(
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ445Σ18 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ445Σ26 = Utils.GetOrMakeSet(
            TokenType.STAR,
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ447Σ5 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ447Σ6 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ451Σ5 = Utils.GetOrMakeSet(
            TokenType.PLUSASSIGN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ451Σ12 = Utils.GetOrMakeSet(
            TokenType.MINUSASSIGN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ451Σ19 = Utils.GetOrMakeSet(
            TokenType.STARASSIGN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ451Σ26 = Utils.GetOrMakeSet(
            TokenType.ATASSIGN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ451Σ33 = Utils.GetOrMakeSet(
            TokenType.SLASHASSIGN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ451Σ40 = Utils.GetOrMakeSet(
            TokenType.REMASSIGN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ451Σ47 = Utils.GetOrMakeSet(
            TokenType.ANDASSIGN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ451Σ54 = Utils.GetOrMakeSet(
            TokenType.ORASSIGN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ451Σ61 = Utils.GetOrMakeSet(
            TokenType.XORASSIGN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ451Σ68 = Utils.GetOrMakeSet(
            TokenType.LSHIFTASSIGN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ452Σ7 = Utils.GetOrMakeSet(
            TokenType.RSHIFTASSIGN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ452Σ15 = Utils.GetOrMakeSet(
            TokenType.STARSTARASSIGN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ452Σ23 = Utils.GetOrMakeSet(
            TokenType.SLASHSLASHASSIGN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ456Σ4 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ456Σ4Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ458Σ4 = Utils.GetOrMakeSet(
            TokenType.LPAREN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ458Σ8 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ462Σ7 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ462Σ7Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ462Σ7ΣΣ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ462Σ8 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ462Σ8Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ462Σ27 = Utils.GetOrMakeSet(
            TokenType.COLON,
            TokenType.MINUSASSIGN,
            TokenType.PLUSASSIGN,
            TokenType.STARASSIGN,
            TokenType.ATASSIGN,
            TokenType.SLASHASSIGN,
            TokenType.REMASSIGN,
            TokenType.ANDASSIGN,
            TokenType.ORASSIGN,
            TokenType.XORASSIGN,
            TokenType.LSHIFTASSIGN,
            TokenType.RSHIFTASSIGN,
            TokenType.STARSTARASSIGN,
            TokenType.SLASHSLASHASSIGN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ462Σ28 = Utils.GetOrMakeSet(
            TokenType.COLON,
            TokenType.MINUSASSIGN,
            TokenType.PLUSASSIGN,
            TokenType.STARASSIGN,
            TokenType.ATASSIGN,
            TokenType.SLASHASSIGN,
            TokenType.REMASSIGN,
            TokenType.ANDASSIGN,
            TokenType.ORASSIGN,
            TokenType.XORASSIGN,
            TokenType.LSHIFTASSIGN,
            TokenType.RSHIFTASSIGN,
            TokenType.STARSTARASSIGN,
            TokenType.SLASHSLASHASSIGN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ462Σ28Σ = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ462Σ34 = Utils.GetOrMakeSet(
            TokenType.MINUSASSIGN,
            TokenType.PLUSASSIGN,
            TokenType.STARASSIGN,
            TokenType.ATASSIGN,
            TokenType.SLASHASSIGN,
            TokenType.REMASSIGN,
            TokenType.ANDASSIGN,
            TokenType.ORASSIGN,
            TokenType.XORASSIGN,
            TokenType.LSHIFTASSIGN,
            TokenType.RSHIFTASSIGN,
            TokenType.STARSTARASSIGN,
            TokenType.SLASHSLASHASSIGN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ462Σ34Σ = Utils.GetOrMakeSet(
            TokenType.MINUSASSIGN,
            TokenType.PLUSASSIGN,
            TokenType.STARASSIGN,
            TokenType.ATASSIGN,
            TokenType.SLASHASSIGN,
            TokenType.REMASSIGN,
            TokenType.ANDASSIGN,
            TokenType.ORASSIGN,
            TokenType.XORASSIGN,
            TokenType.LSHIFTASSIGN,
            TokenType.RSHIFTASSIGN,
            TokenType.STARSTARASSIGN,
            TokenType.SLASHSLASHASSIGN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ462Σ48 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ462Σ48Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ462Σ49 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ462Σ49Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ463Σ2 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ464Σ3Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ464Σ3ΣΣ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ464Σ3 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ464Σ31 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ464Σ42 = Utils.GetOrMakeSet(
            TokenType.ASSIGN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ464Σ43 = Utils.GetOrMakeSet(
            TokenType.ASSIGN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ464Σ47 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ466Σ3Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ466Σ3 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ466Σ22 = Utils.GetOrMakeSet(
            TokenType.MINUSASSIGN,
            TokenType.PLUSASSIGN,
            TokenType.STARASSIGN,
            TokenType.ATASSIGN,
            TokenType.SLASHASSIGN,
            TokenType.REMASSIGN,
            TokenType.ANDASSIGN,
            TokenType.ORASSIGN,
            TokenType.XORASSIGN,
            TokenType.LSHIFTASSIGN,
            TokenType.RSHIFTASSIGN,
            TokenType.STARSTARASSIGN,
            TokenType.SLASHSLASHASSIGN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ466Σ37 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ466Σ38 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ466Σ38Σ = Utils.GetOrMakeSet(
            TokenType.YIELD
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ466Σ38ΣΣ = Utils.GetOrMakeSet(
            TokenType.YIELD
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ466Σ56 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ466Σ56Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ468Σ3 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ468Σ3Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ468Σ4 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ468Σ6 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ468Σ29 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ468Σ30 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ468Σ30Σ = Utils.GetOrMakeSet(
            TokenType.YIELD
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ468Σ30ΣΣ = Utils.GetOrMakeSet(
            TokenType.YIELD
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ468Σ48 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ468Σ48Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ476Σ26 = Utils.GetOrMakeSet(
            TokenType.MATCH
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ476Σ27 = Utils.GetOrMakeSet(
            TokenType.MATCH
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ477Σ4 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ482Σ25 = Utils.GetOrMakeSet(
            TokenType.CASE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ482Σ26Σ = Utils.GetOrMakeSet(
            TokenType.CASE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ482Σ26 = Utils.GetOrMakeSet(
            TokenType.CASE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ489Σ5 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ490Σ7Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ490Σ7 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ491Σ7 = Utils.GetOrMakeSet(
            TokenType.IF
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ491Σ8 = Utils.GetOrMakeSet(
            TokenType.IF
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ491Σ13 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ493Σ7 = Utils.GetOrMakeSet(
            TokenType.NEWLINE,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CONTINUE,
            TokenType.DEL,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ499Σ4 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ499Σ4Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ501Σ4 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ501Σ4Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ508Σ25 = Utils.GetOrMakeSet(
            TokenType.STAR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ508Σ25Σ = Utils.GetOrMakeSet(
            TokenType.STAR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ508Σ39 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ508Σ39Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ511Σ4 = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ511Σ4Σ = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ513Σ4 = Utils.GetOrMakeSet(
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ513Σ4Σ = Utils.GetOrMakeSet(
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ515Σ4 = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ515Σ4Σ = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ517Σ4 = Utils.GetOrMakeSet(
            TokenType.LPAREN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ517Σ6 = Utils.GetOrMakeSet(
            TokenType.LPAREN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ519Σ4 = Utils.GetOrMakeSet(
            TokenType.LBRACKET,
            TokenType.LPAREN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ519Σ4Σ = Utils.GetOrMakeSet(
            TokenType.LBRACKET,
            TokenType.LPAREN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ521Σ4 = Utils.GetOrMakeSet(
            TokenType.LBRACE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ521Σ4Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ524Σ20 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ526Σ18 = Utils.GetOrMakeSet(
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ526Σ19ΣΣ = Utils.GetOrMakeSet(
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ526Σ19 = Utils.GetOrMakeSet(
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ526Σ19Σ = Utils.GetOrMakeSet(
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ526Σ36Σ = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ526Σ36 = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ526Σ51 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ528Σ16 = Utils.GetOrMakeSet(
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ528Σ32 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ528Σ33 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ528Σ43 = Utils.GetOrMakeSet(
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ532Σ6 = Utils.GetOrMakeSet(
            TokenType.STAR_STAR,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ533Σ10ΣΣ = Utils.GetOrMakeSet(
            TokenType.STAR_STAR,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ533Σ10 = Utils.GetOrMakeSet(
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ533Σ10Σ = Utils.GetOrMakeSet(
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ533Σ23 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ533Σ24 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ533Σ34 = Utils.GetOrMakeSet(
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ533Σ53 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ533Σ54 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ535Σ10Σ = Utils.GetOrMakeSet(
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ535Σ10 = Utils.GetOrMakeSet(
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ535Σ28 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ535Σ29 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ543Σ4 = Utils.GetOrMakeSet(
            TokenType.NONE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ545Σ4 = Utils.GetOrMakeSet(
            TokenType.TRUE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ547Σ4 = Utils.GetOrMakeSet(
            TokenType.FALSE
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ549Σ4 = Utils.GetOrMakeSet(
            TokenType.MINUS,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ549Σ4Σ = Utils.GetOrMakeSet(
            TokenType.MINUS,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ551Σ4 = Utils.GetOrMakeSet(
            TokenType.STRING_LITERAL
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ551Σ4Σ = Utils.GetOrMakeSet(
            TokenType.STRING_LITERAL
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ555Σ4 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ555Σ21 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ555Σ22 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ555Σ32 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ555Σ51 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ555Σ52 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ559Σ4 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ559Σ30 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ559Σ31 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ559Σ31Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ563Σ5 = Utils.GetOrMakeSet(
            TokenType.LBRACKET
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ563Σ9 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ563Σ10 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ563Σ10Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ565Σ5 = Utils.GetOrMakeSet(
            TokenType.LPAREN
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ565Σ9 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ565Σ10Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ565Σ10 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ569Σ4 = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ572Σ7 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ573Σ11 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ573Σ11Σ = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ573Σ16 = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ574Σ11 = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ574Σ27 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ574Σ28 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ576Σ11 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ576Σ11Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ576Σ30 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ576Σ31 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ576Σ41 = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ576Σ58 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ576Σ59 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ582Σ4 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ583Σ4 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ586Σ8 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ587Σ15 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ591Σ29 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ593Σ19 = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ593Σ34 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ593Σ35 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ593Σ45 = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ595Σ13 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ595Σ27 = Utils.GetOrMakeSet(
            TokenType.BIT_OR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ595Σ28 = Utils.GetOrMakeSet(
            TokenType.BIT_OR
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ595Σ32 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ597Σ11 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ597Σ21 = Utils.GetOrMakeSet(
            TokenType.AS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ597Σ22 = Utils.GetOrMakeSet(
            TokenType.AS
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ600Σ4Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ600Σ4 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ600Σ33 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ600Σ34 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ600Σ34Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ602Σ4 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ602Σ4Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ605Σ20 = Utils.GetOrMakeSet(
            TokenType.DOT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ605Σ21 = Utils.GetOrMakeSet(
            TokenType.DOT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ607Σ41 = Utils.GetOrMakeSet(
            TokenType.DOT
        );

        private static readonly HashSet<TokenType> first_setΣPython_javaccΣ607Σ42 = Utils.GetOrMakeSet(
            TokenType.DOT
        );

    // ==================================================================
    // EnumSets that represent the various expansions' follow set (i.e. the set of tokens that can immediately follow this)
    // ==================================================================
        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ234Σ54Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ203Σ14 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ203Σ20 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ205Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ207Σ14 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ211Σ16 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ211Σ26 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ215Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ217Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ219Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ221Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ223Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ225Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ227Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ229Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ231Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ233Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ235Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ237Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ239Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ241Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ243Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ245Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ247Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ249Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ251Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ253Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ255Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ257Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ259Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ261Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ263Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ265Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ267Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ271Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ273Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ275Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ277Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ279Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ281Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ283Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ285Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ287Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ289Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ291Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ293Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ295Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ297Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ299Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ301Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ303Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ305Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ307Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ309Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ313Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ315Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ317Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ319Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ321Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ323Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ325Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ327Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ329Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ331Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ333Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ335Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ337Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ339Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ341Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ343Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ345Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ347Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ349Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ351Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ353Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ355Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ357Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ359Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ361Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ363Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ365Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ367Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ369Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ371Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ373Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ375Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ377Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ379Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ381Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ383Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ385Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ387Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ397Σ10 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ402Σ17 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ404Σ17 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ406Σ17 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ409Σ39 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ409Σ65 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ410Σ9 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ410Σ44 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ411Σ39 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ414Σ16 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ414Σ30 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ414Σ40 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ414Σ44 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ420Σ22 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ420Σ42 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ420Σ62 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ420Σ82 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ421Σ24 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ421Σ44 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ421Σ64 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ421Σ84 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ423Σ25 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ423Σ43 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ423Σ71 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ423Σ89 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ425Σ25 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ425Σ43 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ425Σ69 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ425Σ87 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ427Σ25 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ427Σ43 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ427Σ50 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ427Σ66 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ429Σ25 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ429Σ43 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ429Σ53 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ429Σ69 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ431Σ21 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ431Σ26 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ431Σ36 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ433Σ21 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ433Σ27 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ433Σ38 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ435Σ24 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ435Σ39 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ435Σ64 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ435Σ81 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ437Σ24 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ437Σ39 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ437Σ65 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ437Σ82 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ439Σ24 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ439Σ39 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ439Σ46 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ439Σ62 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ441Σ24 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ441Σ39 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ441Σ49 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ441Σ65 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ443Σ21 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ443Σ26 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ443Σ36 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ445Σ21 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ445Σ27 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ445Σ38 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ447Σ22 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ447Σ28 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ447Σ34 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ447Σ40 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ447Σ46 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ447Σ52 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ448Σ24 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ448Σ31 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ448Σ38 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ448Σ45 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ448Σ52 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ448Σ59 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ448Σ66 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ448Σ73 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ450Σ22 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ450Σ28 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ450Σ34 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ450Σ41 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ450Σ48 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ450Σ55 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ450Σ62 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ450Σ69 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ450Σ76 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ450Σ83 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ452Σ21 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ454Σ21 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ460Σ11 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPythonLexer_javaccΣ460Σ38 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ24Σ4 = Utils.GetOrMakeSet(
            TokenType.EOF,
            TokenType.AT,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.ASYNC,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CLASS,
            TokenType.CONTINUE,
            TokenType.DEF,
            TokenType.DEL,
            TokenType.FOR,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.IF,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.MATCH,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.TRY,
            TokenType.WHILE,
            TokenType.WITH,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ24Σ5 = Utils.GetOrMakeSet(
            TokenType.EOF,
            TokenType.AT,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.ASYNC,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CLASS,
            TokenType.CONTINUE,
            TokenType.DEF,
            TokenType.DEL,
            TokenType.FOR,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.IF,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.MATCH,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.TRY,
            TokenType.WHILE,
            TokenType.WITH,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ24Σ5Σ = Utils.GetOrMakeSet(
            TokenType.EOF,
            TokenType.AT,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.ASYNC,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CLASS,
            TokenType.CONTINUE,
            TokenType.DEF,
            TokenType.DEL,
            TokenType.FOR,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.IF,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.MATCH,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.TRY,
            TokenType.WHILE,
            TokenType.WITH,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ25Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ30Σ3 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ30Σ3Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ30Σ17 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ30Σ17Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ30Σ31 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ30Σ31Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ30Σ45 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ30Σ45Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ30Σ59 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ30Σ59Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ30Σ69 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ30Σ69Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ34Σ3 = Utils.GetOrMakeSet(
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ34Σ4 = Utils.GetOrMakeSet(
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ34Σ4Σ = Utils.GetOrMakeSet(
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ35Σ3 = Utils.GetOrMakeSet(
            TokenType.MINUS,
            TokenType.PLUS
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ36Σ3 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ36Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ36Σ4Σ = Utils.GetOrMakeSet(
            TokenType.COMPLEX
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ36Σ5 = Utils.GetOrMakeSet(
            TokenType.COMPLEX
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ36Σ5Σ = Utils.GetOrMakeSet(
            TokenType.COMPLEX
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ36Σ5ΣΣ = Utils.GetOrMakeSet(
            TokenType.COMPLEX
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ36Σ9 = Utils.GetOrMakeSet(
            TokenType.COMPLEX
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ36Σ9Σ = Utils.GetOrMakeSet(
            TokenType.COMPLEX
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ36Σ14 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ39Σ11 = Utils.GetOrMakeSet(
            TokenType.STRING_LITERAL
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ39Σ12 = Utils.GetOrMakeSet(
            TokenType.STRING_LITERAL
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ39Σ12Σ = Utils.GetOrMakeSet(
            TokenType.STRING_LITERAL
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ42Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ42Σ5Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ44Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ44Σ5Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ46Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ46Σ5Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ48Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ48Σ5Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ50Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ50Σ5Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ52Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ52Σ5Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ54Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ54Σ5Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ56Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ56Σ5Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ56Σ6 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ56Σ6Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ56Σ6ΣΣ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ56Σ14 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ56Σ14Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ56Σ23 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ56Σ23Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ58Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ58Σ5Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ58Σ6 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ58Σ6Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ58Σ6ΣΣ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ58Σ17 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ58Σ17Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ60Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ60Σ5Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ60Σ6 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ60Σ6Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ60Σ6ΣΣ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ60Σ16 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ60Σ16Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ60Σ27 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ60Σ27Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ60Σ34 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ60Σ34Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ62Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ62Σ5Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ66Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ66Σ5Σ = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ66Σ6 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ66Σ6Σ = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ66Σ18 = Utils.GetOrMakeSet(
            TokenType.COLON,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ66Σ27 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ66Σ28 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ66Σ28Σ = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ66Σ40 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ66Σ41 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ66Σ41Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ66Σ45 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ66Σ46 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ66Σ46Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ68Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ68Σ5Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ68Σ6 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ68Σ9 = Utils.GetOrMakeSet(
            TokenType.COLONEQUALS
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ68Σ16 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ68Σ22 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ71Σ10 = Utils.GetOrMakeSet(
            TokenType.COLON,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ71Σ14 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.RBRACKET
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ71Σ20 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.RBRACKET
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ71Σ21 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.RBRACKET
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ71Σ21Σ = Utils.GetOrMakeSet(
            TokenType.COLON,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ71Σ31 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.RBRACKET
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ71Σ39 = Utils.GetOrMakeSet(
            TokenType.RBRACKET
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ71Σ40 = Utils.GetOrMakeSet(
            TokenType.RBRACKET
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ71Σ40Σ = Utils.GetOrMakeSet(
            TokenType.RBRACKET
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ71Σ45 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ74Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ74Σ4Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ76Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ76Σ4Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ78Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ78Σ4Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ81Σ24 = Utils.GetOrMakeSet(
            TokenType.NEWLINE,
            TokenType.SEMICOLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ81Σ39 = Utils.GetOrMakeSet(
            TokenType.NEWLINE,
            TokenType.SEMICOLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ81Σ40 = Utils.GetOrMakeSet(
            TokenType.NEWLINE,
            TokenType.SEMICOLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ81Σ40Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CONTINUE,
            TokenType.DEL,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ81Σ50 = Utils.GetOrMakeSet(
            TokenType.NEWLINE,
            TokenType.SEMICOLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ81Σ67 = Utils.GetOrMakeSet(
            TokenType.NEWLINE
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ81Σ68 = Utils.GetOrMakeSet(
            TokenType.NEWLINE
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ81Σ68Σ = Utils.GetOrMakeSet(
            TokenType.NEWLINE
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ81Σ73 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ84Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ84Σ4Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ86Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ86Σ4Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ88Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ88Σ4Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ90Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ90Σ4Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ92Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ92Σ4Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ94Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ94Σ4Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ96Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ96Σ4Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ98Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ98Σ4Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ100Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ100Σ4Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ102Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ102Σ4Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ104Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ104Σ4Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ106Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ106Σ4Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ108Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ108Σ4Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ112Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ112Σ5Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ114Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ114Σ5Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ116Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ116Σ5Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ118Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ118Σ5Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ120Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ120Σ5Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ122Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ122Σ5Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ124Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ124Σ5Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ127Σ19 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ127Σ28 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ127Σ29 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ127Σ29Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ129Σ19 = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ129Σ28 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ129Σ35 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ129Σ36 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ129Σ36Σ = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ129Σ40 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ131Σ21 = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ131Σ32 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ131Σ39 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ131Σ40 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ131Σ40Σ = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ131Σ44 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ133Σ19 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ133Σ28 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ133Σ39 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ133Σ40 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ133Σ40Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ133Σ44 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ135Σ18 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ135Σ26 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ135Σ28 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ135Σ28Σ = Utils.GetOrMakeSet(
            TokenType.FROM
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ135Σ39 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ135Σ40 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ135Σ40Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ135Σ47 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ138Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ138Σ5Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ140Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ140Σ5Σ = Utils.GetOrMakeSet(
            TokenType.EOF
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ140Σ14 = Utils.GetOrMakeSet(
            TokenType.AT,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.ASYNC,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CLASS,
            TokenType.CONTINUE,
            TokenType.DEF,
            TokenType.DEL,
            TokenType.FOR,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.IF,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.MATCH,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.TRY,
            TokenType.WHILE,
            TokenType.WITH,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ140Σ22 = Utils.GetOrMakeSet(
            TokenType.EOF,
            TokenType.AT,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.ASYNC,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CLASS,
            TokenType.CONTINUE,
            TokenType.DEF,
            TokenType.DEL,
            TokenType.FOR,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.IF,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.MATCH,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.TRY,
            TokenType.WHILE,
            TokenType.WITH,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ140Σ23Σ = Utils.GetOrMakeSet(
            TokenType.EOF,
            TokenType.AT,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.ASYNC,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CLASS,
            TokenType.CONTINUE,
            TokenType.DEF,
            TokenType.DEL,
            TokenType.FOR,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.IF,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.MATCH,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.TRY,
            TokenType.WHILE,
            TokenType.WITH,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ140Σ23 = Utils.GetOrMakeSet(
            TokenType.EOF,
            TokenType.AT,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.ASYNC,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CLASS,
            TokenType.CONTINUE,
            TokenType.DEF,
            TokenType.DEL,
            TokenType.FOR,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.IF,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.MATCH,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.TRY,
            TokenType.WHILE,
            TokenType.WITH,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ140Σ34 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ143Σ13 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ143Σ20 = Utils.GetOrMakeSet(
            TokenType.NEWLINE,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CONTINUE,
            TokenType.DEL,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ143Σ24 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ145Σ15 = Utils.GetOrMakeSet(
            TokenType.COLON,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ145Σ24 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ145Σ26 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ145Σ26Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ145Σ27 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ145Σ27Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ145Σ32 = Utils.GetOrMakeSet(
            TokenType.COLON,
            TokenType.AS
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ145Σ43 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ145Σ44 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ145Σ44Σ = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ145Σ49 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ145Σ59 = Utils.GetOrMakeSet(
            TokenType.NEWLINE,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CONTINUE,
            TokenType.DEL,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ145Σ63 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ148Σ5 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ148Σ10 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ148Σ26 = Utils.GetOrMakeSet(
            TokenType.NEWLINE,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CONTINUE,
            TokenType.DEL,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ148Σ30 = Utils.GetOrMakeSet(
            TokenType.ELIF,
            TokenType.ELSE
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ149Σ6 = Utils.GetOrMakeSet(
            TokenType.ELIF,
            TokenType.ELSE
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ149Σ7 = Utils.GetOrMakeSet(
            TokenType.ELIF,
            TokenType.ELSE
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ149Σ7Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ149Σ14 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ149Σ30 = Utils.GetOrMakeSet(
            TokenType.NEWLINE,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CONTINUE,
            TokenType.DEL,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ149Σ34 = Utils.GetOrMakeSet(
            TokenType.ELIF,
            TokenType.ELSE
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ150Σ6 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ150Σ7 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ150Σ7Σ = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ150Σ14 = Utils.GetOrMakeSet(
            TokenType.NEWLINE,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CONTINUE,
            TokenType.DEL,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ150Σ18 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ153Σ16 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ153Σ26 = Utils.GetOrMakeSet(
            TokenType.NEWLINE,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CONTINUE,
            TokenType.DEL,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ153Σ30 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ155Σ18 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ155Σ26 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ155Σ42 = Utils.GetOrMakeSet(
            TokenType.NEWLINE,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CONTINUE,
            TokenType.DEL,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ155Σ46 = Utils.GetOrMakeSet(
            TokenType.ELSE
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ155Σ52 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ155Σ53 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ155Σ53Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ158Σ5 = Utils.GetOrMakeSet(
            TokenType.WITH
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ158Σ6 = Utils.GetOrMakeSet(
            TokenType.WITH
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ158Σ6Σ = Utils.GetOrMakeSet(
            TokenType.WITH
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ158Σ15 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ159Σ5 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ160Σ9 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ160Σ9Σ = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ160Σ14 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ160Σ14Σ = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ160Σ37 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ160Σ44 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ162Σ9 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ162Σ9Σ = Utils.GetOrMakeSet(
            TokenType.COLON,
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ162Σ18 = Utils.GetOrMakeSet(
            TokenType.COLON,
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ162Σ19 = Utils.GetOrMakeSet(
            TokenType.COLON,
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ162Σ19Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ162Σ23 = Utils.GetOrMakeSet(
            TokenType.COLON,
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ164Σ5 = Utils.GetOrMakeSet(
            TokenType.NEWLINE,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CONTINUE,
            TokenType.DEL,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ164Σ9 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ167Σ31 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ167Σ35 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ167Σ44 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ167Σ45 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ167Σ52 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ167Σ56 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ167Σ67 = Utils.GetOrMakeSet(
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ167Σ68 = Utils.GetOrMakeSet(
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ167Σ68Σ = Utils.GetOrMakeSet(
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ167Σ73 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ169Σ12 = Utils.GetOrMakeSet(
            TokenType.AS
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ169Σ23 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ169Σ24 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ169Σ24Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ169Σ29 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ172Σ4 = Utils.GetOrMakeSet(
            TokenType.FOR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ172Σ5 = Utils.GetOrMakeSet(
            TokenType.FOR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ172Σ5Σ = Utils.GetOrMakeSet(
            TokenType.FOR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ172Σ14 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ173Σ4 = Utils.GetOrMakeSet(
            TokenType.IN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ173Σ16 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ173Σ21 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ173Σ37 = Utils.GetOrMakeSet(
            TokenType.NEWLINE,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CONTINUE,
            TokenType.DEL,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ174Σ4 = Utils.GetOrMakeSet(
            TokenType.ELSE
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ174Σ10 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ174Σ11 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ174Σ11Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ178Σ4 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ178Σ10 = Utils.GetOrMakeSet(
            TokenType.NEWLINE,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CONTINUE,
            TokenType.DEL,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ178Σ14 = Utils.GetOrMakeSet(
            TokenType.EXCEPT,
            TokenType.FINALLY
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ179Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ180Σ8 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ180Σ8Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ180Σ8ΣΣ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ182Σ8 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ182Σ8Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ182Σ9 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ182Σ9Σ = Utils.GetOrMakeSet(
            TokenType.EXCEPT,
            TokenType.FINALLY,
            TokenType.ELSE
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ182Σ10Σ = Utils.GetOrMakeSet(
            TokenType.EXCEPT,
            TokenType.FINALLY,
            TokenType.ELSE
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ182Σ10 = Utils.GetOrMakeSet(
            TokenType.EXCEPT,
            TokenType.FINALLY,
            TokenType.ELSE
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ182Σ24 = Utils.GetOrMakeSet(
            TokenType.FINALLY
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ182Σ25Σ = Utils.GetOrMakeSet(
            TokenType.FINALLY
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ182Σ25 = Utils.GetOrMakeSet(
            TokenType.FINALLY
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ182Σ36 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ182Σ37 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ182Σ37Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ186Σ16 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ186Σ22 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ186Σ40 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ186Σ41 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ186Σ48 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ186Σ52 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ186Σ72 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ186Σ73 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ186Σ73Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ188Σ19 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ188Σ21 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ188Σ24 = Utils.GetOrMakeSet(
            TokenType.COLONEQUALS
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ188Σ31 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ188Σ38 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ190Σ14 = Utils.GetOrMakeSet(
            TokenType.DOT
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ190Σ21 = Utils.GetOrMakeSet(
            TokenType.DOT
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ190Σ22 = Utils.GetOrMakeSet(
            TokenType.DOT
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ190Σ25 = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ190Σ29 = Utils.GetOrMakeSet(
            TokenType.DOT
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ192Σ19 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ192Σ19Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ192Σ32 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ192Σ32Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ192Σ46 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ192Σ46Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ194Σ19 = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ194Σ28 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.AS
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ194Σ39 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ194Σ40 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ194Σ40Σ = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ194Σ45 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ194Σ53 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ194Σ54 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ194Σ54Σ = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ194Σ58 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.AS
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ194Σ69 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ194Σ70 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ194Σ70Σ = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ194Σ75 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ196Σ20 = Utils.GetOrMakeSet(
            TokenType.DOT,
            TokenType.ELLIPSIS,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ196Σ27 = Utils.GetOrMakeSet(
            TokenType.DOT,
            TokenType.ELLIPSIS,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ196Σ28 = Utils.GetOrMakeSet(
            TokenType.DOT,
            TokenType.ELLIPSIS,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ196Σ28Σ = Utils.GetOrMakeSet(
            TokenType.DOT,
            TokenType.ELLIPSIS,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ196Σ28ΣΣ = Utils.GetOrMakeSet(
            TokenType.DOT,
            TokenType.ELLIPSIS,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ196Σ34 = Utils.GetOrMakeSet(
            TokenType.DOT,
            TokenType.ELLIPSIS,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ196Σ34Σ = Utils.GetOrMakeSet(
            TokenType.DOT,
            TokenType.ELLIPSIS,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ196Σ42 = Utils.GetOrMakeSet(
            TokenType.IMPORT
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ196Σ58 = Utils.GetOrMakeSet(
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ196Σ68 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ198Σ20 = Utils.GetOrMakeSet(
            TokenType.DOT,
            TokenType.ELLIPSIS
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ198Σ27 = Utils.GetOrMakeSet(
            TokenType.DOT,
            TokenType.ELLIPSIS,
            TokenType.IMPORT
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ198Σ28 = Utils.GetOrMakeSet(
            TokenType.DOT,
            TokenType.ELLIPSIS,
            TokenType.IMPORT
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ198Σ28Σ = Utils.GetOrMakeSet(
            TokenType.DOT,
            TokenType.ELLIPSIS,
            TokenType.IMPORT
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ198Σ28ΣΣ = Utils.GetOrMakeSet(
            TokenType.DOT,
            TokenType.ELLIPSIS,
            TokenType.IMPORT
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ198Σ34 = Utils.GetOrMakeSet(
            TokenType.DOT,
            TokenType.ELLIPSIS,
            TokenType.IMPORT
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ198Σ34Σ = Utils.GetOrMakeSet(
            TokenType.DOT,
            TokenType.ELLIPSIS,
            TokenType.IMPORT
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ198Σ42 = Utils.GetOrMakeSet(
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ198Σ56 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ201Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ201Σ4Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ203Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ203Σ4Σ = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.AS
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ203Σ11 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ203Σ12 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ203Σ12Σ = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ203Σ17 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ203Σ25 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ203Σ26 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ203Σ26Σ = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ203Σ30 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.AS
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ203Σ42 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ203Σ43 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ203Σ43Σ = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ203Σ48 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ203Σ58 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ203Σ59 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ203Σ59Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ205Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ205Σ4Σ = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ205Σ8 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.RPAREN,
            TokenType.AS
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ205Σ15 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ205Σ16 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ205Σ16Σ = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ205Σ21 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ205Σ29 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ205Σ30 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ205Σ30Σ = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ205Σ34 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.RPAREN,
            TokenType.AS
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ205Σ46 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ205Σ47 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ205Σ47Σ = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ205Σ52 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ205Σ62 = Utils.GetOrMakeSet(
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ205Σ63 = Utils.GetOrMakeSet(
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ205Σ63Σ = Utils.GetOrMakeSet(
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ205Σ68 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ205Σ72 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ205Σ73 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ205Σ73Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ209Σ6 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ209Σ6Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ209Σ10 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ211Σ6 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ211Σ6Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ215Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ215Σ5Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ215Σ9 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ217Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ217Σ5Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ220Σ19 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ220Σ34 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ220Σ35 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ220Σ35Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ220Σ45 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ220Σ62 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ220Σ63 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ220Σ63Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ222Σ24 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ222Σ44 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ222Σ45 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ222Σ45Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ222Σ55 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ222Σ77 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ222Σ78 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ222Σ78Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ224Σ13 = Utils.GetOrMakeSet(
            TokenType.BIT_OR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ224Σ24 = Utils.GetOrMakeSet(
            TokenType.BIT_OR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ224Σ25 = Utils.GetOrMakeSet(
            TokenType.BIT_OR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ224Σ25Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ224Σ29 = Utils.GetOrMakeSet(
            TokenType.BIT_OR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ226Σ14 = Utils.GetOrMakeSet(
            TokenType.XOR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ226Σ25 = Utils.GetOrMakeSet(
            TokenType.XOR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ226Σ26 = Utils.GetOrMakeSet(
            TokenType.XOR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ226Σ26Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ226Σ30 = Utils.GetOrMakeSet(
            TokenType.XOR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ228Σ14 = Utils.GetOrMakeSet(
            TokenType.BIT_AND
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ228Σ30 = Utils.GetOrMakeSet(
            TokenType.BIT_AND
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ228Σ31 = Utils.GetOrMakeSet(
            TokenType.BIT_AND
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ228Σ31Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ228Σ35 = Utils.GetOrMakeSet(
            TokenType.BIT_AND
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ230Σ19 = Utils.GetOrMakeSet(
            TokenType.LSHIFT,
            TokenType.RSHIFT
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ230Σ38 = Utils.GetOrMakeSet(
            TokenType.LSHIFT,
            TokenType.RSHIFT
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ230Σ39 = Utils.GetOrMakeSet(
            TokenType.LSHIFT,
            TokenType.RSHIFT
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ230Σ39Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ230Σ40 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ230Σ40Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ230Σ40ΣΣ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ230Σ47 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ230Σ47Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ230Σ53 = Utils.GetOrMakeSet(
            TokenType.LSHIFT,
            TokenType.RSHIFT
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ232Σ22 = Utils.GetOrMakeSet(
            TokenType.MINUS,
            TokenType.PLUS
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ232Σ47 = Utils.GetOrMakeSet(
            TokenType.MINUS,
            TokenType.PLUS
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ232Σ48 = Utils.GetOrMakeSet(
            TokenType.MINUS,
            TokenType.PLUS
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ232Σ48Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ232Σ49 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ232Σ49Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ232Σ49ΣΣ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ232Σ53 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ232Σ53Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ232Σ58 = Utils.GetOrMakeSet(
            TokenType.MINUS,
            TokenType.PLUS
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ234Σ28 = Utils.GetOrMakeSet(
            TokenType.AT,
            TokenType.STAR,
            TokenType.SLASH,
            TokenType.PERCENT,
            TokenType._TOKEN_100
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ234Σ44 = Utils.GetOrMakeSet(
            TokenType.AT,
            TokenType.STAR,
            TokenType.SLASH,
            TokenType.PERCENT,
            TokenType._TOKEN_100
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ234Σ45 = Utils.GetOrMakeSet(
            TokenType.AT,
            TokenType.STAR,
            TokenType.SLASH,
            TokenType.PERCENT,
            TokenType._TOKEN_100
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ234Σ45Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ234Σ46 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ234Σ46Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ234Σ46ΣΣ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ234Σ50 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ234Σ50Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ234Σ54 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ234Σ59 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ234Σ59Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ234Σ63 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ234Σ63Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ234Σ68 = Utils.GetOrMakeSet(
            TokenType.AT,
            TokenType.STAR,
            TokenType.SLASH,
            TokenType.PERCENT,
            TokenType._TOKEN_100
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ236Σ19 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ236Σ19Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ236Σ27 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ236Σ27Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ236Σ28 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ236Σ28Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ236Σ28ΣΣ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ236Σ34 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ236Σ34Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ236Σ40 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ236Σ40Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ236Σ45 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ238Σ9 = Utils.GetOrMakeSet(
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ238Σ22 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ238Σ23 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ238Σ23Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ238Σ28 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ241Σ9 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ241Σ9Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.RPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ241Σ13 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ241Σ14 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ241Σ14Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ241Σ14ΣΣ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ241Σ20 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ241Σ20Σ = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ241Σ40 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ242Σ5 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.RPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ242Σ9 = Utils.GetOrMakeSet(
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ242Σ10 = Utils.GetOrMakeSet(
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ242Σ10Σ = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ242Σ30 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.RPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ242Σ34 = Utils.GetOrMakeSet(
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ242Σ35 = Utils.GetOrMakeSet(
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ242Σ35Σ = Utils.GetOrMakeSet(
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ242Σ58 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ245Σ9 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ245Σ13 = Utils.GetOrMakeSet(
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ245Σ14Σ = Utils.GetOrMakeSet(
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ245Σ14ΣΣ = Utils.GetOrMakeSet(
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ245Σ14 = Utils.GetOrMakeSet(
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ245Σ32 = Utils.GetOrMakeSet(
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ245Σ32Σ = Utils.GetOrMakeSet(
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ245Σ49 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ247Σ16 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ247Σ17 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ247Σ17Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ247Σ26 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ250Σ4 = Utils.GetOrMakeSet(
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.DOT
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ251Σ4 = Utils.GetOrMakeSet(
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.DOT
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ252Σ8 = Utils.GetOrMakeSet(
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.DOT
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ252Σ8Σ = Utils.GetOrMakeSet(
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.DOT
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ252Σ8ΣΣ = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ252Σ12 = Utils.GetOrMakeSet(
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.DOT
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ254Σ8Σ = Utils.GetOrMakeSet(
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.DOT
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ254Σ8 = Utils.GetOrMakeSet(
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.DOT
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ256Σ8Σ = Utils.GetOrMakeSet(
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.DOT
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ256Σ8 = Utils.GetOrMakeSet(
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.DOT
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ258Σ8Σ = Utils.GetOrMakeSet(
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.DOT
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ258Σ8 = Utils.GetOrMakeSet(
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.DOT
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ263Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ263Σ5Σ = Utils.GetOrMakeSet(
            TokenType.FROM
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ263Σ13 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ263Σ25 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ265Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ265Σ5Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ265Σ13 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ265Σ14 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ265Σ14Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ268Σ19 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ270Σ16 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ270Σ16Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ270Σ34 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ270Σ34Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ272Σ14 = Utils.GetOrMakeSet(
            TokenType.AT
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ272Σ15 = Utils.GetOrMakeSet(
            TokenType.AT
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ272Σ15Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ272Σ19 = Utils.GetOrMakeSet(
            TokenType.NEWLINE
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ272Σ35 = Utils.GetOrMakeSet(
            TokenType.AT
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ274Σ14 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ274Σ18 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ277Σ4 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.RPAREN,
            TokenType.STAR,
            TokenType.STAR_STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ278Σ4 = Utils.GetOrMakeSet(
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ279Σ7 = Utils.GetOrMakeSet(
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ279Σ7Σ = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ289Σ7 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ290Σ10 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ291Σ10 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.STAR_STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ292Σ10 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ298Σ7 = Utils.GetOrMakeSet(
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ298Σ8 = Utils.GetOrMakeSet(
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ298Σ8Σ = Utils.GetOrMakeSet(
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ300Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ304Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ304Σ4Σ = Utils.GetOrMakeSet(
            TokenType.ASSIGN,
            TokenType.COLONEQUALS
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ305Σ4 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ306Σ7 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ306Σ7Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ307Σ7 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ309Σ7 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ309Σ7Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ312Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ314Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ314Σ4Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ315Σ7 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ316Σ7 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ316Σ8 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ316Σ8Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ316Σ8ΣΣ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ316Σ14 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ316Σ14Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ318Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ321Σ16 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ321Σ27 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ321Σ31 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ324Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ324Σ5Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ324Σ10 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ326Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ326Σ5Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ329Σ30 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ329Σ56 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ329Σ57 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ329Σ57Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR_STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ329Σ67 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ329Σ95 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ329Σ96 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ329Σ96Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ332Σ8 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ332Σ8Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.RBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR_STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ332Σ12 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ332Σ13 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ332Σ13Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ332Σ13ΣΣ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ332Σ19 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ332Σ19Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ333Σ3 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ334Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ334Σ5Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.RBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR_STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ335Σ5 = Utils.GetOrMakeSet(
            TokenType.RBRACE
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ335Σ6 = Utils.GetOrMakeSet(
            TokenType.RBRACE
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ335Σ6Σ = Utils.GetOrMakeSet(
            TokenType.RBRACE
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ336Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ340Σ12 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ340Σ16 = Utils.GetOrMakeSet(
            TokenType.ASYNC,
            TokenType.FOR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ340Σ35 = Utils.GetOrMakeSet(
            TokenType.RBRACE,
            TokenType.ASYNC,
            TokenType.FOR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ340Σ36Σ = Utils.GetOrMakeSet(
            TokenType.RBRACE,
            TokenType.ASYNC,
            TokenType.FOR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ340Σ36 = Utils.GetOrMakeSet(
            TokenType.RBRACE,
            TokenType.ASYNC,
            TokenType.FOR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ340Σ50 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ342Σ7 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ342Σ11 = Utils.GetOrMakeSet(
            TokenType.RBRACE
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ342Σ32 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ344Σ11 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ344Σ15 = Utils.GetOrMakeSet(
            TokenType.ASYNC,
            TokenType.FOR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ344Σ37 = Utils.GetOrMakeSet(
            TokenType.RBRACE,
            TokenType.ASYNC,
            TokenType.FOR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ344Σ38Σ = Utils.GetOrMakeSet(
            TokenType.RBRACE,
            TokenType.ASYNC,
            TokenType.FOR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ344Σ38 = Utils.GetOrMakeSet(
            TokenType.RBRACE,
            TokenType.ASYNC,
            TokenType.FOR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ344Σ52 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ347Σ5 = Utils.GetOrMakeSet(
            TokenType.CLASS
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ347Σ6Σ = Utils.GetOrMakeSet(
            TokenType.CLASS
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ347Σ6 = Utils.GetOrMakeSet(
            TokenType.CLASS
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ347Σ18 = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ348Σ5 = Utils.GetOrMakeSet(
            TokenType.COLON,
            TokenType.LPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ348Σ12 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ348Σ13Σ = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ348Σ13 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ349Σ5 = Utils.GetOrMakeSet(
            TokenType.NEWLINE,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CONTINUE,
            TokenType.DEL,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ350Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ354Σ5 = Utils.GetOrMakeSet(
            TokenType.ASYNC,
            TokenType.DEF
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ354Σ6Σ = Utils.GetOrMakeSet(
            TokenType.ASYNC,
            TokenType.DEF
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ354Σ6 = Utils.GetOrMakeSet(
            TokenType.ASYNC,
            TokenType.DEF
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ355Σ5 = Utils.GetOrMakeSet(
            TokenType.DEF
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ355Σ6 = Utils.GetOrMakeSet(
            TokenType.DEF
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ355Σ6Σ = Utils.GetOrMakeSet(
            TokenType.DEF
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ356Σ5 = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ357Σ5 = Utils.GetOrMakeSet(
            TokenType.LPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ358Σ5 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.RPAREN,
            TokenType.STAR,
            TokenType.STAR_STAR,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ359Σ5 = Utils.GetOrMakeSet(
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ360Σ5 = Utils.GetOrMakeSet(
            TokenType.COLON,
            TokenType.RARROW
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ361Σ5 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ361Σ6 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ361Σ6Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ361Σ11 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ362Σ5 = Utils.GetOrMakeSet(
            TokenType.NEWLINE,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CONTINUE,
            TokenType.DEL,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ362Σ9 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ365Σ20 = Utils.GetOrMakeSet(
            TokenType.COLON,
            TokenType.COMMA,
            TokenType.STAR,
            TokenType.STAR_STAR,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ365Σ29 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ365Σ40 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ365Σ44 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ371Σ14 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ371Σ14Σ = Utils.GetOrMakeSet(
            TokenType.IF
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ371Σ26 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ371Σ27 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ371Σ27Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ371Σ32 = Utils.GetOrMakeSet(
            TokenType.ELSE
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ371Σ44 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ371Σ51 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ371Σ65 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ371Σ65Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ373Σ15 = Utils.GetOrMakeSet(
            TokenType.OR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ373Σ27 = Utils.GetOrMakeSet(
            TokenType.OR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ373Σ28 = Utils.GetOrMakeSet(
            TokenType.OR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ373Σ28Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ373Σ33 = Utils.GetOrMakeSet(
            TokenType.OR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ375Σ15 = Utils.GetOrMakeSet(
            TokenType.AND
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ375Σ25 = Utils.GetOrMakeSet(
            TokenType.AND
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ375Σ26 = Utils.GetOrMakeSet(
            TokenType.AND
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ375Σ26Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ375Σ32 = Utils.GetOrMakeSet(
            TokenType.AND
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ377Σ13 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ377Σ14 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ377Σ14Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ377Σ22 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ379Σ14 = Utils.GetOrMakeSet(
            TokenType.EQ,
            TokenType.LE,
            TokenType.GE,
            TokenType.NE,
            TokenType.GT,
            TokenType.LT,
            TokenType.IN,
            TokenType.IS,
            TokenType.NOT
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ379Σ24 = Utils.GetOrMakeSet(
            TokenType.EQ,
            TokenType.LE,
            TokenType.GE,
            TokenType.NE,
            TokenType.GT,
            TokenType.LT,
            TokenType.IN,
            TokenType.IS,
            TokenType.NOT
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ379Σ25 = Utils.GetOrMakeSet(
            TokenType.EQ,
            TokenType.LE,
            TokenType.GE,
            TokenType.NE,
            TokenType.GT,
            TokenType.LT,
            TokenType.IN,
            TokenType.IS,
            TokenType.NOT
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ379Σ25Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ379Σ44 = Utils.GetOrMakeSet(
            TokenType.EQ,
            TokenType.LE,
            TokenType.GE,
            TokenType.NE,
            TokenType.GT,
            TokenType.LT,
            TokenType.IN,
            TokenType.IS,
            TokenType.NOT
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ382Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ382Σ4Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ382Σ10 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ382Σ10Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ382Σ16 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ382Σ16Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ382Σ23 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ382Σ23Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ382Σ30 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ382Σ30Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ382Σ37 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ382Σ37Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ384Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ384Σ4Σ = Utils.GetOrMakeSet(
            TokenType.IN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ384Σ5 = Utils.GetOrMakeSet(
            TokenType.IN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ384Σ5Σ = Utils.GetOrMakeSet(
            TokenType.IN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ384Σ12 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ386Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ386Σ4Σ = Utils.GetOrMakeSet(
            TokenType.NOT
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ386Σ9 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ386Σ10 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ386Σ10Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ389Σ14 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ389Σ15 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ389Σ15Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ389Σ20 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ391Σ15 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ391Σ26 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ391Σ27 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ391Σ27Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ391Σ37 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ391Σ50 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ391Σ51 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ391Σ51Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ393Σ15 = Utils.GetOrMakeSet(
            TokenType.FOR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ393Σ16 = Utils.GetOrMakeSet(
            TokenType.FOR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ393Σ16Σ = Utils.GetOrMakeSet(
            TokenType.FOR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ393Σ25 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ393Σ31 = Utils.GetOrMakeSet(
            TokenType.IN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ393Σ43 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ393Σ48 = Utils.GetOrMakeSet(
            TokenType.IF
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ393Σ60 = Utils.GetOrMakeSet(
            TokenType.IF
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ393Σ61 = Utils.GetOrMakeSet(
            TokenType.IF
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ393Σ61Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ393Σ66 = Utils.GetOrMakeSet(
            TokenType.IF
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ395Σ10 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ395Σ14 = Utils.GetOrMakeSet(
            TokenType.ASYNC,
            TokenType.FOR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ395Σ36 = Utils.GetOrMakeSet(
            TokenType.RPAREN,
            TokenType.ASYNC,
            TokenType.FOR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ395Σ37Σ = Utils.GetOrMakeSet(
            TokenType.RPAREN,
            TokenType.ASYNC,
            TokenType.FOR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ395Σ37 = Utils.GetOrMakeSet(
            TokenType.RPAREN,
            TokenType.ASYNC,
            TokenType.FOR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ395Σ51 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ397Σ8 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.RBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ397Σ12 = Utils.GetOrMakeSet(
            TokenType.RBRACKET
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ397Σ13 = Utils.GetOrMakeSet(
            TokenType.RBRACKET
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ397Σ13Σ = Utils.GetOrMakeSet(
            TokenType.RBRACKET
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ397Σ35 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ399Σ12 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ399Σ16 = Utils.GetOrMakeSet(
            TokenType.ASYNC,
            TokenType.FOR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ399Σ38 = Utils.GetOrMakeSet(
            TokenType.RBRACKET,
            TokenType.ASYNC,
            TokenType.FOR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ399Σ39Σ = Utils.GetOrMakeSet(
            TokenType.RBRACKET,
            TokenType.ASYNC,
            TokenType.FOR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ399Σ39 = Utils.GetOrMakeSet(
            TokenType.RBRACKET,
            TokenType.ASYNC,
            TokenType.FOR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ399Σ53 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ402Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ402Σ4Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ404Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ404Σ4Σ = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ404Σ8 = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ404Σ17 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ404Σ35 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ404Σ36 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ404Σ36Σ = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ404Σ46 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ404Σ66 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ404Σ67 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ404Σ67Σ = Utils.GetOrMakeSet(
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ404Σ71 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ404Σ72 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ404Σ72Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ406Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ406Σ4Σ = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ406Σ8 = Utils.GetOrMakeSet(
            TokenType.COLON,
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ406Σ15 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ406Σ16 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ406Σ48 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ406Σ52 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ406Σ64 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ406Σ65 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ406Σ65Σ = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ406Σ75 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ406Σ95 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ406Σ96 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ406Σ96Σ = Utils.GetOrMakeSet(
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ406Σ100 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ406Σ101 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ406Σ101Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ409Σ21 = Utils.GetOrMakeSet(
            TokenType.ASSIGN,
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ409Σ28 = Utils.GetOrMakeSet(
            TokenType.ASSIGN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ409Σ29 = Utils.GetOrMakeSet(
            TokenType.ASSIGN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ409Σ29Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ409Σ33 = Utils.GetOrMakeSet(
            TokenType.ASSIGN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ409Σ45 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ409Σ46 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ409Σ46Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ409Σ50 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ412Σ4 = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ412Σ9 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ413Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ414Σ8 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ415Σ8 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ415Σ12 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ421Σ5 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.STAR,
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ422Σ7 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.STAR,
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ422Σ7Σ = Utils.GetOrMakeSet(
            TokenType.ASSIGN,
            TokenType.COLON,
            TokenType.COMMA,
            TokenType.STAR,
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ425Σ7 = Utils.GetOrMakeSet(
            TokenType.ASSIGN,
            TokenType.COMMA,
            TokenType.STAR,
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ425Σ8 = Utils.GetOrMakeSet(
            TokenType.ASSIGN,
            TokenType.COMMA,
            TokenType.STAR,
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ425Σ38 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ425Σ42 = Utils.GetOrMakeSet(
            TokenType.ASSIGN,
            TokenType.COMMA,
            TokenType.STAR,
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ426Σ7 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.STAR,
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ426Σ8 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.STAR,
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ426Σ8Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ426Σ12 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.STAR,
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ427Σ7 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.STAR,
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ427Σ8 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.STAR,
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ427Σ8Σ = Utils.GetOrMakeSet(
            TokenType.SLASH,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ428Σ9 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.STAR,
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ430Σ11 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.STAR,
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ430Σ11Σ = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.STAR,
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ431Σ11 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.STAR,
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ433Σ11 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.STAR,
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ433Σ11Σ = Utils.GetOrMakeSet(
            TokenType.ASSIGN,
            TokenType.COLON,
            TokenType.COMMA,
            TokenType.STAR,
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ433Σ18 = Utils.GetOrMakeSet(
            TokenType.ASSIGN,
            TokenType.COMMA,
            TokenType.STAR,
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ433Σ19 = Utils.GetOrMakeSet(
            TokenType.ASSIGN,
            TokenType.COMMA,
            TokenType.STAR,
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ433Σ49 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ433Σ53 = Utils.GetOrMakeSet(
            TokenType.ASSIGN,
            TokenType.COMMA,
            TokenType.STAR,
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ434Σ11 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.STAR,
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ437Σ14 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.STAR,
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ438Σ17 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ438Σ21 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.STAR,
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ442Σ7 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.STAR,
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ442Σ9 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.STAR,
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ442Σ9Σ = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.STAR,
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ444Σ5 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ445Σ7 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ445Σ13 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ445Σ13Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ445Σ14 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ445Σ14Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ445Σ14ΣΣ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ445Σ18 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ445Σ18Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ445Σ26 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ447Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ447Σ6 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ447Σ6Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ451Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ451Σ5Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ451Σ12 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ451Σ12Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ451Σ19 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ451Σ19Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ451Σ26 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ451Σ26Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ451Σ33 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ451Σ33Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ451Σ40 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ451Σ40Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ451Σ47 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ451Σ47Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ451Σ54 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ451Σ54Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ451Σ61 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ451Σ61Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ451Σ68 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ451Σ68Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ452Σ7 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ452Σ7Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ452Σ15 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ452Σ15Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ452Σ23 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ452Σ23Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ456Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ456Σ4Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ458Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ458Σ4Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.ELLIPSIS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ458Σ8 = Utils.GetOrMakeSet(
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ458Σ27 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ462Σ7 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ462Σ7Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ462Σ7ΣΣ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ462Σ8 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ462Σ8Σ = Utils.GetOrMakeSet(
            TokenType.COLON,
            TokenType.MINUSASSIGN,
            TokenType.PLUSASSIGN,
            TokenType.STARASSIGN,
            TokenType.ATASSIGN,
            TokenType.SLASHASSIGN,
            TokenType.REMASSIGN,
            TokenType.ANDASSIGN,
            TokenType.ORASSIGN,
            TokenType.XORASSIGN,
            TokenType.LSHIFTASSIGN,
            TokenType.RSHIFTASSIGN,
            TokenType.STARSTARASSIGN,
            TokenType.SLASHSLASHASSIGN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ462Σ27 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ462Σ28 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ462Σ28Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ462Σ28ΣΣ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ462Σ34 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ462Σ34Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ462Σ48 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ462Σ48Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ462Σ49 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ462Σ49Σ = Utils.GetOrMakeSet(
            TokenType.ASSIGN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ462Σ61 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ463Σ2 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ464Σ3Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ464Σ3ΣΣ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ464Σ3 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ464Σ22 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ464Σ31 = Utils.GetOrMakeSet(
            TokenType.ASSIGN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ464Σ42 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ464Σ43 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ464Σ43Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ464Σ47 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ466Σ3Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ466Σ3 = Utils.GetOrMakeSet(
            TokenType.MINUSASSIGN,
            TokenType.PLUSASSIGN,
            TokenType.STARASSIGN,
            TokenType.ATASSIGN,
            TokenType.SLASHASSIGN,
            TokenType.REMASSIGN,
            TokenType.ANDASSIGN,
            TokenType.ORASSIGN,
            TokenType.XORASSIGN,
            TokenType.LSHIFTASSIGN,
            TokenType.RSHIFTASSIGN,
            TokenType.STARSTARASSIGN,
            TokenType.SLASHSLASHASSIGN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ466Σ22 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ466Σ37 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ466Σ38 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ466Σ38Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ466Σ38ΣΣ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ466Σ56 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ466Σ56Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ468Σ3 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ468Σ3Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ468Σ4 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ468Σ6 = Utils.GetOrMakeSet(
            TokenType.ASSIGN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ468Σ18 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ468Σ29 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ468Σ30 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ468Σ30Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ468Σ30ΣΣ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ468Σ48 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ468Σ48Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ476Σ26 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ476Σ27 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ476Σ27Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ477Σ4 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ478Σ4 = Utils.GetOrMakeSet(
            TokenType.NEWLINE
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ480Σ4 = Utils.GetOrMakeSet(
            TokenType.EOF
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ481Σ4 = Utils.GetOrMakeSet(
            TokenType.CASE
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ482Σ25 = Utils.GetOrMakeSet(
            TokenType.EOF,
            TokenType.CASE
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ482Σ26Σ = Utils.GetOrMakeSet(
            TokenType.EOF,
            TokenType.CASE
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ482Σ26 = Utils.GetOrMakeSet(
            TokenType.EOF,
            TokenType.CASE
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ483Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ487Σ5 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ489Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ490Σ7Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ490Σ7 = Utils.GetOrMakeSet(
            TokenType.COLON,
            TokenType.IF
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ491Σ7 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ491Σ8 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ491Σ8Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ491Σ13 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ492Σ7 = Utils.GetOrMakeSet(
            TokenType.NEWLINE,
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType._ASSERT,
            TokenType.AWAIT,
            TokenType.BREAK,
            TokenType.CONTINUE,
            TokenType.DEL,
            TokenType.FROM,
            TokenType.GLOBAL,
            TokenType.FALSE,
            TokenType.IMPORT,
            TokenType.LAMBDA,
            TokenType.NONLOCAL,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PASS,
            TokenType.PEG_PARSER,
            TokenType.RAISE,
            TokenType.RETURN,
            TokenType.TRUE,
            TokenType.YIELD,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ493Σ7 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ499Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ499Σ4Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ501Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ501Σ4Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ505Σ4 = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ505Σ8 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ508Σ25 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ508Σ25Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ508Σ39 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ508Σ39Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ511Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ511Σ4Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ513Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ513Σ4Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ515Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ515Σ4Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ517Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ517Σ6 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ519Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ519Σ4Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ521Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ521Σ4Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ524Σ16 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ524Σ20 = Utils.GetOrMakeSet(
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ524Σ28 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ526Σ18 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ526Σ19ΣΣ = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ526Σ19 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ526Σ19Σ = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ526Σ36Σ = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ526Σ36 = Utils.GetOrMakeSet(
            TokenType.COLON
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ526Σ47 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ526Σ51 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ528Σ16 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ528Σ32 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ528Σ33 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ528Σ33Σ = Utils.GetOrMakeSet(
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ528Σ43 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ531Σ3 = Utils.GetOrMakeSet(
            TokenType.RBRACE,
            TokenType.STAR_STAR,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ532Σ6 = Utils.GetOrMakeSet(
            TokenType.RBRACE
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ533Σ10ΣΣ = Utils.GetOrMakeSet(
            TokenType.RBRACE
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ533Σ10 = Utils.GetOrMakeSet(
            TokenType.RBRACE
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ533Σ10Σ = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.RBRACE
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ533Σ23 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.RBRACE
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ533Σ24 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.RBRACE
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ533Σ24Σ = Utils.GetOrMakeSet(
            TokenType.STAR_STAR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ533Σ34 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.RBRACE
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ533Σ53 = Utils.GetOrMakeSet(
            TokenType.RBRACE
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ533Σ54 = Utils.GetOrMakeSet(
            TokenType.RBRACE
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ533Σ54Σ = Utils.GetOrMakeSet(
            TokenType.RBRACE
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ535Σ10Σ = Utils.GetOrMakeSet(
            TokenType.RBRACE
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ535Σ10 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.RBRACE
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ535Σ28 = Utils.GetOrMakeSet(
            TokenType.RBRACE
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ535Σ29 = Utils.GetOrMakeSet(
            TokenType.RBRACE
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ535Σ29Σ = Utils.GetOrMakeSet(
            TokenType.RBRACE
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ537Σ3 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ540Σ21 = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ540Σ26 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ543Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ543Σ4Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ545Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ545Σ4Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ547Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ547Σ4Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ549Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ549Σ4Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ551Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ551Σ4Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ555Σ4 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ555Σ21 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ555Σ22 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ555Σ22Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ555Σ32 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ555Σ51 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ555Σ52 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ555Σ52Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ559Σ4 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ559Σ21 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ559Σ30 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ559Σ31 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ559Σ31Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ563Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ563Σ5Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.RBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ563Σ9 = Utils.GetOrMakeSet(
            TokenType.RBRACKET
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ563Σ10 = Utils.GetOrMakeSet(
            TokenType.RBRACKET
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ563Σ10Σ = Utils.GetOrMakeSet(
            TokenType.RBRACKET
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ563Σ32 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ565Σ5 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ565Σ5Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.RPAREN,
            TokenType.STAR,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ565Σ9 = Utils.GetOrMakeSet(
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ565Σ10Σ = Utils.GetOrMakeSet(
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ565Σ10 = Utils.GetOrMakeSet(
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ565Σ31 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ569Σ4 = Utils.GetOrMakeSet(
            TokenType.LPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ570Σ4 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.RPAREN,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ572Σ7 = Utils.GetOrMakeSet(
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ573Σ11 = Utils.GetOrMakeSet(
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ573Σ11Σ = Utils.GetOrMakeSet(
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ573Σ16 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ573Σ16Σ = Utils.GetOrMakeSet(
            TokenType.ASSIGN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ573Σ23 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ574Σ11 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ574Σ27 = Utils.GetOrMakeSet(
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ574Σ28 = Utils.GetOrMakeSet(
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ574Σ28Σ = Utils.GetOrMakeSet(
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ576Σ11 = Utils.GetOrMakeSet(
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ576Σ11Σ = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ576Σ30 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ576Σ31 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ576Σ31Σ = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ576Σ41 = Utils.GetOrMakeSet(
            TokenType.COMMA,
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ576Σ58 = Utils.GetOrMakeSet(
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ576Σ59 = Utils.GetOrMakeSet(
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ576Σ59Σ = Utils.GetOrMakeSet(
            TokenType.RPAREN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ578Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ582Σ4 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ583Σ4 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ586Σ8 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ587Σ11 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ587Σ15 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ591Σ18 = Utils.GetOrMakeSet(
            TokenType.ASSIGN
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ591Σ25 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ591Σ29 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ593Σ19 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ593Σ34 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ593Σ35 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ593Σ35Σ = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ593Σ45 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ595Σ13 = Utils.GetOrMakeSet(
            TokenType.BIT_OR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ595Σ27 = Utils.GetOrMakeSet(
            TokenType.BIT_OR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ595Σ28 = Utils.GetOrMakeSet(
            TokenType.BIT_OR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ595Σ28Σ = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.MINUS,
            TokenType.FALSE,
            TokenType.NONE,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ595Σ32 = Utils.GetOrMakeSet(
            TokenType.BIT_OR
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ597Σ11 = Utils.GetOrMakeSet(
            TokenType.AS
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ597Σ21 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ597Σ22 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ597Σ22Σ = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ597Σ27 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ600Σ4Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ600Σ4 = Utils.GetOrMakeSet(
            TokenType.COMMA
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ600Σ24 = Utils.GetOrMakeSet(
            TokenType.LBRACE,
            TokenType.LBRACKET,
            TokenType.LPAREN,
            TokenType.STAR,
            TokenType.TILDE,
            TokenType.ELLIPSIS,
            TokenType.MINUS,
            TokenType.PLUS,
            TokenType.AWAIT,
            TokenType.FALSE,
            TokenType.LAMBDA,
            TokenType.NONE,
            TokenType.NOT,
            TokenType.PEG_PARSER,
            TokenType.TRUE,
            TokenType.DECNUMBER,
            TokenType.HEXNUMBER,
            TokenType.OCTNUMBER,
            TokenType.BINNUMBER,
            TokenType.FLOAT,
            TokenType.COMPLEX,
            TokenType.STRING_LITERAL,
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ600Σ33 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ600Σ34 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ600Σ34Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ602Σ4 = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ602Σ4Σ = Utils.GetOrMakeSet();

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ605Σ13 = Utils.GetOrMakeSet(
            TokenType.DOT
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ605Σ20 = Utils.GetOrMakeSet(
            TokenType.DOT
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ605Σ21 = Utils.GetOrMakeSet(
            TokenType.DOT
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ605Σ21Σ = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ605Σ25 = Utils.GetOrMakeSet(
            TokenType.DOT
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ607Σ34 = Utils.GetOrMakeSet(
            TokenType.DOT
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ607Σ41 = Utils.GetOrMakeSet(
            TokenType.DOT
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ607Σ42 = Utils.GetOrMakeSet(
            TokenType.DOT
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ607Σ42Σ = Utils.GetOrMakeSet(
            TokenType.NAME
        );

        private static readonly HashSet<TokenType> follow_setΣPython_javaccΣ607Σ46 = Utils.GetOrMakeSet(
            TokenType.DOT
        );

        internal bool ScanToken(params TokenType[] types) {
            Token peekedToken = NextToken(currentLookaheadToken);
            TokenType tt = peekedToken.Type;
            if (System.Array.FindIndex<TokenType>(types, t => t == tt) < 0) {
                return _lastLookaheadSucceeded = false;
            }
            if (_remainingLookahead != UNLIMITED) {
                _remainingLookahead--;
            }
            currentLookaheadToken = peekedToken;
            return _lastLookaheadSucceeded = true;
        }

        internal bool ScanToken(HashSet<TokenType> types) {
            Token peekedToken = NextToken(currentLookaheadToken);
            TokenType tt = peekedToken.Type;
            if (!types.Contains(tt)) {
                return _lastLookaheadSucceeded = false;
            }
            if (_remainingLookahead != UNLIMITED) {
                _remainingLookahead--;
            }
            currentLookaheadToken = peekedToken;
            return _lastLookaheadSucceeded = true;
        }

// ====================================
// Lookahead Routines
// ====================================
    // scanahead routine for expansion at:
    // Python.javacc:24:5
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ24Σ5() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:24:5
            PushOntoLookaheadStack("Module", "Python.javacc", 24, 5);
            var prevProduction3497 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Statement";
            ScanToEnd = false;
            try {
                if (!checkΣStatement()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3497;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }








    // scanahead routine for expansion at:
    // Python.javacc:36:4
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ36Σ4() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:36:5
            if (!ScanToken(first_setΣPython_javaccΣ36Σ5)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:36:14
            if (!ScanToken(TokenType.COMPLEX)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }






    // scanahead routine for expansion at:
    // Python.javacc:46:5
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ46Σ5() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:46:5
            PushOntoLookaheadStack("AtomicExpression", "Python.javacc", 46, 5);
            var prevProduction3498 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Strings";
            ScanToEnd = false;
            try {
                if (!checkΣStrings()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3498;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }





    // scanahead routine for expansion at:
    // Python.javacc:56:5
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ56Σ5() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:56:6
            var token3499 = currentLookaheadToken;
            var remainingLookahead3499 = _remainingLookahead;
            var hitFailure3499 = _hitFailure;
            if (!checkΣPython_javaccΣ56Σ6()) {
                currentLookaheadToken = token3499;
                _remainingLookahead = remainingLookahead3499;
                _hitFailure = hitFailure3499;
                if (!checkΣPython_javaccΣ56Σ14()) {
                    currentLookaheadToken = token3499;
                    _remainingLookahead = remainingLookahead3499;
                    _hitFailure = hitFailure3499;
                    if (!checkΣPython_javaccΣ56Σ23()) {
                        currentLookaheadToken = token3499;
                        _remainingLookahead = remainingLookahead3499;
                        _hitFailure = hitFailure3499;
                        return _lastLookaheadSucceeded = false;
                    }
                }
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:56:6
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ56Σ6() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }
            if (!checkΣPython_javaccΣ241Σ9()) {
                _lastLookaheadSucceeded = false;
                return false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:56:6
            PushOntoLookaheadStack("AtomicExpression", "Python.javacc", 56, 6);
            var prevProduction3500 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Tuple";
            ScanToEnd = false;
            try {
                if (!checkΣTuple()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3500;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:56:14
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ56Σ14() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:56:14
            PushOntoLookaheadStack("AtomicExpression", "Python.javacc", 56, 14);
            var prevProduction3501 = _currentLookaheadProduction;
            _currentLookaheadProduction = "GenExp";
            ScanToEnd = false;
            try {
                if (!checkΣGenExp()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3501;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:56:23
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ56Σ23() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:56:23
            PushOntoLookaheadStack("AtomicExpression", "Python.javacc", 56, 23);
            var prevProduction3502 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Group";
            ScanToEnd = false;
            try {
                if (!checkΣGroup()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3502;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:58:5
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ58Σ5() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:58:6
            var token3503 = currentLookaheadToken;
            var remainingLookahead3503 = _remainingLookahead;
            var hitFailure3503 = _hitFailure;
            if (!checkΣPython_javaccΣ58Σ6()) {
                currentLookaheadToken = token3503;
                _remainingLookahead = remainingLookahead3503;
                _hitFailure = hitFailure3503;
                if (!checkΣPython_javaccΣ58Σ17()) {
                    currentLookaheadToken = token3503;
                    _remainingLookahead = remainingLookahead3503;
                    _hitFailure = hitFailure3503;
                    return _lastLookaheadSucceeded = false;
                }
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:58:6
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ58Σ6() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:58:6
            PushOntoLookaheadStack("AtomicExpression", "Python.javacc", 58, 6);
            var prevProduction3504 = _currentLookaheadProduction;
            _currentLookaheadProduction = "ListComp";
            ScanToEnd = false;
            try {
                if (!checkΣListComp()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3504;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:58:17
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ58Σ17() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:58:17
            PushOntoLookaheadStack("AtomicExpression", "Python.javacc", 58, 17);
            var prevProduction3505 = _currentLookaheadProduction;
            _currentLookaheadProduction = "List";
            ScanToEnd = false;
            try {
                if (!checkΣList()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3505;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:60:5
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ60Σ5() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:60:6
            var token3506 = currentLookaheadToken;
            var remainingLookahead3506 = _remainingLookahead;
            var hitFailure3506 = _hitFailure;
            if (!checkΣPython_javaccΣ60Σ6()) {
                currentLookaheadToken = token3506;
                _remainingLookahead = remainingLookahead3506;
                _hitFailure = hitFailure3506;
                if (!checkΣPython_javaccΣ60Σ16()) {
                    currentLookaheadToken = token3506;
                    _remainingLookahead = remainingLookahead3506;
                    _hitFailure = hitFailure3506;
                    if (!checkΣPython_javaccΣ60Σ27()) {
                        currentLookaheadToken = token3506;
                        _remainingLookahead = remainingLookahead3506;
                        _hitFailure = hitFailure3506;
                        if (!checkΣPython_javaccΣ60Σ34()) {
                            currentLookaheadToken = token3506;
                            _remainingLookahead = remainingLookahead3506;
                            _hitFailure = hitFailure3506;
                            return _lastLookaheadSucceeded = false;
                        }
                    }
                }
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:60:6
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ60Σ6() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:60:6
            PushOntoLookaheadStack("AtomicExpression", "Python.javacc", 60, 6);
            var prevProduction3507 = _currentLookaheadProduction;
            _currentLookaheadProduction = "SetComp";
            ScanToEnd = false;
            try {
                if (!checkΣSetComp()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3507;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:60:16
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ60Σ16() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:60:16
            PushOntoLookaheadStack("AtomicExpression", "Python.javacc", 60, 16);
            var prevProduction3508 = _currentLookaheadProduction;
            _currentLookaheadProduction = "DictComp";
            ScanToEnd = false;
            try {
                if (!checkΣDictComp()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3508;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:60:27
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ60Σ27() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }
            if (!checkΣPython_javaccΣ332Σ8()) {
                _lastLookaheadSucceeded = false;
                return false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:60:27
            PushOntoLookaheadStack("AtomicExpression", "Python.javacc", 60, 27);
            var prevProduction3509 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Dict";
            ScanToEnd = false;
            try {
                if (!checkΣDict()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3509;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:60:34
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ60Σ34() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:60:34
            PushOntoLookaheadStack("AtomicExpression", "Python.javacc", 60, 34);
            var prevProduction3510 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Set";
            ScanToEnd = false;
            try {
                if (!checkΣSet()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3510;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }


    // scanahead routine for expansion at:
    // Python.javacc:66:5
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ66Σ5() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:66:5
            var token3511 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ66Σ6())) {
                currentLookaheadToken = token3511;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:66:18
            if (!ScanToken(TokenType.COLON)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 0;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:66:27
            var token3512 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ66Σ28())) {
                currentLookaheadToken = token3512;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:66:40
            var token3513 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ66Σ41())) {
                currentLookaheadToken = token3513;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:66:6
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ66Σ6() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:66:6
            PushOntoLookaheadStack("Slice", "Python.javacc", 66, 6);
            var prevProduction3514 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Expression";
            ScanToEnd = false;
            try {
                if (!checkΣExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3514;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:66:28
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ66Σ28() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:66:28
            PushOntoLookaheadStack("Slice", "Python.javacc", 66, 28);
            var prevProduction3515 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Expression";
            ScanToEnd = false;
            try {
                if (!checkΣExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3515;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:66:41
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ66Σ41() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:66:41
            if (!ScanToken(TokenType.COLON)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:66:45
            var token3516 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ66Σ46())) {
                currentLookaheadToken = token3516;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:66:46
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ66Σ46() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:66:46
            PushOntoLookaheadStack("Slice", "Python.javacc", 66, 46);
            var prevProduction3517 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Expression";
            ScanToEnd = false;
            try {
                if (!checkΣExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3517;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:68:5
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ68Σ5() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:68:5
            var token3518 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ68Σ6())) {
                currentLookaheadToken = token3518;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:68:22
            PushOntoLookaheadStack("Slice", "Python.javacc", 68, 22);
            var prevProduction3519 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Expression";
            ScanToEnd = false;
            try {
                if (!checkΣExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3519;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:68:6
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ68Σ6() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:68:9
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:68:16
            if (!ScanToken(TokenType.COLONEQUALS)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:71:21
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ71Σ21() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:71:21
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 1;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:71:31
            PushOntoLookaheadStack("Slices", "Python.javacc", 71, 31);
            var prevProduction3520 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Slice";
            ScanToEnd = true;
            try {
                if (!checkΣSlice()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3520;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }


    // scanahead routine for expansion at:
    // Python.javacc:74:4
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ74Σ4() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:74:4
            PushOntoLookaheadStack("Statement", "Python.javacc", 74, 4);
            var prevProduction3521 = _currentLookaheadProduction;
            _currentLookaheadProduction = "MatchStatement";
            ScanToEnd = false;
            try {
                if (!checkΣMatchStatement()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3521;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:76:4
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ76Σ4() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:76:4
            PushOntoLookaheadStack("Statement", "Python.javacc", 76, 4);
            var prevProduction3522 = _currentLookaheadProduction;
            _currentLookaheadProduction = "SimpleStatement";
            ScanToEnd = false;
            try {
                if (!checkΣSimpleStatement()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3522;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:78:4
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ78Σ4() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:78:4
            PushOntoLookaheadStack("Statement", "Python.javacc", 78, 4);
            var prevProduction3523 = _currentLookaheadProduction;
            _currentLookaheadProduction = "CompoundStatement";
            ScanToEnd = false;
            try {
                if (!checkΣCompoundStatement()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3523;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:81:40
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ81Σ40() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:81:40
            if (!ScanToken(TokenType.SEMICOLON)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 1;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:81:50
            PushOntoLookaheadStack("SimpleStatement", "Python.javacc", 81, 50);
            var prevProduction3524 = _currentLookaheadProduction;
            _currentLookaheadProduction = "SmallStatement";
            ScanToEnd = true;
            try {
                if (!checkΣSmallStatement()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3524;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }


    // scanahead routine for expansion at:
    // Python.javacc:84:4
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ84Σ4() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }
            if (!checkΣPython_javaccΣ462Σ7()) {
                _lastLookaheadSucceeded = false;
                return false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:84:4
            PushOntoLookaheadStack("SmallStatement", "Python.javacc", 84, 4);
            var prevProduction3525 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Assignment";
            ScanToEnd = false;
            try {
                if (!checkΣAssignment()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3525;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:86:4
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ86Σ4() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:86:4
            PushOntoLookaheadStack("SmallStatement", "Python.javacc", 86, 4);
            var prevProduction3526 = _currentLookaheadProduction;
            _currentLookaheadProduction = "StarExpressions";
            ScanToEnd = false;
            try {
                if (!checkΣStarExpressions()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3526;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:88:4
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ88Σ4() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:88:4
            PushOntoLookaheadStack("SmallStatement", "Python.javacc", 88, 4);
            var prevProduction3527 = _currentLookaheadProduction;
            _currentLookaheadProduction = "ReturnStatement";
            ScanToEnd = false;
            try {
                if (!checkΣReturnStatement()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3527;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:90:4
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ90Σ4() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:90:4
            PushOntoLookaheadStack("SmallStatement", "Python.javacc", 90, 4);
            var prevProduction3528 = _currentLookaheadProduction;
            _currentLookaheadProduction = "ImportStatement";
            ScanToEnd = false;
            try {
                if (!checkΣImportStatement()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3528;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:92:4
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ92Σ4() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:92:4
            PushOntoLookaheadStack("SmallStatement", "Python.javacc", 92, 4);
            var prevProduction3529 = _currentLookaheadProduction;
            _currentLookaheadProduction = "GlobalStatement";
            ScanToEnd = false;
            try {
                if (!checkΣGlobalStatement()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3529;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:94:4
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ94Σ4() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:94:4
            PushOntoLookaheadStack("SmallStatement", "Python.javacc", 94, 4);
            var prevProduction3530 = _currentLookaheadProduction;
            _currentLookaheadProduction = "NonlocalStatement";
            ScanToEnd = false;
            try {
                if (!checkΣNonlocalStatement()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3530;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }




    // scanahead routine for expansion at:
    // Python.javacc:102:4
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ102Σ4() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:102:4
            PushOntoLookaheadStack("SmallStatement", "Python.javacc", 102, 4);
            var prevProduction3531 = _currentLookaheadProduction;
            _currentLookaheadProduction = "DelStatement";
            ScanToEnd = false;
            try {
                if (!checkΣDelStatement()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3531;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:104:4
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ104Σ4() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:104:4
            PushOntoLookaheadStack("SmallStatement", "Python.javacc", 104, 4);
            var prevProduction3532 = _currentLookaheadProduction;
            _currentLookaheadProduction = "AssertStatement";
            ScanToEnd = false;
            try {
                if (!checkΣAssertStatement()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3532;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:106:4
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ106Σ4() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:106:4
            PushOntoLookaheadStack("SmallStatement", "Python.javacc", 106, 4);
            var prevProduction3533 = _currentLookaheadProduction;
            _currentLookaheadProduction = "RaiseStatement";
            ScanToEnd = false;
            try {
                if (!checkΣRaiseStatement()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3533;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:108:4
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ108Σ4() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:108:4
            PushOntoLookaheadStack("SmallStatement", "Python.javacc", 108, 4);
            var prevProduction3534 = _currentLookaheadProduction;
            _currentLookaheadProduction = "YieldStatement";
            ScanToEnd = false;
            try {
                if (!checkΣYieldStatement()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3534;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:112:5
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ112Σ5() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:112:5
            PushOntoLookaheadStack("CompoundStatement", "Python.javacc", 112, 5);
            var prevProduction3535 = _currentLookaheadProduction;
            _currentLookaheadProduction = "FunctionDefinition";
            ScanToEnd = false;
            try {
                if (!checkΣFunctionDefinition()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3535;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:114:5
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ114Σ5() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:114:5
            PushOntoLookaheadStack("CompoundStatement", "Python.javacc", 114, 5);
            var prevProduction3536 = _currentLookaheadProduction;
            _currentLookaheadProduction = "IfStatement";
            ScanToEnd = false;
            try {
                if (!checkΣIfStatement()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3536;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:116:5
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ116Σ5() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:116:5
            PushOntoLookaheadStack("CompoundStatement", "Python.javacc", 116, 5);
            var prevProduction3537 = _currentLookaheadProduction;
            _currentLookaheadProduction = "ClassDefinition";
            ScanToEnd = false;
            try {
                if (!checkΣClassDefinition()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3537;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:118:5
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ118Σ5() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:118:5
            PushOntoLookaheadStack("CompoundStatement", "Python.javacc", 118, 5);
            var prevProduction3538 = _currentLookaheadProduction;
            _currentLookaheadProduction = "WithStatement";
            ScanToEnd = false;
            try {
                if (!checkΣWithStatement()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3538;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:120:5
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ120Σ5() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:120:5
            PushOntoLookaheadStack("CompoundStatement", "Python.javacc", 120, 5);
            var prevProduction3539 = _currentLookaheadProduction;
            _currentLookaheadProduction = "WhileStatement";
            ScanToEnd = false;
            try {
                if (!checkΣWhileStatement()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3539;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:122:5
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ122Σ5() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:122:5
            PushOntoLookaheadStack("CompoundStatement", "Python.javacc", 122, 5);
            var prevProduction3540 = _currentLookaheadProduction;
            _currentLookaheadProduction = "ForStatement";
            ScanToEnd = false;
            try {
                if (!checkΣForStatement()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3540;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:124:5
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ124Σ5() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:124:5
            PushOntoLookaheadStack("CompoundStatement", "Python.javacc", 124, 5);
            var prevProduction3541 = _currentLookaheadProduction;
            _currentLookaheadProduction = "TryStatement";
            ScanToEnd = false;
            try {
                if (!checkΣTryStatement()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3541;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:127:29
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ127Σ29() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:127:29
            PushOntoLookaheadStack("ReturnStatement", "Python.javacc", 127, 29);
            var prevProduction3542 = _currentLookaheadProduction;
            _currentLookaheadProduction = "StarExpressions";
            ScanToEnd = false;
            try {
                if (!checkΣStarExpressions()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3542;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:129:36
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ129Σ36() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:129:36
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:129:40
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:131:40
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ131Σ40() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:131:40
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:131:44
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:133:40
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ133Σ40() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:133:40
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:133:44
            PushOntoLookaheadStack("AssertStatement", "Python.javacc", 133, 44);
            var prevProduction3543 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Expression";
            ScanToEnd = true;
            try {
                if (!checkΣExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3543;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:135:28
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ135Σ28() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:135:28
            PushOntoLookaheadStack("RaiseStatement", "Python.javacc", 135, 28);
            var prevProduction3544 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Expression";
            ScanToEnd = false;
            try {
                if (!checkΣExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3544;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:135:39
            var token3545 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ135Σ40())) {
                currentLookaheadToken = token3545;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:135:40
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ135Σ40() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:135:40
            if (!ScanToken(TokenType.FROM)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:135:47
            PushOntoLookaheadStack("RaiseStatement", "Python.javacc", 135, 47);
            var prevProduction3546 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Expression";
            ScanToEnd = true;
            try {
                if (!checkΣExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3546;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:138:5
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ138Σ5() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:138:5
            PushOntoLookaheadStack("Block", "Python.javacc", 138, 5);
            var prevProduction3547 = _currentLookaheadProduction;
            _currentLookaheadProduction = "SimpleStatement";
            ScanToEnd = false;
            try {
                if (!checkΣSimpleStatement()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3547;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:140:5
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ140Σ5() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:140:5
            if (!ScanToken(TokenType.NEWLINE)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:140:14
            if (!ScanToken(TokenType.EOF)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for OneOrMore specified at Python.javacc:140:22
            if (!(checkΣPython_javaccΣ140Σ23())) {
                return _lastLookaheadSucceeded = false;
            }
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3548 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ140Σ23())) {
                    currentLookaheadToken = token3548;
                    break;
                }
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:140:34
            if (!ScanToken(TokenType.EOF)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:140:23
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ140Σ23() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:140:23
            PushOntoLookaheadStack("Block", "Python.javacc", 140, 23);
            var prevProduction3549 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Statement";
            ScanToEnd = false;
            try {
                if (!checkΣStatement()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3549;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:145:26
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ145Σ26() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:145:26
            var token3550 = currentLookaheadToken;
            if (!(ScanToken(TokenType.STAR))) {
                currentLookaheadToken = token3550;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:145:32
            PushOntoLookaheadStack("ExceptBlock", "Python.javacc", 145, 32);
            var prevProduction3551 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Expression";
            ScanToEnd = false;
            try {
                if (!checkΣExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3551;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:145:43
            var token3552 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ145Σ44())) {
                currentLookaheadToken = token3552;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }


    // scanahead routine for expansion at:
    // Python.javacc:145:44
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ145Σ44() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:145:44
            if (!ScanToken(TokenType.AS)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:145:49
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:149:7
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ149Σ7() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:149:7
            if (!ScanToken(TokenType.ELIF)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:149:14
            PushOntoLookaheadStack("IfStatement", "Python.javacc", 149, 14);
            var prevProduction3553 = _currentLookaheadProduction;
            _currentLookaheadProduction = "NamedExpression";
            ScanToEnd = true;
            try {
                if (!checkΣNamedExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3553;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:149:30
            if (!ScanToken(TokenType.COLON)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:149:34
            PushOntoLookaheadStack("IfStatement", "Python.javacc", 149, 34);
            var prevProduction3554 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Block";
            ScanToEnd = true;
            try {
                if (!checkΣBlock()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3554;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:150:7
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ150Σ7() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:150:7
            if (!ScanToken(TokenType.ELSE)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:150:14
            if (!ScanToken(TokenType.COLON)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:150:18
            PushOntoLookaheadStack("IfStatement", "Python.javacc", 150, 18);
            var prevProduction3555 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Block";
            ScanToEnd = true;
            try {
                if (!checkΣBlock()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3555;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:155:53
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ155Σ53() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:155:53
            PushOntoLookaheadStack("WhileStatement", "Python.javacc", 155, 53);
            var prevProduction3556 = _currentLookaheadProduction;
            _currentLookaheadProduction = "ElseBlock";
            ScanToEnd = false;
            try {
                if (!checkΣElseBlock()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3556;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }


    // scanahead routine for expansion at:
    // Python.javacc:160:9
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ160Σ9() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }
            if (!checkΣPython_javaccΣ160Σ14()) {
                _lastLookaheadSucceeded = false;
                return false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:160:44
            PushOntoLookaheadStack("WithStatement", "Python.javacc", 160, 44);
            var prevProduction3557 = _currentLookaheadProduction;
            _currentLookaheadProduction = "WithItemsInParentheses";
            ScanToEnd = false;
            try {
                if (!checkΣWithItemsInParentheses()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3557;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:162:9
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ162Σ9() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:162:9
            PushOntoLookaheadStack("WithStatement", "Python.javacc", 162, 9);
            var prevProduction3558 = _currentLookaheadProduction;
            _currentLookaheadProduction = "WithItem";
            ScanToEnd = false;
            try {
                if (!checkΣWithItem()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3558;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:162:18
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3559 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ162Σ19())) {
                    currentLookaheadToken = token3559;
                    break;
                }
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:162:19
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ162Σ19() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:162:19
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:162:23
            PushOntoLookaheadStack("WithStatement", "Python.javacc", 162, 23);
            var prevProduction3560 = _currentLookaheadProduction;
            _currentLookaheadProduction = "WithItem";
            ScanToEnd = true;
            try {
                if (!checkΣWithItem()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3560;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:167:45
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ167Σ45() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:167:52
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:167:56
            PushOntoLookaheadStack("WithItemsInParentheses", "Python.javacc", 167, 56);
            var prevProduction3561 = _currentLookaheadProduction;
            _currentLookaheadProduction = "WithItem";
            ScanToEnd = true;
            try {
                if (!checkΣWithItem()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3561;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }


    // scanahead routine for expansion at:
    // Python.javacc:169:24
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ169Σ24() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:169:24
            if (!ScanToken(TokenType.AS)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:169:29
            PushOntoLookaheadStack("WithItem", "Python.javacc", 169, 29);
            var prevProduction3562 = _currentLookaheadProduction;
            _currentLookaheadProduction = "StarTarget";
            ScanToEnd = true;
            try {
                if (!checkΣStarTarget()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3562;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }


    // scanahead routine for expansion at:
    // Python.javacc:174:11
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ174Σ11() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:174:11
            PushOntoLookaheadStack("ForStatement", "Python.javacc", 174, 11);
            var prevProduction3563 = _currentLookaheadProduction;
            _currentLookaheadProduction = "ElseBlock";
            ScanToEnd = false;
            try {
                if (!checkΣElseBlock()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3563;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:180:8
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ180Σ8() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:180:8
            PushOntoLookaheadStack("TryStatement", "Python.javacc", 180, 8);
            var prevProduction3564 = _currentLookaheadProduction;
            _currentLookaheadProduction = "FinallyBlock";
            ScanToEnd = false;
            try {
                if (!checkΣFinallyBlock()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3564;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:182:8
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ182Σ8() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for OneOrMore specified at Python.javacc:182:9
            if (!(checkΣPython_javaccΣ182Σ10())) {
                return _lastLookaheadSucceeded = false;
            }
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3565 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ182Σ10())) {
                    currentLookaheadToken = token3565;
                    break;
                }
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:182:24
            var token3566 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ182Σ25())) {
                currentLookaheadToken = token3566;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:182:36
            var token3567 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ182Σ37())) {
                currentLookaheadToken = token3567;
            }




            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:182:9
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ182Σ9() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for OneOrMore specified at Python.javacc:182:9
            if (!(checkΣPython_javaccΣ182Σ10())) {
                return _lastLookaheadSucceeded = false;
            }
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3568 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ182Σ10())) {
                    currentLookaheadToken = token3568;
                    break;
                }
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:182:24
            var token3569 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ182Σ25())) {
                currentLookaheadToken = token3569;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:182:36
            var token3570 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ182Σ37())) {
                currentLookaheadToken = token3570;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:182:10
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ182Σ10() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:182:10
            PushOntoLookaheadStack("TryStatement", "Python.javacc", 182, 10);
            var prevProduction3571 = _currentLookaheadProduction;
            _currentLookaheadProduction = "ExceptBlock";
            ScanToEnd = false;
            try {
                if (!checkΣExceptBlock()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3571;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:182:25
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ182Σ25() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:182:25
            PushOntoLookaheadStack("TryStatement", "Python.javacc", 182, 25);
            var prevProduction3572 = _currentLookaheadProduction;
            _currentLookaheadProduction = "ElseBlock";
            ScanToEnd = false;
            try {
                if (!checkΣElseBlock()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3572;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:182:37
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ182Σ37() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:182:37
            PushOntoLookaheadStack("TryStatement", "Python.javacc", 182, 37);
            var prevProduction3573 = _currentLookaheadProduction;
            _currentLookaheadProduction = "FinallyBlock";
            ScanToEnd = false;
            try {
                if (!checkΣFinallyBlock()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3573;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:186:41
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ186Σ41() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:186:48
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:186:52
            PushOntoLookaheadStack("DelStatement", "Python.javacc", 186, 52);
            var prevProduction3574 = _currentLookaheadProduction;
            _currentLookaheadProduction = "PrimaryExpression";
            ScanToEnd = true;
            try {
                if (!checkΣPrimaryExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3574;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }


    // scanahead routine for expansion at:
    // Python.javacc:188:21
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ188Σ21() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:188:24
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:188:31
            if (!ScanToken(TokenType.COLONEQUALS)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:190:22
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ190Σ22() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:190:25
            if (!ScanToken(TokenType.DOT)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:190:29
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:192:19
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ192Σ19() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:192:19
            PushOntoLookaheadStack("ImportStatement", "Python.javacc", 192, 19);
            var prevProduction3575 = _currentLookaheadProduction;
            _currentLookaheadProduction = "ImportName";
            ScanToEnd = false;
            try {
                if (!checkΣImportName()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3575;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:192:32
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ192Σ32() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:192:32
            PushOntoLookaheadStack("ImportStatement", "Python.javacc", 192, 32);
            var prevProduction3576 = _currentLookaheadProduction;
            _currentLookaheadProduction = "ImportFrom1";
            ScanToEnd = false;
            try {
                if (!checkΣImportFrom1()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3576;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:192:46
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ192Σ46() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:192:46
            PushOntoLookaheadStack("ImportStatement", "Python.javacc", 192, 46);
            var prevProduction3577 = _currentLookaheadProduction;
            _currentLookaheadProduction = "ImportFrom2";
            ScanToEnd = false;
            try {
                if (!checkΣImportFrom2()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3577;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:194:40
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ194Σ40() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:194:40
            if (!ScanToken(TokenType.AS)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:194:45
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:194:54
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ194Σ54() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:194:54
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:194:58
            PushOntoLookaheadStack("ImportName", "Python.javacc", 194, 58);
            var prevProduction3578 = _currentLookaheadProduction;
            _currentLookaheadProduction = "DottedName";
            ScanToEnd = true;
            try {
                if (!checkΣDottedName()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3578;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:194:69
            var token3579 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ194Σ70())) {
                currentLookaheadToken = token3579;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:194:70
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ194Σ70() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:194:70
            if (!ScanToken(TokenType.AS)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:194:75
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }








    // scanahead routine for expansion at:
    // Python.javacc:203:4
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ203Σ4() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:203:4
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:203:11
            var token3580 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ203Σ12())) {
                currentLookaheadToken = token3580;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:203:25
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3581 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ203Σ26())) {
                    currentLookaheadToken = token3581;
                    break;
                }
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:203:58
            var token3582 = currentLookaheadToken;
            if (!(ScanToken(TokenType.COMMA))) {
                currentLookaheadToken = token3582;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:203:12
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ203Σ12() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:203:12
            if (!ScanToken(TokenType.AS)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:203:17
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:203:26
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ203Σ26() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:203:26
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:203:30
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 0;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:203:42
            var token3583 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ203Σ43())) {
                currentLookaheadToken = token3583;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:203:43
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ203Σ43() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:203:43
            if (!ScanToken(TokenType.AS)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:203:48
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }


    // scanahead routine for expansion at:
    // Python.javacc:205:4
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ205Σ4() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:205:4
            if (!ScanToken(TokenType.LPAREN)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:205:8
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:205:15
            var token3584 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ205Σ16())) {
                currentLookaheadToken = token3584;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:205:29
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3585 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ205Σ30())) {
                    currentLookaheadToken = token3585;
                    break;
                }
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:205:62
            var token3586 = currentLookaheadToken;
            if (!(ScanToken(TokenType.COMMA))) {
                currentLookaheadToken = token3586;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:205:68
            if (!ScanToken(TokenType.RPAREN)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:205:72
            var token3587 = currentLookaheadToken;
            if (!(ScanToken(TokenType.COMMA))) {
                currentLookaheadToken = token3587;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:205:16
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ205Σ16() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:205:16
            if (!ScanToken(TokenType.AS)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:205:21
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:205:30
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ205Σ30() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:205:30
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:205:34
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 0;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:205:46
            var token3588 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ205Σ47())) {
                currentLookaheadToken = token3588;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:205:47
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ205Σ47() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:205:47
            if (!ScanToken(TokenType.AS)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:205:52
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }



    // scanahead routine for expansion at:
    // Python.javacc:209:6
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ209Σ6() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:209:6
            if (!ScanToken(TokenType.STAR)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:209:10
            PushOntoLookaheadStack("StarNamedExpression", "Python.javacc", 209, 10);
            var prevProduction3589 = _currentLookaheadProduction;
            _currentLookaheadProduction = "BitwiseOr";
            ScanToEnd = true;
            try {
                if (!checkΣBitwiseOr()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3589;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:211:6
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ211Σ6() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:211:6
            PushOntoLookaheadStack("StarNamedExpression", "Python.javacc", 211, 6);
            var prevProduction3590 = _currentLookaheadProduction;
            _currentLookaheadProduction = "NamedExpression";
            ScanToEnd = false;
            try {
                if (!checkΣNamedExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3590;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:215:5
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ215Σ5() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:215:5
            if (!ScanToken(TokenType.STAR)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:215:9
            PushOntoLookaheadStack("StarExpression", "Python.javacc", 215, 9);
            var prevProduction3591 = _currentLookaheadProduction;
            _currentLookaheadProduction = "BitwiseOr";
            ScanToEnd = true;
            try {
                if (!checkΣBitwiseOr()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3591;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:217:5
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ217Σ5() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:217:5
            PushOntoLookaheadStack("StarExpression", "Python.javacc", 217, 5);
            var prevProduction3592 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Expression";
            ScanToEnd = false;
            try {
                if (!checkΣExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3592;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:220:35
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ220Σ35() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:220:35
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 1;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:220:45
            PushOntoLookaheadStack("StarExpressions", "Python.javacc", 220, 45);
            var prevProduction3593 = _currentLookaheadProduction;
            _currentLookaheadProduction = "StarExpression";
            ScanToEnd = true;
            try {
                if (!checkΣStarExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3593;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }


    // scanahead routine for expansion at:
    // Python.javacc:222:45
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ222Σ45() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:222:45
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 1;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:222:55
            PushOntoLookaheadStack("StarNamedExpressions", "Python.javacc", 222, 55);
            var prevProduction3594 = _currentLookaheadProduction;
            _currentLookaheadProduction = "StarNamedExpression";
            ScanToEnd = true;
            try {
                if (!checkΣStarNamedExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3594;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }


    // scanahead routine for expansion at:
    // Python.javacc:224:25
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ224Σ25() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:224:25
            if (!ScanToken(TokenType.BIT_OR)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:224:29
            PushOntoLookaheadStack("BitwiseOr", "Python.javacc", 224, 29);
            var prevProduction3595 = _currentLookaheadProduction;
            _currentLookaheadProduction = "BitwiseXor";
            ScanToEnd = true;
            try {
                if (!checkΣBitwiseXor()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3595;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:226:26
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ226Σ26() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:226:26
            if (!ScanToken(TokenType.XOR)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:226:30
            PushOntoLookaheadStack("BitwiseXor", "Python.javacc", 226, 30);
            var prevProduction3596 = _currentLookaheadProduction;
            _currentLookaheadProduction = "BitwiseAnd";
            ScanToEnd = true;
            try {
                if (!checkΣBitwiseAnd()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3596;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:228:31
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ228Σ31() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:228:31
            if (!ScanToken(TokenType.BIT_AND)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:228:35
            PushOntoLookaheadStack("BitwiseAnd", "Python.javacc", 228, 35);
            var prevProduction3597 = _currentLookaheadProduction;
            _currentLookaheadProduction = "ShiftExpression";
            ScanToEnd = true;
            try {
                if (!checkΣShiftExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3597;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:230:39
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ230Σ39() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:230:40
            if (!ScanToken(first_setΣPython_javaccΣ230Σ40)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:230:53
            PushOntoLookaheadStack("ShiftExpression", "Python.javacc", 230, 53);
            var prevProduction3598 = _currentLookaheadProduction;
            _currentLookaheadProduction = "AdditiveExpression";
            ScanToEnd = true;
            try {
                if (!checkΣAdditiveExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3598;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }



    // scanahead routine for expansion at:
    // Python.javacc:232:48
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ232Σ48() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:232:49
            if (!ScanToken(first_setΣPython_javaccΣ232Σ49)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:232:58
            PushOntoLookaheadStack("AdditiveExpression", "Python.javacc", 232, 58);
            var prevProduction3599 = _currentLookaheadProduction;
            _currentLookaheadProduction = "MultiplicativeExpression";
            ScanToEnd = true;
            try {
                if (!checkΣMultiplicativeExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3599;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }



    // scanahead routine for expansion at:
    // Python.javacc:234:45
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ234Σ45() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:234:46
            if (!ScanToken(first_setΣPython_javaccΣ234Σ46)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:234:68
            PushOntoLookaheadStack("MultiplicativeExpression", "Python.javacc", 234, 68);
            var prevProduction3600 = _currentLookaheadProduction;
            _currentLookaheadProduction = "UnaryExpression";
            ScanToEnd = true;
            try {
                if (!checkΣUnaryExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3600;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }






    // scanahead routine for expansion at:
    // Python.javacc:236:19
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ236Σ19() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:236:19
            PushOntoLookaheadStack("UnaryExpression", "Python.javacc", 236, 19);
            var prevProduction3601 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Power";
            ScanToEnd = false;
            try {
                if (!checkΣPower()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3601;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:236:27
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ236Σ27() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:236:28
            if (!ScanToken(first_setΣPython_javaccΣ236Σ28)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:236:45
            PushOntoLookaheadStack("UnaryExpression", "Python.javacc", 236, 45);
            var prevProduction3602 = _currentLookaheadProduction;
            _currentLookaheadProduction = "UnaryExpression";
            ScanToEnd = true;
            try {
                if (!checkΣUnaryExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3602;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }




    // scanahead routine for expansion at:
    // Python.javacc:238:23
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ238Σ23() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:238:23
            if (!ScanToken(TokenType.STAR_STAR)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:238:28
            PushOntoLookaheadStack("Power", "Python.javacc", 238, 28);
            var prevProduction3603 = _currentLookaheadProduction;
            _currentLookaheadProduction = "UnaryExpression";
            ScanToEnd = true;
            try {
                if (!checkΣUnaryExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3603;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }


    // scanahead routine for expansion at:
    // Python.javacc:241:20
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ241Σ20() {
        try {
            _lookaheadRoutineNesting++;
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:241:20
            PushOntoLookaheadStack("Tuple", "Python.javacc", 241, 20);
            var prevProduction3604 = _currentLookaheadProduction;
            _currentLookaheadProduction = "StarNamedExpression";
            ScanToEnd = true;
            try {
                if (!checkΣStarNamedExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3604;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:241:40
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:242:10
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ242Σ10() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:242:10
            PushOntoLookaheadStack("Tuple", "Python.javacc", 242, 10);
            var prevProduction3605 = _currentLookaheadProduction;
            _currentLookaheadProduction = "StarNamedExpression";
            ScanToEnd = false;
            try {
                if (!checkΣStarNamedExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3605;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:242:30
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:242:34
            var token3606 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ242Σ35())) {
                currentLookaheadToken = token3606;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:242:35
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ242Σ35() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:242:35
            PushOntoLookaheadStack("Tuple", "Python.javacc", 242, 35);
            var prevProduction3607 = _currentLookaheadProduction;
            _currentLookaheadProduction = "StarNamedExpressions";
            ScanToEnd = false;
            try {
                if (!checkΣStarNamedExpressions()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3607;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:245:14
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ245Σ14() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:245:14
            PushOntoLookaheadStack("Group", "Python.javacc", 245, 14);
            var prevProduction3608 = _currentLookaheadProduction;
            _currentLookaheadProduction = "YieldExpression";
            ScanToEnd = false;
            try {
                if (!checkΣYieldExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3608;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:245:32
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ245Σ32() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:245:32
            PushOntoLookaheadStack("Group", "Python.javacc", 245, 32);
            var prevProduction3609 = _currentLookaheadProduction;
            _currentLookaheadProduction = "NamedExpression";
            ScanToEnd = false;
            try {
                if (!checkΣNamedExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3609;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }


    // scanahead routine for expansion at:
    // Python.javacc:252:8
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ252Σ8() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:252:8
            var token3610 = currentLookaheadToken;
            var remainingLookahead3610 = _remainingLookahead;
            var hitFailure3610 = _hitFailure;
            if (!checkΣPython_javaccΣ252Σ8Σ()) {
                currentLookaheadToken = token3610;
                _remainingLookahead = remainingLookahead3610;
                _hitFailure = hitFailure3610;
                if (!checkΣPython_javaccΣ254Σ8()) {
                    currentLookaheadToken = token3610;
                    _remainingLookahead = remainingLookahead3610;
                    _hitFailure = hitFailure3610;
                    if (!checkΣPython_javaccΣ256Σ8()) {
                        currentLookaheadToken = token3610;
                        _remainingLookahead = remainingLookahead3610;
                        _hitFailure = hitFailure3610;
                        if (!checkΣPython_javaccΣ258Σ8()) {
                            currentLookaheadToken = token3610;
                            _remainingLookahead = remainingLookahead3610;
                            _hitFailure = hitFailure3610;
                            return _lastLookaheadSucceeded = false;
                        }
                    }
                }
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:252:8
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ252Σ8Σ() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:252:8
            if (!ScanToken(TokenType.DOT)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:252:12
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:254:8
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ254Σ8() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:254:8
            PushOntoLookaheadStack("PrimaryExpression", "Python.javacc", 254, 8);
            var prevProduction3611 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Slices";
            ScanToEnd = false;
            try {
                if (!checkΣSlices()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3611;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:256:8
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ256Σ8() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:256:8
            PushOntoLookaheadStack("PrimaryExpression", "Python.javacc", 256, 8);
            var prevProduction3612 = _currentLookaheadProduction;
            _currentLookaheadProduction = "GenExp";
            ScanToEnd = false;
            try {
                if (!checkΣGenExp()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3612;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:258:8
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ258Σ8() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:258:8
            PushOntoLookaheadStack("PrimaryExpression", "Python.javacc", 258, 8);
            var prevProduction3613 = _currentLookaheadProduction;
            _currentLookaheadProduction = "InvocationArguments";
            ScanToEnd = false;
            try {
                if (!checkΣInvocationArguments()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3613;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:263:5
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ263Σ5() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:263:5
            if (!ScanToken(TokenType.YIELD)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:263:13
            if (!ScanToken(TokenType.FROM)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 0;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:263:25
            PushOntoLookaheadStack("YieldExpression", "Python.javacc", 263, 25);
            var prevProduction3614 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Expression";
            ScanToEnd = true;
            try {
                if (!checkΣExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3614;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:265:5
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ265Σ5() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:265:5
            if (!ScanToken(TokenType.YIELD)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:265:13
            var token3615 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ265Σ14())) {
                currentLookaheadToken = token3615;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:265:14
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ265Σ14() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:265:14
            PushOntoLookaheadStack("YieldExpression", "Python.javacc", 265, 14);
            var prevProduction3616 = _currentLookaheadProduction;
            _currentLookaheadProduction = "StarExpressions";
            ScanToEnd = false;
            try {
                if (!checkΣStarExpressions()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3616;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:270:16
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ270Σ16() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:270:16
            PushOntoLookaheadStack("AnnotatedRhs", "Python.javacc", 270, 16);
            var prevProduction3617 = _currentLookaheadProduction;
            _currentLookaheadProduction = "YieldExpression";
            ScanToEnd = false;
            try {
                if (!checkΣYieldExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3617;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:270:34
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ270Σ34() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:270:34
            PushOntoLookaheadStack("AnnotatedRhs", "Python.javacc", 270, 34);
            var prevProduction3618 = _currentLookaheadProduction;
            _currentLookaheadProduction = "StarExpressions";
            ScanToEnd = false;
            try {
                if (!checkΣStarExpressions()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3618;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:272:15
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ272Σ15() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:272:15
            if (!ScanToken(TokenType.AT)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:272:19
            PushOntoLookaheadStack("Decorators", "Python.javacc", 272, 19);
            var prevProduction3619 = _currentLookaheadProduction;
            _currentLookaheadProduction = "NamedExpression";
            ScanToEnd = true;
            try {
                if (!checkΣNamedExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3619;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:272:35
            if (!ScanToken(TokenType.NEWLINE)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:279:7
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ279Σ7() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:279:7
            PushOntoLookaheadStack("InvocationArguments", "Python.javacc", 279, 7);
            var prevProduction3620 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Argument";
            ScanToEnd = false;
            try {
                if (!checkΣArgument()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3620;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for CodeBlock specified at Python.javacc:280:7
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:289:7
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3621 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ290Σ10())) {
                    currentLookaheadToken = token3621;
                    break;
                }
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:298:7
            var token3622 = currentLookaheadToken;
            if (!(ScanToken(TokenType.COMMA))) {
                currentLookaheadToken = token3622;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:290:10
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ290Σ10() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:291:10
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:292:10
            PushOntoLookaheadStack("InvocationArguments", "Python.javacc", 292, 10);
            var prevProduction3623 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Argument";
            ScanToEnd = true;
            try {
                if (!checkΣArgument()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3623;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for CodeBlock specified at Python.javacc:293:10


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }


    // scanahead routine for expansion at:
    // Python.javacc:304:4
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ304Σ4() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:304:4
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:306:7
            if (!ScanToken(first_setΣPython_javaccΣ306Σ7)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 0;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:312:4
            PushOntoLookaheadStack("Argument", "Python.javacc", 312, 4);
            var prevProduction3624 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Expression";
            ScanToEnd = true;
            try {
                if (!checkΣExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3624;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }



    // scanahead routine for expansion at:
    // Python.javacc:314:4
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ314Σ4() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:314:4
            var token3625 = currentLookaheadToken;
            if (!(ScanToken(first_setΣPython_javaccΣ315Σ7))) {
                currentLookaheadToken = token3625;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:318:4
            PushOntoLookaheadStack("Argument", "Python.javacc", 318, 4);
            var prevProduction3626 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Expression";
            ScanToEnd = false;
            try {
                if (!checkΣExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3626;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }




    // scanahead routine for expansion at:
    // Python.javacc:324:5
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ324Σ5() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:324:5
            if (!ScanToken(TokenType.STAR_STAR)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:324:10
            PushOntoLookaheadStack("DoubleStarredKeyValuePair", "Python.javacc", 324, 10);
            var prevProduction3627 = _currentLookaheadProduction;
            _currentLookaheadProduction = "BitwiseOr";
            ScanToEnd = true;
            try {
                if (!checkΣBitwiseOr()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3627;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:326:5
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ326Σ5() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:326:5
            PushOntoLookaheadStack("DoubleStarredKeyValuePair", "Python.javacc", 326, 5);
            var prevProduction3628 = _currentLookaheadProduction;
            _currentLookaheadProduction = "KeyValuePair";
            ScanToEnd = false;
            try {
                if (!checkΣKeyValuePair()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3628;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:329:57
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ329Σ57() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:329:57
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 1;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:329:67
            PushOntoLookaheadStack("DoubleStarredKeyValuePairs", "Python.javacc", 329, 67);
            var prevProduction3629 = _currentLookaheadProduction;
            _currentLookaheadProduction = "DoubleStarredKeyValuePair";
            ScanToEnd = true;
            try {
                if (!checkΣDoubleStarredKeyValuePair()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3629;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }



    // scanahead routine for expansion at:
    // Python.javacc:332:19
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ332Σ19() {
        try {
            _lookaheadRoutineNesting++;
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:332:19
            PushOntoLookaheadStack("Dict", "Python.javacc", 332, 19);
            var prevProduction3630 = _currentLookaheadProduction;
            _currentLookaheadProduction = "DoubleStarredKeyValuePair";
            ScanToEnd = true;
            try {
                if (!checkΣDoubleStarredKeyValuePair()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3630;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:334:5
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ334Σ5() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:334:5
            if (!ScanToken(TokenType.LBRACE)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:335:5
            var token3631 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ335Σ6())) {
                currentLookaheadToken = token3631;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:336:5
            if (!ScanToken(TokenType.RBRACE)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:335:6
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ335Σ6() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:335:6
            PushOntoLookaheadStack("Dict", "Python.javacc", 335, 6);
            var prevProduction3632 = _currentLookaheadProduction;
            _currentLookaheadProduction = "DoubleStarredKeyValuePairs";
            ScanToEnd = false;
            try {
                if (!checkΣDoubleStarredKeyValuePairs()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3632;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:340:36
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ340Σ36() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:340:36
            PushOntoLookaheadStack("DictComp", "Python.javacc", 340, 36);
            var prevProduction3633 = _currentLookaheadProduction;
            _currentLookaheadProduction = "ForIfClause";
            ScanToEnd = false;
            try {
                if (!checkΣForIfClause()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3633;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:344:38
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ344Σ38() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:344:38
            PushOntoLookaheadStack("SetComp", "Python.javacc", 344, 38);
            var prevProduction3634 = _currentLookaheadProduction;
            _currentLookaheadProduction = "ForIfClause";
            ScanToEnd = false;
            try {
                if (!checkΣForIfClause()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3634;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:347:6
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ347Σ6() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:347:6
            PushOntoLookaheadStack("ClassDefinition", "Python.javacc", 347, 6);
            var prevProduction3635 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Decorators";
            ScanToEnd = false;
            try {
                if (!checkΣDecorators()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3635;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:348:13
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ348Σ13() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:348:13
            PushOntoLookaheadStack("ClassDefinition", "Python.javacc", 348, 13);
            var prevProduction3636 = _currentLookaheadProduction;
            _currentLookaheadProduction = "InvocationArguments";
            ScanToEnd = false;
            try {
                if (!checkΣInvocationArguments()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3636;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:354:6
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ354Σ6() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:354:6
            PushOntoLookaheadStack("FunctionDefinition", "Python.javacc", 354, 6);
            var prevProduction3637 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Decorators";
            ScanToEnd = false;
            try {
                if (!checkΣDecorators()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3637;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }


    // scanahead routine for expansion at:
    // Python.javacc:361:6
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ361Σ6() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:361:6
            if (!ScanToken(TokenType.RARROW)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:361:11
            PushOntoLookaheadStack("FunctionDefinition", "Python.javacc", 361, 11);
            var prevProduction3638 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Expression";
            ScanToEnd = true;
            try {
                if (!checkΣExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3638;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:371:14
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ371Σ14() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:371:14
            PushOntoLookaheadStack("Expression", "Python.javacc", 371, 14);
            var prevProduction3639 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Disjunction";
            ScanToEnd = false;
            try {
                if (!checkΣDisjunction()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3639;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:371:26
            var token3640 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ371Σ27())) {
                currentLookaheadToken = token3640;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:371:27
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ371Σ27() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:371:27
            if (!ScanToken(TokenType.IF)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:371:32
            PushOntoLookaheadStack("Expression", "Python.javacc", 371, 32);
            var prevProduction3641 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Disjunction";
            ScanToEnd = true;
            try {
                if (!checkΣDisjunction()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3641;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:371:44
            if (!ScanToken(TokenType.ELSE)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:371:51
            PushOntoLookaheadStack("Expression", "Python.javacc", 371, 51);
            var prevProduction3642 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Expression";
            ScanToEnd = true;
            try {
                if (!checkΣExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3642;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:371:65
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ371Σ65() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:371:65
            PushOntoLookaheadStack("Expression", "Python.javacc", 371, 65);
            var prevProduction3643 = _currentLookaheadProduction;
            _currentLookaheadProduction = "LambdaDefinition";
            ScanToEnd = false;
            try {
                if (!checkΣLambdaDefinition()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3643;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:373:28
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ373Σ28() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:373:28
            if (!ScanToken(TokenType.OR)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:373:33
            PushOntoLookaheadStack("Disjunction", "Python.javacc", 373, 33);
            var prevProduction3644 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Conjunction";
            ScanToEnd = true;
            try {
                if (!checkΣConjunction()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3644;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:375:26
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ375Σ26() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:375:26
            if (!ScanToken(TokenType.AND)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:375:32
            PushOntoLookaheadStack("Conjunction", "Python.javacc", 375, 32);
            var prevProduction3645 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Inversion";
            ScanToEnd = true;
            try {
                if (!checkΣInversion()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3645;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }


    // scanahead routine for expansion at:
    // Python.javacc:379:25
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ379Σ25() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:379:25
            PushOntoLookaheadStack("Comparison", "Python.javacc", 379, 25);
            var prevProduction3646 = _currentLookaheadProduction;
            _currentLookaheadProduction = "ComparisonOperator";
            ScanToEnd = false;
            try {
                if (!checkΣComparisonOperator()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3646;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:379:44
            PushOntoLookaheadStack("Comparison", "Python.javacc", 379, 44);
            var prevProduction3647 = _currentLookaheadProduction;
            _currentLookaheadProduction = "BitwiseOr";
            ScanToEnd = true;
            try {
                if (!checkΣBitwiseOr()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3647;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }







    // scanahead routine for expansion at:
    // Python.javacc:384:4
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ384Σ4() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:384:4
            var token3648 = currentLookaheadToken;
            if (!(ScanToken(TokenType.NOT))) {
                currentLookaheadToken = token3648;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:384:12
            if (!ScanToken(TokenType.IN)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }


    // scanahead routine for expansion at:
    // Python.javacc:386:4
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ386Σ4() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:386:4
            if (!ScanToken(TokenType.IS)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:386:9
            var token3649 = currentLookaheadToken;
            if (!(ScanToken(TokenType.NOT))) {
                currentLookaheadToken = token3649;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }



    // scanahead routine for expansion at:
    // Python.javacc:391:27
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ391Σ27() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:391:27
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 1;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:391:37
            PushOntoLookaheadStack("StarTargets", "Python.javacc", 391, 37);
            var prevProduction3650 = _currentLookaheadProduction;
            _currentLookaheadProduction = "StarTarget";
            ScanToEnd = true;
            try {
                if (!checkΣStarTarget()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3650;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }



    // scanahead routine for expansion at:
    // Python.javacc:393:61
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ393Σ61() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:393:61
            if (!ScanToken(TokenType.IF)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:393:66
            PushOntoLookaheadStack("ForIfClause", "Python.javacc", 393, 66);
            var prevProduction3651 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Disjunction";
            ScanToEnd = true;
            try {
                if (!checkΣDisjunction()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3651;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:395:37
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ395Σ37() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:395:37
            PushOntoLookaheadStack("GenExp", "Python.javacc", 395, 37);
            var prevProduction3652 = _currentLookaheadProduction;
            _currentLookaheadProduction = "ForIfClause";
            ScanToEnd = false;
            try {
                if (!checkΣForIfClause()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3652;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:397:13
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ397Σ13() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:397:13
            PushOntoLookaheadStack("List", "Python.javacc", 397, 13);
            var prevProduction3653 = _currentLookaheadProduction;
            _currentLookaheadProduction = "StarNamedExpressions";
            ScanToEnd = false;
            try {
                if (!checkΣStarNamedExpressions()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3653;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:399:39
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ399Σ39() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:399:39
            PushOntoLookaheadStack("ListComp", "Python.javacc", 399, 39);
            var prevProduction3654 = _currentLookaheadProduction;
            _currentLookaheadProduction = "ForIfClause";
            ScanToEnd = false;
            try {
                if (!checkΣForIfClause()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3654;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:402:4
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ402Σ4() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:402:4
            PushOntoLookaheadStack("StarEtc", "Python.javacc", 402, 4);
            var prevProduction3655 = _currentLookaheadProduction;
            _currentLookaheadProduction = "KeyWords";
            ScanToEnd = false;
            try {
                if (!checkΣKeyWords()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3655;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:404:4
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ404Σ4() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:404:4
            if (!ScanToken(TokenType.STAR)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:404:8
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 0;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:404:17
            PushOntoLookaheadStack("StarEtc", "Python.javacc", 404, 17);
            var prevProduction3656 = _currentLookaheadProduction;
            _currentLookaheadProduction = "ParamMaybeDefault";
            ScanToEnd = true;
            try {
                if (!checkΣParamMaybeDefault()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3656;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:404:35
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3657 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ404Σ36())) {
                    currentLookaheadToken = token3657;
                    break;
                }
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:404:66
            var token3658 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ404Σ67())) {
                currentLookaheadToken = token3658;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:404:36
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ404Σ36() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:404:36
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 1;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:404:46
            PushOntoLookaheadStack("StarEtc", "Python.javacc", 404, 46);
            var prevProduction3659 = _currentLookaheadProduction;
            _currentLookaheadProduction = "ParamMaybeDefault";
            ScanToEnd = true;
            try {
                if (!checkΣParamMaybeDefault()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3659;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:404:67
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ404Σ67() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:404:67
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:404:71
            var token3660 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ404Σ72())) {
                currentLookaheadToken = token3660;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:404:72
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ404Σ72() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:404:72
            PushOntoLookaheadStack("StarEtc", "Python.javacc", 404, 72);
            var prevProduction3661 = _currentLookaheadProduction;
            _currentLookaheadProduction = "KeyWords";
            ScanToEnd = false;
            try {
                if (!checkΣKeyWords()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3661;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:406:4
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ406Σ4() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:406:4
            if (!ScanToken(TokenType.STAR)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:406:8
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:406:15
            var token3662 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ406Σ16())) {
                currentLookaheadToken = token3662;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:406:64
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3663 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ406Σ65())) {
                    currentLookaheadToken = token3663;
                    break;
                }
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:406:95
            var token3664 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ406Σ96())) {
                currentLookaheadToken = token3664;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:406:16
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ406Σ16() {
        try {
            _lookaheadRoutineNesting++;
            if (!backscanΣPython_javaccΣ406Σ23()) {
                return _lastLookaheadSucceeded = false;
            }
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:406:48
            if (!ScanToken(TokenType.COLON)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:406:52
            PushOntoLookaheadStack("StarEtc", "Python.javacc", 406, 52);
            var prevProduction3665 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Expression";
            ScanToEnd = true;
            try {
                if (!checkΣExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3665;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:406:65
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ406Σ65() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:406:65
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 1;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:406:75
            PushOntoLookaheadStack("StarEtc", "Python.javacc", 406, 75);
            var prevProduction3666 = _currentLookaheadProduction;
            _currentLookaheadProduction = "ParamMaybeDefault";
            ScanToEnd = true;
            try {
                if (!checkΣParamMaybeDefault()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3666;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:406:96
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ406Σ96() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:406:96
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:406:100
            var token3667 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ406Σ101())) {
                currentLookaheadToken = token3667;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:406:101
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ406Σ101() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:406:101
            PushOntoLookaheadStack("StarEtc", "Python.javacc", 406, 101);
            var prevProduction3668 = _currentLookaheadProduction;
            _currentLookaheadProduction = "KeyWords";
            ScanToEnd = false;
            try {
                if (!checkΣKeyWords()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3668;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:409:29
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ409Σ29() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:409:29
            if (!ScanToken(TokenType.COLON)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:409:33
            PushOntoLookaheadStack("ParamMaybeDefault", "Python.javacc", 409, 33);
            var prevProduction3669 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Expression";
            ScanToEnd = true;
            try {
                if (!checkΣExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3669;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:409:46
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ409Σ46() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:409:46
            if (!ScanToken(TokenType.ASSIGN)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:409:50
            PushOntoLookaheadStack("ParamMaybeDefault", "Python.javacc", 409, 50);
            var prevProduction3670 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Expression";
            ScanToEnd = true;
            try {
                if (!checkΣExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3670;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:414:8
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ414Σ8() {
        try {
            _lookaheadRoutineNesting++;
            if (backscanΣPython_javaccΣ414Σ15()) {
                return _lastLookaheadSucceeded = false;
            }
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:415:8
            if (!ScanToken(TokenType.COLON)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:415:12
            PushOntoLookaheadStack("KeyWords", "Python.javacc", 415, 12);
            var prevProduction3671 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Expression";
            ScanToEnd = true;
            try {
                if (!checkΣExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3671;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:422:7
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ422Σ7() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:422:7
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:425:7
            var token3672 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ425Σ8())) {
                currentLookaheadToken = token3672;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:426:7
            var token3673 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ426Σ8())) {
                currentLookaheadToken = token3673;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:427:7
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3674 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ427Σ8())) {
                    currentLookaheadToken = token3674;
                    break;
                }
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:442:7
            var token3675 = currentLookaheadToken;
            if (!(ScanToken(TokenType.COMMA))) {
                currentLookaheadToken = token3675;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:425:8
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ425Σ8() {
        try {
            _lookaheadRoutineNesting++;
            if (!backscanΣPython_javaccΣ425Σ15()) {
                return _lastLookaheadSucceeded = false;
            }
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:425:38
            if (!ScanToken(TokenType.COLON)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:425:42
            PushOntoLookaheadStack("Parameters", "Python.javacc", 425, 42);
            var prevProduction3676 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Expression";
            ScanToEnd = true;
            try {
                if (!checkΣExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3676;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:426:8
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ426Σ8() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:426:8
            if (!ScanToken(TokenType.ASSIGN)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:426:12
            PushOntoLookaheadStack("Parameters", "Python.javacc", 426, 12);
            var prevProduction3677 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Expression";
            ScanToEnd = true;
            try {
                if (!checkΣExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3677;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for CodeBlock specified at Python.javacc:426:23


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:427:8
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ427Σ8() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:427:8
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 1;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:430:11
            var token3678 = currentLookaheadToken;
            var remainingLookahead3678 = _remainingLookahead;
            var hitFailure3678 = _hitFailure;
            if (!ScanToken(TokenType.SLASH)) {
                currentLookaheadToken = token3678;
                _remainingLookahead = remainingLookahead3678;
                _hitFailure = hitFailure3678;
                if (!checkΣPython_javaccΣ433Σ11()) {
                    currentLookaheadToken = token3678;
                    _remainingLookahead = remainingLookahead3678;
                    _hitFailure = hitFailure3678;
                    return _lastLookaheadSucceeded = false;
                }
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }


    // scanahead routine for expansion at:
    // Python.javacc:433:11
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ433Σ11() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:433:11
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:433:18
            var token3679 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ433Σ19())) {
                currentLookaheadToken = token3679;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:434:11
            var token3680 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ437Σ14())) {
                currentLookaheadToken = token3680;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:433:19
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ433Σ19() {
        try {
            _lookaheadRoutineNesting++;
            if (!backscanΣPython_javaccΣ433Σ26()) {
                return _lastLookaheadSucceeded = false;
            }
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:433:49
            if (!ScanToken(TokenType.COLON)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:433:53
            PushOntoLookaheadStack("Parameters", "Python.javacc", 433, 53);
            var prevProduction3681 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Expression";
            ScanToEnd = true;
            try {
                if (!checkΣExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3681;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:437:14
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ437Σ14() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:438:17
            if (!ScanToken(TokenType.ASSIGN)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:438:21
            PushOntoLookaheadStack("Parameters", "Python.javacc", 438, 21);
            var prevProduction3682 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Expression";
            ScanToEnd = true;
            try {
                if (!checkΣExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3682;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for CodeBlock specified at Python.javacc:438:32


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }


    // scanahead routine for expansion at:
    // Python.javacc:445:7
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ445Σ7() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }
            if (checkΣPython_javaccΣ445Σ13()) {
                _lastLookaheadSucceeded = true;
                return false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:445:26
            PushOntoLookaheadStack("Parameters", "Python.javacc", 445, 26);
            var prevProduction3683 = _currentLookaheadProduction;
            _currentLookaheadProduction = "StarEtc";
            ScanToEnd = false;
            try {
                if (!checkΣStarEtc()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3683;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

















    // scanahead routine for expansion at:
    // Python.javacc:456:4
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ456Σ4() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:456:4
            PushOntoLookaheadStack("SimpleAssignTarget", "Python.javacc", 456, 4);
            var prevProduction3684 = _currentLookaheadProduction;
            _currentLookaheadProduction = "PrimaryExpression";
            ScanToEnd = false;
            try {
                if (!checkΣPrimaryExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3684;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:458:4
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ458Σ4() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:458:4
            if (!ScanToken(TokenType.LPAREN)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:458:8
            PushOntoLookaheadStack("SimpleAssignTarget", "Python.javacc", 458, 8);
            var prevProduction3685 = _currentLookaheadProduction;
            _currentLookaheadProduction = "SimpleAssignTarget";
            ScanToEnd = true;
            try {
                if (!checkΣSimpleAssignTarget()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3685;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:458:27
            if (!ScanToken(TokenType.RPAREN)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:462:7
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ462Σ7Σ() {
        try {
            _lookaheadRoutineNesting++;
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:462:8
            PushOntoLookaheadStack("Assignment", "Python.javacc", 462, 8);
            var prevProduction3686 = _currentLookaheadProduction;
            _currentLookaheadProduction = "SimpleAssignTarget";
            ScanToEnd = true;
            try {
                if (!checkΣSimpleAssignTarget()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3686;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:462:28
            if (!ScanToken(first_setΣPython_javaccΣ462Σ28)) {
                return _lastLookaheadSucceeded = false;
            }




            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:462:8
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ462Σ8() {
        try {
            _lookaheadRoutineNesting++;
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:462:8
            PushOntoLookaheadStack("Assignment", "Python.javacc", 462, 8);
            var prevProduction3687 = _currentLookaheadProduction;
            _currentLookaheadProduction = "SimpleAssignTarget";
            ScanToEnd = true;
            try {
                if (!checkΣSimpleAssignTarget()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3687;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:462:28
            if (!ScanToken(first_setΣPython_javaccΣ462Σ28)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }



    // scanahead routine for expansion at:
    // Python.javacc:462:48
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ462Σ48() {
        try {
            _lookaheadRoutineNesting++;
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:462:49
            PushOntoLookaheadStack("Assignment", "Python.javacc", 462, 49);
            var prevProduction3688 = _currentLookaheadProduction;
            _currentLookaheadProduction = "StarTargets";
            ScanToEnd = true;
            try {
                if (!checkΣStarTargets()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3688;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:462:61
            if (!ScanToken(TokenType.ASSIGN)) {
                return _lastLookaheadSucceeded = false;
            }




            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:462:49
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ462Σ49() {
        try {
            _lookaheadRoutineNesting++;
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:462:49
            PushOntoLookaheadStack("Assignment", "Python.javacc", 462, 49);
            var prevProduction3689 = _currentLookaheadProduction;
            _currentLookaheadProduction = "StarTargets";
            ScanToEnd = true;
            try {
                if (!checkΣStarTargets()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3689;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:462:61
            if (!ScanToken(TokenType.ASSIGN)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:464:3
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ464Σ3() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:464:3
            PushOntoLookaheadStack("Assignment", "Python.javacc", 464, 3);
            var prevProduction3690 = _currentLookaheadProduction;
            _currentLookaheadProduction = "SimpleAssignTarget";
            ScanToEnd = true;
            try {
                if (!checkΣSimpleAssignTarget()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3690;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:464:22
            if (!ScanToken(TokenType.COLON)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 0;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:464:31
            PushOntoLookaheadStack("Assignment", "Python.javacc", 464, 31);
            var prevProduction3691 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Expression";
            ScanToEnd = true;
            try {
                if (!checkΣExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3691;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:464:42
            var token3692 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ464Σ43())) {
                currentLookaheadToken = token3692;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:464:43
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ464Σ43() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:464:43
            if (!ScanToken(TokenType.ASSIGN)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:464:47
            PushOntoLookaheadStack("Assignment", "Python.javacc", 464, 47);
            var prevProduction3693 = _currentLookaheadProduction;
            _currentLookaheadProduction = "AnnotatedRhs";
            ScanToEnd = true;
            try {
                if (!checkΣAnnotatedRhs()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3693;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:466:3
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ466Σ3() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:466:3
            PushOntoLookaheadStack("Assignment", "Python.javacc", 466, 3);
            var prevProduction3694 = _currentLookaheadProduction;
            _currentLookaheadProduction = "SimpleAssignTarget";
            ScanToEnd = true;
            try {
                if (!checkΣSimpleAssignTarget()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3694;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:466:22
            if (!ScanToken(first_setΣPython_javaccΣ466Σ22)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 0;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:466:38
            var token3695 = currentLookaheadToken;
            var remainingLookahead3695 = _remainingLookahead;
            var hitFailure3695 = _hitFailure;
            if (!checkΣPython_javaccΣ466Σ38()) {
                currentLookaheadToken = token3695;
                _remainingLookahead = remainingLookahead3695;
                _hitFailure = hitFailure3695;
                if (!checkΣPython_javaccΣ466Σ56()) {
                    currentLookaheadToken = token3695;
                    _remainingLookahead = remainingLookahead3695;
                    _hitFailure = hitFailure3695;
                    return _lastLookaheadSucceeded = false;
                }
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:466:38
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ466Σ38() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:466:38
            PushOntoLookaheadStack("Assignment", "Python.javacc", 466, 38);
            var prevProduction3696 = _currentLookaheadProduction;
            _currentLookaheadProduction = "YieldExpression";
            ScanToEnd = false;
            try {
                if (!checkΣYieldExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3696;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:466:56
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ466Σ56() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:466:56
            PushOntoLookaheadStack("Assignment", "Python.javacc", 466, 56);
            var prevProduction3697 = _currentLookaheadProduction;
            _currentLookaheadProduction = "StarExpressions";
            ScanToEnd = false;
            try {
                if (!checkΣStarExpressions()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3697;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:468:3
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ468Σ3() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for OneOrMore specified at Python.javacc:468:3
            if (!(checkΣPython_javaccΣ468Σ4())) {
                return _lastLookaheadSucceeded = false;
            }
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3698 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ468Σ4())) {
                    currentLookaheadToken = token3698;
                    break;
                }
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 0;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:468:30
            var token3699 = currentLookaheadToken;
            var remainingLookahead3699 = _remainingLookahead;
            var hitFailure3699 = _hitFailure;
            if (!checkΣPython_javaccΣ468Σ30()) {
                currentLookaheadToken = token3699;
                _remainingLookahead = remainingLookahead3699;
                _hitFailure = hitFailure3699;
                if (!checkΣPython_javaccΣ468Σ48()) {
                    currentLookaheadToken = token3699;
                    _remainingLookahead = remainingLookahead3699;
                    _hitFailure = hitFailure3699;
                    return _lastLookaheadSucceeded = false;
                }
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:468:4
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ468Σ4() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:468:6
            PushOntoLookaheadStack("Assignment", "Python.javacc", 468, 6);
            var prevProduction3700 = _currentLookaheadProduction;
            _currentLookaheadProduction = "StarTargets";
            ScanToEnd = false;
            try {
                if (!checkΣStarTargets()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3700;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:468:18
            if (!ScanToken(TokenType.ASSIGN)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:468:30
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ468Σ30() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:468:30
            PushOntoLookaheadStack("Assignment", "Python.javacc", 468, 30);
            var prevProduction3701 = _currentLookaheadProduction;
            _currentLookaheadProduction = "YieldExpression";
            ScanToEnd = false;
            try {
                if (!checkΣYieldExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3701;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:468:48
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ468Σ48() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:468:48
            PushOntoLookaheadStack("Assignment", "Python.javacc", 468, 48);
            var prevProduction3702 = _currentLookaheadProduction;
            _currentLookaheadProduction = "StarExpressions";
            ScanToEnd = false;
            try {
                if (!checkΣStarExpressions()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3702;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }


    // scanahead routine for expansion at:
    // Python.javacc:482:26
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ482Σ26() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:482:26
            PushOntoLookaheadStack("MatchStatement", "Python.javacc", 482, 26);
            var prevProduction3703 = _currentLookaheadProduction;
            _currentLookaheadProduction = "CaseBlock";
            ScanToEnd = false;
            try {
                if (!checkΣCaseBlock()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3703;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:490:7
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ490Σ7() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:490:7
            PushOntoLookaheadStack("CaseBlock", "Python.javacc", 490, 7);
            var prevProduction3704 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Patterns";
            ScanToEnd = false;
            try {
                if (!checkΣPatterns()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3704;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:491:7
            var token3705 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ491Σ8())) {
                currentLookaheadToken = token3705;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:492:7
            if (!ScanToken(TokenType.COLON)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:493:7
            PushOntoLookaheadStack("CaseBlock", "Python.javacc", 493, 7);
            var prevProduction3706 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Block";
            ScanToEnd = true;
            try {
                if (!checkΣBlock()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3706;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:491:8
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ491Σ8() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:491:8
            if (!ScanToken(TokenType.IF)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:491:13
            PushOntoLookaheadStack("CaseBlock", "Python.javacc", 491, 13);
            var prevProduction3707 = _currentLookaheadProduction;
            _currentLookaheadProduction = "NamedExpression";
            ScanToEnd = true;
            try {
                if (!checkΣNamedExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3707;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:499:4
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ499Σ4() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:499:4
            PushOntoLookaheadStack("Patterns", "Python.javacc", 499, 4);
            var prevProduction3708 = _currentLookaheadProduction;
            _currentLookaheadProduction = "OpenSequencePattern";
            ScanToEnd = false;
            try {
                if (!checkΣOpenSequencePattern()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3708;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:501:4
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ501Σ4() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:501:4
            PushOntoLookaheadStack("Patterns", "Python.javacc", 501, 4);
            var prevProduction3709 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Pattern";
            ScanToEnd = false;
            try {
                if (!checkΣPattern()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3709;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:508:25
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ508Σ25() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:508:25
            PushOntoLookaheadStack("MaybeStarPattern", "Python.javacc", 508, 25);
            var prevProduction3710 = _currentLookaheadProduction;
            _currentLookaheadProduction = "StarPattern";
            ScanToEnd = false;
            try {
                if (!checkΣStarPattern()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3710;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:508:39
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ508Σ39() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:508:39
            PushOntoLookaheadStack("MaybeStarPattern", "Python.javacc", 508, 39);
            var prevProduction3711 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Pattern";
            ScanToEnd = false;
            try {
                if (!checkΣPattern()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3711;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:511:4
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ511Σ4() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:511:4
            PushOntoLookaheadStack("ClosedPattern", "Python.javacc", 511, 4);
            var prevProduction3712 = _currentLookaheadProduction;
            _currentLookaheadProduction = "ClassPattern";
            ScanToEnd = false;
            try {
                if (!checkΣClassPattern()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3712;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:513:4
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ513Σ4() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:513:4
            PushOntoLookaheadStack("ClosedPattern", "Python.javacc", 513, 4);
            var prevProduction3713 = _currentLookaheadProduction;
            _currentLookaheadProduction = "LiteralPattern";
            ScanToEnd = false;
            try {
                if (!checkΣLiteralPattern()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3713;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:515:4
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ515Σ4() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:515:4
            PushOntoLookaheadStack("ClosedPattern", "Python.javacc", 515, 4);
            var prevProduction3714 = _currentLookaheadProduction;
            _currentLookaheadProduction = "NameOrAttribute";
            ScanToEnd = false;
            try {
                if (!checkΣNameOrAttribute()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3714;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:517:4
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ517Σ4() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:517:6
            PushOntoLookaheadStack("ClosedPattern", "Python.javacc", 517, 6);
            var prevProduction3715 = _currentLookaheadProduction;
            _currentLookaheadProduction = "GroupPattern";
            ScanToEnd = false;
            try {
                if (!checkΣGroupPattern()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3715;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:519:4
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ519Σ4() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:519:4
            PushOntoLookaheadStack("ClosedPattern", "Python.javacc", 519, 4);
            var prevProduction3716 = _currentLookaheadProduction;
            _currentLookaheadProduction = "SequencePattern";
            ScanToEnd = false;
            try {
                if (!checkΣSequencePattern()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3716;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:521:4
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ521Σ4() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:521:4
            PushOntoLookaheadStack("ClosedPattern", "Python.javacc", 521, 4);
            var prevProduction3717 = _currentLookaheadProduction;
            _currentLookaheadProduction = "MappingPattern";
            ScanToEnd = false;
            try {
                if (!checkΣMappingPattern()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3717;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:526:19
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ526Σ19() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:526:19
            PushOntoLookaheadStack("KeyValuePattern", "Python.javacc", 526, 19);
            var prevProduction3718 = _currentLookaheadProduction;
            _currentLookaheadProduction = "LiteralPattern";
            ScanToEnd = false;
            try {
                if (!checkΣLiteralPattern()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3718;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:526:36
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ526Σ36() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:526:36
            PushOntoLookaheadStack("KeyValuePattern", "Python.javacc", 526, 36);
            var prevProduction3719 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Attribute";
            ScanToEnd = false;
            try {
                if (!checkΣAttribute()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3719;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:528:33
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ528Σ33() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:528:33
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 1;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:528:43
            PushOntoLookaheadStack("ItemsPattern", "Python.javacc", 528, 43);
            var prevProduction3720 = _currentLookaheadProduction;
            _currentLookaheadProduction = "KeyValuePattern";
            ScanToEnd = true;
            try {
                if (!checkΣKeyValuePattern()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3720;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:533:10
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ533Σ10() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:533:10
            var token3721 = currentLookaheadToken;
            var remainingLookahead3721 = _remainingLookahead;
            var hitFailure3721 = _hitFailure;
            if (!checkΣPython_javaccΣ533Σ10Σ()) {
                currentLookaheadToken = token3721;
                _remainingLookahead = remainingLookahead3721;
                _hitFailure = hitFailure3721;
                if (!checkΣPython_javaccΣ535Σ10()) {
                    currentLookaheadToken = token3721;
                    _remainingLookahead = remainingLookahead3721;
                    _hitFailure = hitFailure3721;
                    return _lastLookaheadSucceeded = false;
                }
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:533:10
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ533Σ10Σ() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:533:10
            PushOntoLookaheadStack("MappingPattern", "Python.javacc", 533, 10);
            var prevProduction3722 = _currentLookaheadProduction;
            _currentLookaheadProduction = "ItemsPattern";
            ScanToEnd = false;
            try {
                if (!checkΣItemsPattern()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3722;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:533:23
            var token3723 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ533Σ24())) {
                currentLookaheadToken = token3723;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:533:53
            var token3724 = currentLookaheadToken;
            if (!(ScanToken(TokenType.COMMA))) {
                currentLookaheadToken = token3724;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:533:24
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ533Σ24() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:533:24
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 1;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:533:34
            PushOntoLookaheadStack("MappingPattern", "Python.javacc", 533, 34);
            var prevProduction3725 = _currentLookaheadProduction;
            _currentLookaheadProduction = "DoubleStarPattern";
            ScanToEnd = true;
            try {
                if (!checkΣDoubleStarPattern()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3725;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }


    // scanahead routine for expansion at:
    // Python.javacc:535:10
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ535Σ10() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:535:10
            PushOntoLookaheadStack("MappingPattern", "Python.javacc", 535, 10);
            var prevProduction3726 = _currentLookaheadProduction;
            _currentLookaheadProduction = "DoubleStarPattern";
            ScanToEnd = false;
            try {
                if (!checkΣDoubleStarPattern()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3726;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:535:28
            var token3727 = currentLookaheadToken;
            if (!(ScanToken(TokenType.COMMA))) {
                currentLookaheadToken = token3727;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }





    // scanahead routine for expansion at:
    // Python.javacc:549:4
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ549Σ4() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:549:4
            PushOntoLookaheadStack("LiteralPattern", "Python.javacc", 549, 4);
            var prevProduction3728 = _currentLookaheadProduction;
            _currentLookaheadProduction = "SignedNumber";
            ScanToEnd = false;
            try {
                if (!checkΣSignedNumber()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3728;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:551:4
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ551Σ4() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:551:4
            PushOntoLookaheadStack("LiteralPattern", "Python.javacc", 551, 4);
            var prevProduction3729 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Strings";
            ScanToEnd = false;
            try {
                if (!checkΣStrings()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3729;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:555:22
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ555Σ22() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:555:22
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 1;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:555:32
            PushOntoLookaheadStack("MaybeSequencePattern", "Python.javacc", 555, 32);
            var prevProduction3730 = _currentLookaheadProduction;
            _currentLookaheadProduction = "MaybeStarPattern";
            ScanToEnd = true;
            try {
                if (!checkΣMaybeStarPattern()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3730;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }


    // scanahead routine for expansion at:
    // Python.javacc:559:31
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ559Σ31() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:559:31
            PushOntoLookaheadStack("OpenSequencePattern", "Python.javacc", 559, 31);
            var prevProduction3731 = _currentLookaheadProduction;
            _currentLookaheadProduction = "MaybeSequencePattern";
            ScanToEnd = false;
            try {
                if (!checkΣMaybeSequencePattern()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3731;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:563:5
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ563Σ5() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:563:5
            if (!ScanToken(TokenType.LBRACKET)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:563:9
            var token3732 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ563Σ10())) {
                currentLookaheadToken = token3732;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:563:32
            if (!ScanToken(TokenType.RBRACKET)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:563:10
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ563Σ10() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:563:10
            PushOntoLookaheadStack("SequencePattern", "Python.javacc", 563, 10);
            var prevProduction3733 = _currentLookaheadProduction;
            _currentLookaheadProduction = "MaybeSequencePattern";
            ScanToEnd = false;
            try {
                if (!checkΣMaybeSequencePattern()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3733;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:565:5
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ565Σ5() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:565:5
            if (!ScanToken(TokenType.LPAREN)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:565:9
            var token3734 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ565Σ10())) {
                currentLookaheadToken = token3734;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:565:31
            if (!ScanToken(TokenType.RPAREN)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:565:10
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ565Σ10() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:565:10
            PushOntoLookaheadStack("SequencePattern", "Python.javacc", 565, 10);
            var prevProduction3735 = _currentLookaheadProduction;
            _currentLookaheadProduction = "OpenSequencePattern";
            ScanToEnd = false;
            try {
                if (!checkΣOpenSequencePattern()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3735;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:573:11
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ573Σ11Σ() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:573:11
            var token3736 = currentLookaheadToken;
            var remainingLookahead3736 = _remainingLookahead;
            var hitFailure3736 = _hitFailure;
            if (!checkΣPython_javaccΣ573Σ11()) {
                currentLookaheadToken = token3736;
                _remainingLookahead = remainingLookahead3736;
                _hitFailure = hitFailure3736;
                if (!checkΣPython_javaccΣ576Σ11()) {
                    currentLookaheadToken = token3736;
                    _remainingLookahead = remainingLookahead3736;
                    _hitFailure = hitFailure3736;
                    return _lastLookaheadSucceeded = false;
                }
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:573:11
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ573Σ11() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }
            if (!checkΣPython_javaccΣ573Σ16()) {
                _lastLookaheadSucceeded = false;
                return false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:574:11
            PushOntoLookaheadStack("ClassPattern", "Python.javacc", 574, 11);
            var prevProduction3737 = _currentLookaheadProduction;
            _currentLookaheadProduction = "KeywordPatterns";
            ScanToEnd = false;
            try {
                if (!checkΣKeywordPatterns()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3737;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:574:27
            var token3738 = currentLookaheadToken;
            if (!(ScanToken(TokenType.COMMA))) {
                currentLookaheadToken = token3738;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }


    // scanahead routine for expansion at:
    // Python.javacc:576:11
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ576Σ11() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:576:11
            PushOntoLookaheadStack("ClassPattern", "Python.javacc", 576, 11);
            var prevProduction3739 = _currentLookaheadProduction;
            _currentLookaheadProduction = "PositionalPatterns";
            ScanToEnd = false;
            try {
                if (!checkΣPositionalPatterns()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3739;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:576:30
            var token3740 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ576Σ31())) {
                currentLookaheadToken = token3740;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:576:58
            var token3741 = currentLookaheadToken;
            if (!(ScanToken(TokenType.COMMA))) {
                currentLookaheadToken = token3741;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:576:31
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ576Σ31() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:576:31
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 1;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:576:41
            PushOntoLookaheadStack("ClassPattern", "Python.javacc", 576, 41);
            var prevProduction3742 = _currentLookaheadProduction;
            _currentLookaheadProduction = "KeywordPatterns";
            ScanToEnd = true;
            try {
                if (!checkΣKeywordPatterns()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3742;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }


    // scanahead routine for expansion at:
    // Python.javacc:586:8
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ586Σ8() {
        try {
            _lookaheadRoutineNesting++;
            if (!((GetToken(1).Type == TokenType.COMMA) && (!((GetToken(2).Type == TokenType.NAME) && (GetToken(3).Type == TokenType.ASSIGN))))) {
                return _lastLookaheadSucceeded = false;
            }
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:587:11
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:587:15
            PushOntoLookaheadStack("PositionalPatterns", "Python.javacc", 587, 15);
            var prevProduction3743 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Pattern";
            ScanToEnd = true;
            try {
                if (!checkΣPattern()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3743;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:593:35
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ593Σ35() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:593:35
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 2;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:593:45
            PushOntoLookaheadStack("KeywordPatterns", "Python.javacc", 593, 45);
            var prevProduction3744 = _currentLookaheadProduction;
            _currentLookaheadProduction = "KeywordPattern";
            ScanToEnd = true;
            try {
                if (!checkΣKeywordPattern()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3744;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:595:28
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ595Σ28() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:595:28
            if (!ScanToken(TokenType.BIT_OR)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:595:32
            PushOntoLookaheadStack("OrPattern", "Python.javacc", 595, 32);
            var prevProduction3745 = _currentLookaheadProduction;
            _currentLookaheadProduction = "ClosedPattern";
            ScanToEnd = true;
            try {
                if (!checkΣClosedPattern()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3745;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:597:22
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ597Σ22() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:597:22
            if (!ScanToken(TokenType.AS)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:597:27
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:600:4
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ600Σ4() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:600:4
            PushOntoLookaheadStack("SubjectExpression", "Python.javacc", 600, 4);
            var prevProduction3746 = _currentLookaheadProduction;
            _currentLookaheadProduction = "StarNamedExpression";
            ScanToEnd = true;
            try {
                if (!checkΣStarNamedExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3746;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:600:24
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 0;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:600:33
            var token3747 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ600Σ34())) {
                currentLookaheadToken = token3747;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:600:34
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ600Σ34() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:600:34
            PushOntoLookaheadStack("SubjectExpression", "Python.javacc", 600, 34);
            var prevProduction3748 = _currentLookaheadProduction;
            _currentLookaheadProduction = "StarNamedExpressions";
            ScanToEnd = false;
            try {
                if (!checkΣStarNamedExpressions()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3748;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:602:4
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ602Σ4() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:602:4
            PushOntoLookaheadStack("SubjectExpression", "Python.javacc", 602, 4);
            var prevProduction3749 = _currentLookaheadProduction;
            _currentLookaheadProduction = "NamedExpression";
            ScanToEnd = false;
            try {
                if (!checkΣNamedExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3749;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:605:21
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ605Σ21() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:605:21
            if (!ScanToken(TokenType.DOT)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:605:25
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at:
    // Python.javacc:607:42
    // BuildScanRoutine macro
    private bool checkΣPython_javaccΣ607Σ42() {
        try {
            _lookaheadRoutineNesting++;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:607:42
            if (!ScanToken(TokenType.DOT)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:607:46
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
        }
    }

    // predicate routine for expansion at:
    // Python.javacc:56:6
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ56Σ6() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = true;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }
            if (!checkΣPython_javaccΣ241Σ9()) {
                _lastLookaheadSucceeded = false;
                return false;
            }

            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:56:14
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ56Σ14() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:56:14
            PushOntoLookaheadStack("AtomicExpression", "Python.javacc", 56, 14);
            var prevProduction3750 = _currentLookaheadProduction;
            _currentLookaheadProduction = "GenExp";
            ScanToEnd = false;
            try {
                if (!checkΣGenExp()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3750;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:58:6
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ58Σ6() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:58:6
            PushOntoLookaheadStack("AtomicExpression", "Python.javacc", 58, 6);
            var prevProduction3751 = _currentLookaheadProduction;
            _currentLookaheadProduction = "ListComp";
            ScanToEnd = false;
            try {
                if (!checkΣListComp()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3751;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:60:6
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ60Σ6() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:60:6
            PushOntoLookaheadStack("AtomicExpression", "Python.javacc", 60, 6);
            var prevProduction3752 = _currentLookaheadProduction;
            _currentLookaheadProduction = "SetComp";
            ScanToEnd = false;
            try {
                if (!checkΣSetComp()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3752;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:60:16
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ60Σ16() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:60:16
            PushOntoLookaheadStack("AtomicExpression", "Python.javacc", 60, 16);
            var prevProduction3753 = _currentLookaheadProduction;
            _currentLookaheadProduction = "DictComp";
            ScanToEnd = false;
            try {
                if (!checkΣDictComp()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3753;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:60:27
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ60Σ27() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = true;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }
            if (!checkΣPython_javaccΣ332Σ8()) {
                _lastLookaheadSucceeded = false;
                return false;
            }

            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:66:5
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ66Σ5() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:66:5
            var token3754 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ66Σ6())) {
                currentLookaheadToken = token3754;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:66:18
            if (!ScanToken(TokenType.COLON)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 0;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:66:27
            var token3755 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ66Σ28())) {
                currentLookaheadToken = token3755;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:66:40
            var token3756 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ66Σ41())) {
                currentLookaheadToken = token3756;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:68:6
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ68Σ6() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:68:9
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:68:16
            if (!ScanToken(TokenType.COLONEQUALS)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:71:21
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ71Σ21() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:71:21
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 1;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:71:31
            PushOntoLookaheadStack("Slices", "Python.javacc", 71, 31);
            var prevProduction3757 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Slice";
            ScanToEnd = true;
            try {
                if (!checkΣSlice()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3757;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:74:4
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ74Σ4() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:74:4
            PushOntoLookaheadStack("Statement", "Python.javacc", 74, 4);
            var prevProduction3758 = _currentLookaheadProduction;
            _currentLookaheadProduction = "MatchStatement";
            ScanToEnd = false;
            try {
                if (!checkΣMatchStatement()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3758;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:81:40
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ81Σ40() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:81:40
            if (!ScanToken(TokenType.SEMICOLON)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 1;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:81:50
            PushOntoLookaheadStack("SimpleStatement", "Python.javacc", 81, 50);
            var prevProduction3759 = _currentLookaheadProduction;
            _currentLookaheadProduction = "SmallStatement";
            ScanToEnd = true;
            try {
                if (!checkΣSmallStatement()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3759;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:84:4
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ84Σ4() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = true;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }
            if (!checkΣPython_javaccΣ462Σ7()) {
                _lastLookaheadSucceeded = false;
                return false;
            }

            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:112:5
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ112Σ5() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:112:5
            PushOntoLookaheadStack("CompoundStatement", "Python.javacc", 112, 5);
            var prevProduction3760 = _currentLookaheadProduction;
            _currentLookaheadProduction = "FunctionDefinition";
            ScanToEnd = false;
            try {
                if (!checkΣFunctionDefinition()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3760;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:116:5
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ116Σ5() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:116:5
            PushOntoLookaheadStack("CompoundStatement", "Python.javacc", 116, 5);
            var prevProduction3761 = _currentLookaheadProduction;
            _currentLookaheadProduction = "ClassDefinition";
            ScanToEnd = false;
            try {
                if (!checkΣClassDefinition()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3761;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:118:5
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ118Σ5() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:118:5
            PushOntoLookaheadStack("CompoundStatement", "Python.javacc", 118, 5);
            var prevProduction3762 = _currentLookaheadProduction;
            _currentLookaheadProduction = "WithStatement";
            ScanToEnd = false;
            try {
                if (!checkΣWithStatement()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3762;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:122:5
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ122Σ5() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:122:5
            PushOntoLookaheadStack("CompoundStatement", "Python.javacc", 122, 5);
            var prevProduction3763 = _currentLookaheadProduction;
            _currentLookaheadProduction = "ForStatement";
            ScanToEnd = false;
            try {
                if (!checkΣForStatement()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3763;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:158:5
    // BuildPredicateRoutine macro
    private bool scanΣWithStatement() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:158:5
            var token3764 = currentLookaheadToken;
            if (!(ScanToken(TokenType.ASYNC))) {
                currentLookaheadToken = token3764;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:158:15
            if (!ScanToken(TokenType.WITH)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 0;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:160:9
            var token3765 = currentLookaheadToken;
            var remainingLookahead3765 = _remainingLookahead;
            var hitFailure3765 = _hitFailure;
            if (!checkΣPython_javaccΣ160Σ9()) {
                currentLookaheadToken = token3765;
                _remainingLookahead = remainingLookahead3765;
                _hitFailure = hitFailure3765;
                if (!checkΣPython_javaccΣ162Σ9()) {
                    currentLookaheadToken = token3765;
                    _remainingLookahead = remainingLookahead3765;
                    _hitFailure = hitFailure3765;
                    return _lastLookaheadSucceeded = false;
                }
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:164:5
            if (!ScanToken(TokenType.COLON)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:164:9
            PushOntoLookaheadStack("WithStatement", "Python.javacc", 164, 9);
            var prevProduction3766 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Block";
            ScanToEnd = true;
            try {
                if (!checkΣBlock()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3766;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:160:9
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ160Σ9() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = true;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }
            if (!checkΣPython_javaccΣ160Σ14()) {
                _lastLookaheadSucceeded = false;
                return false;
            }

            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:167:45
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ167Σ45() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = 2;
            _hitFailure = false;
            ScanToEnd = true;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:167:52
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:167:56
            PushOntoLookaheadStack("WithItemsInParentheses", "Python.javacc", 167, 56);
            var prevProduction3767 = _currentLookaheadProduction;
            _currentLookaheadProduction = "WithItem";
            ScanToEnd = true;
            try {
                if (!checkΣWithItem()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3767;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:172:4
    // BuildPredicateRoutine macro
    private bool scanΣForStatement() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:172:4
            var token3768 = currentLookaheadToken;
            if (!(ScanToken(TokenType.ASYNC))) {
                currentLookaheadToken = token3768;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:172:14
            if (!ScanToken(TokenType.FOR)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 0;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:173:4
            PushOntoLookaheadStack("ForStatement", "Python.javacc", 173, 4);
            var prevProduction3769 = _currentLookaheadProduction;
            _currentLookaheadProduction = "StarTargets";
            ScanToEnd = true;
            try {
                if (!checkΣStarTargets()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3769;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:173:16
            if (!ScanToken(TokenType.IN)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:173:21
            PushOntoLookaheadStack("ForStatement", "Python.javacc", 173, 21);
            var prevProduction3770 = _currentLookaheadProduction;
            _currentLookaheadProduction = "StarExpressions";
            ScanToEnd = true;
            try {
                if (!checkΣStarExpressions()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3770;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:173:37
            if (!ScanToken(TokenType.COLON)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:174:4
            PushOntoLookaheadStack("ForStatement", "Python.javacc", 174, 4);
            var prevProduction3771 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Block";
            ScanToEnd = true;
            try {
                if (!checkΣBlock()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3771;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:174:10
            var token3772 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ174Σ11())) {
                currentLookaheadToken = token3772;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:186:41
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ186Σ41() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = 2;
            _hitFailure = false;
            ScanToEnd = true;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:186:48
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:186:52
            PushOntoLookaheadStack("DelStatement", "Python.javacc", 186, 52);
            var prevProduction3773 = _currentLookaheadProduction;
            _currentLookaheadProduction = "PrimaryExpression";
            ScanToEnd = true;
            try {
                if (!checkΣPrimaryExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3773;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:188:21
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ188Σ21() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:188:24
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:188:31
            if (!ScanToken(TokenType.COLONEQUALS)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:190:22
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ190Σ22() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:190:25
            if (!ScanToken(TokenType.DOT)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:190:29
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:192:32
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ192Σ32() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:192:32
            PushOntoLookaheadStack("ImportStatement", "Python.javacc", 192, 32);
            var prevProduction3774 = _currentLookaheadProduction;
            _currentLookaheadProduction = "ImportFrom1";
            ScanToEnd = false;
            try {
                if (!checkΣImportFrom1()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3774;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:192:46
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ192Σ46() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:192:46
            PushOntoLookaheadStack("ImportStatement", "Python.javacc", 192, 46);
            var prevProduction3775 = _currentLookaheadProduction;
            _currentLookaheadProduction = "ImportFrom2";
            ScanToEnd = false;
            try {
                if (!checkΣImportFrom2()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3775;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:196:20
    // BuildPredicateRoutine macro
    private bool scanΣImportFrom1() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:196:20
            if (!ScanToken(TokenType.FROM)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:196:27
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3776 = currentLookaheadToken;
                if (!(ScanToken(first_setΣPython_javaccΣ196Σ28))) {
                    currentLookaheadToken = token3776;
                    break;
                }
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:196:42
            PushOntoLookaheadStack("ImportFrom1", "Python.javacc", 196, 42);
            var prevProduction3777 = _currentLookaheadProduction;
            _currentLookaheadProduction = "DottedName";
            ScanToEnd = true;
            try {
                if (!checkΣDottedName()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3777;
            }
            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 0;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:196:58
            if (!ScanToken(TokenType.IMPORT)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:196:68
            PushOntoLookaheadStack("ImportFrom1", "Python.javacc", 196, 68);
            var prevProduction3778 = _currentLookaheadProduction;
            _currentLookaheadProduction = "ImportFromTargets";
            ScanToEnd = true;
            try {
                if (!checkΣImportFromTargets()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3778;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:198:20
    // BuildPredicateRoutine macro
    private bool scanΣImportFrom2() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:198:20
            if (!ScanToken(TokenType.FROM)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for OneOrMore specified at Python.javacc:198:27
            if (!(ScanToken(first_setΣPython_javaccΣ198Σ28))) {
                return _lastLookaheadSucceeded = false;
            }
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3779 = currentLookaheadToken;
                if (!(ScanToken(first_setΣPython_javaccΣ198Σ28))) {
                    currentLookaheadToken = token3779;
                    break;
                }
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:198:42
            if (!ScanToken(TokenType.IMPORT)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 0;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:198:56
            PushOntoLookaheadStack("ImportFrom2", "Python.javacc", 198, 56);
            var prevProduction3780 = _currentLookaheadProduction;
            _currentLookaheadProduction = "ImportFromTargets";
            ScanToEnd = true;
            try {
                if (!checkΣImportFromTargets()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3780;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:203:26
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ203Σ26() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:203:26
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:203:30
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 0;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:203:42
            var token3781 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ203Σ43())) {
                currentLookaheadToken = token3781;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:205:30
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ205Σ30() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:205:30
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:205:34
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 0;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:205:46
            var token3782 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ205Σ47())) {
                currentLookaheadToken = token3782;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:220:35
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ220Σ35() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:220:35
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 1;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:220:45
            PushOntoLookaheadStack("StarExpressions", "Python.javacc", 220, 45);
            var prevProduction3783 = _currentLookaheadProduction;
            _currentLookaheadProduction = "StarExpression";
            ScanToEnd = true;
            try {
                if (!checkΣStarExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3783;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:222:45
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ222Σ45() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:222:45
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 1;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:222:55
            PushOntoLookaheadStack("StarNamedExpressions", "Python.javacc", 222, 55);
            var prevProduction3784 = _currentLookaheadProduction;
            _currentLookaheadProduction = "StarNamedExpression";
            ScanToEnd = true;
            try {
                if (!checkΣStarNamedExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3784;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:241:4
    // BuildPredicateRoutine macro
    private bool scanΣTuple() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = true;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }
            if (!checkΣPython_javaccΣ241Σ9()) {
                _lastLookaheadSucceeded = false;
                return false;
            }

            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:256:8
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ256Σ8() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:256:8
            PushOntoLookaheadStack("PrimaryExpression", "Python.javacc", 256, 8);
            var prevProduction3785 = _currentLookaheadProduction;
            _currentLookaheadProduction = "GenExp";
            ScanToEnd = false;
            try {
                if (!checkΣGenExp()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3785;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:263:5
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ263Σ5() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:263:5
            if (!ScanToken(TokenType.YIELD)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:263:13
            if (!ScanToken(TokenType.FROM)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 0;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:263:25
            PushOntoLookaheadStack("YieldExpression", "Python.javacc", 263, 25);
            var prevProduction3786 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Expression";
            ScanToEnd = true;
            try {
                if (!checkΣExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3786;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:290:10
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ290Σ10() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = 3;
            _hitFailure = false;
            ScanToEnd = true;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:291:10
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:292:10
            PushOntoLookaheadStack("InvocationArguments", "Python.javacc", 292, 10);
            var prevProduction3787 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Argument";
            ScanToEnd = true;
            try {
                if (!checkΣArgument()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3787;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for CodeBlock specified at Python.javacc:293:10


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:304:4
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ304Σ4() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:304:4
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:306:7
            if (!ScanToken(first_setΣPython_javaccΣ306Σ7)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 0;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:312:4
            PushOntoLookaheadStack("Argument", "Python.javacc", 312, 4);
            var prevProduction3788 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Expression";
            ScanToEnd = true;
            try {
                if (!checkΣExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3788;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:329:57
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ329Σ57() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:329:57
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 1;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:329:67
            PushOntoLookaheadStack("DoubleStarredKeyValuePairs", "Python.javacc", 329, 67);
            var prevProduction3789 = _currentLookaheadProduction;
            _currentLookaheadProduction = "DoubleStarredKeyValuePair";
            ScanToEnd = true;
            try {
                if (!checkΣDoubleStarredKeyValuePair()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3789;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:332:3
    // BuildPredicateRoutine macro
    private bool scanΣDict() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = true;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }
            if (!checkΣPython_javaccΣ332Σ8()) {
                _lastLookaheadSucceeded = false;
                return false;
            }

            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:340:12
    // BuildPredicateRoutine macro
    private bool scanΣDictComp() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:340:12
            if (!ScanToken(TokenType.LBRACE)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:340:16
            PushOntoLookaheadStack("DictComp", "Python.javacc", 340, 16);
            var prevProduction3790 = _currentLookaheadProduction;
            _currentLookaheadProduction = "KeyValuePair";
            ScanToEnd = true;
            try {
                if (!checkΣKeyValuePair()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3790;
            }
            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 2;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for OneOrMore specified at Python.javacc:340:35
            if (!(checkΣPython_javaccΣ340Σ36())) {
                return _lastLookaheadSucceeded = false;
            }
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3791 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ340Σ36())) {
                    currentLookaheadToken = token3791;
                    break;
                }
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:340:50
            if (!ScanToken(TokenType.RBRACE)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:344:11
    // BuildPredicateRoutine macro
    private bool scanΣSetComp() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:344:11
            if (!ScanToken(TokenType.LBRACE)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:344:15
            PushOntoLookaheadStack("SetComp", "Python.javacc", 344, 15);
            var prevProduction3792 = _currentLookaheadProduction;
            _currentLookaheadProduction = "NamedExpression";
            ScanToEnd = true;
            try {
                if (!checkΣNamedExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3792;
            }
            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 2;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for OneOrMore specified at Python.javacc:344:37
            if (!(checkΣPython_javaccΣ344Σ38())) {
                return _lastLookaheadSucceeded = false;
            }
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3793 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ344Σ38())) {
                    currentLookaheadToken = token3793;
                    break;
                }
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:344:52
            if (!ScanToken(TokenType.RBRACE)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:347:5
    // BuildPredicateRoutine macro
    private bool scanΣClassDefinition() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:347:5
            var token3794 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ347Σ6())) {
                currentLookaheadToken = token3794;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:347:18
            if (!ScanToken(TokenType.CLASS)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 0;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:348:5
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:348:12
            var token3795 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ348Σ13())) {
                currentLookaheadToken = token3795;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:349:5
            if (!ScanToken(TokenType.COLON)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:350:5
            PushOntoLookaheadStack("ClassDefinition", "Python.javacc", 350, 5);
            var prevProduction3796 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Block";
            ScanToEnd = true;
            try {
                if (!checkΣBlock()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3796;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:354:5
    // BuildPredicateRoutine macro
    private bool scanΣFunctionDefinition() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:354:5
            var token3797 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ354Σ6())) {
                currentLookaheadToken = token3797;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:355:5
            var token3798 = currentLookaheadToken;
            if (!(ScanToken(TokenType.ASYNC))) {
                currentLookaheadToken = token3798;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:356:5
            if (!ScanToken(TokenType.DEF)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 0;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:357:5
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:358:5
            if (!ScanToken(TokenType.LPAREN)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:359:5
            PushOntoLookaheadStack("FunctionDefinition", "Python.javacc", 359, 5);
            var prevProduction3799 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Parameters";
            ScanToEnd = true;
            try {
                if (!checkΣParameters()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3799;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:360:5
            if (!ScanToken(TokenType.RPAREN)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:361:5
            var token3800 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ361Σ6())) {
                currentLookaheadToken = token3800;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:362:5
            if (!ScanToken(TokenType.COLON)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:362:9
            PushOntoLookaheadStack("FunctionDefinition", "Python.javacc", 362, 9);
            var prevProduction3801 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Block";
            ScanToEnd = true;
            try {
                if (!checkΣBlock()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3801;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:391:27
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ391Σ27() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:391:27
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 1;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:391:37
            PushOntoLookaheadStack("StarTargets", "Python.javacc", 391, 37);
            var prevProduction3802 = _currentLookaheadProduction;
            _currentLookaheadProduction = "StarTarget";
            ScanToEnd = true;
            try {
                if (!checkΣStarTarget()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3802;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:395:10
    // BuildPredicateRoutine macro
    private bool scanΣGenExp() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:395:10
            if (!ScanToken(TokenType.LPAREN)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:395:14
            PushOntoLookaheadStack("GenExp", "Python.javacc", 395, 14);
            var prevProduction3803 = _currentLookaheadProduction;
            _currentLookaheadProduction = "NamedExpression";
            ScanToEnd = true;
            try {
                if (!checkΣNamedExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3803;
            }
            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 2;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for OneOrMore specified at Python.javacc:395:36
            if (!(checkΣPython_javaccΣ395Σ37())) {
                return _lastLookaheadSucceeded = false;
            }
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3804 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ395Σ37())) {
                    currentLookaheadToken = token3804;
                    break;
                }
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:395:51
            if (!ScanToken(TokenType.RPAREN)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:399:12
    // BuildPredicateRoutine macro
    private bool scanΣListComp() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:399:12
            if (!ScanToken(TokenType.LBRACKET)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:399:16
            PushOntoLookaheadStack("ListComp", "Python.javacc", 399, 16);
            var prevProduction3805 = _currentLookaheadProduction;
            _currentLookaheadProduction = "NamedExpression";
            ScanToEnd = true;
            try {
                if (!checkΣNamedExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3805;
            }
            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 2;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for OneOrMore specified at Python.javacc:399:38
            if (!(checkΣPython_javaccΣ399Σ39())) {
                return _lastLookaheadSucceeded = false;
            }
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3806 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ399Σ39())) {
                    currentLookaheadToken = token3806;
                    break;
                }
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:399:53
            if (!ScanToken(TokenType.RBRACKET)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:404:4
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ404Σ4() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:404:4
            if (!ScanToken(TokenType.STAR)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:404:8
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 0;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:404:17
            PushOntoLookaheadStack("StarEtc", "Python.javacc", 404, 17);
            var prevProduction3807 = _currentLookaheadProduction;
            _currentLookaheadProduction = "ParamMaybeDefault";
            ScanToEnd = true;
            try {
                if (!checkΣParamMaybeDefault()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3807;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:404:35
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3808 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ404Σ36())) {
                    currentLookaheadToken = token3808;
                    break;
                }
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:404:66
            var token3809 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ404Σ67())) {
                currentLookaheadToken = token3809;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:404:36
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ404Σ36() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:404:36
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 1;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:404:46
            PushOntoLookaheadStack("StarEtc", "Python.javacc", 404, 46);
            var prevProduction3810 = _currentLookaheadProduction;
            _currentLookaheadProduction = "ParamMaybeDefault";
            ScanToEnd = true;
            try {
                if (!checkΣParamMaybeDefault()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3810;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:406:16
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ406Σ16() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = 1;
            _hitFailure = false;
            ScanToEnd = true;
            if (!backscanΣPython_javaccΣ406Σ23()) {
                return _lastLookaheadSucceeded = false;
            }
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:406:48
            if (!ScanToken(TokenType.COLON)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:406:52
            PushOntoLookaheadStack("StarEtc", "Python.javacc", 406, 52);
            var prevProduction3811 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Expression";
            ScanToEnd = true;
            try {
                if (!checkΣExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3811;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:406:65
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ406Σ65() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:406:65
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 1;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:406:75
            PushOntoLookaheadStack("StarEtc", "Python.javacc", 406, 75);
            var prevProduction3812 = _currentLookaheadProduction;
            _currentLookaheadProduction = "ParamMaybeDefault";
            ScanToEnd = true;
            try {
                if (!checkΣParamMaybeDefault()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3812;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:414:8
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ414Σ8() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = 1;
            _hitFailure = false;
            ScanToEnd = true;
            if (backscanΣPython_javaccΣ414Σ15()) {
                return _lastLookaheadSucceeded = false;
            }
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:415:8
            if (!ScanToken(TokenType.COLON)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:415:12
            PushOntoLookaheadStack("KeyWords", "Python.javacc", 415, 12);
            var prevProduction3813 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Expression";
            ScanToEnd = true;
            try {
                if (!checkΣExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3813;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:425:8
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ425Σ8() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = 1;
            _hitFailure = false;
            ScanToEnd = true;
            if (!backscanΣPython_javaccΣ425Σ15()) {
                return _lastLookaheadSucceeded = false;
            }
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:425:38
            if (!ScanToken(TokenType.COLON)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:425:42
            PushOntoLookaheadStack("Parameters", "Python.javacc", 425, 42);
            var prevProduction3814 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Expression";
            ScanToEnd = true;
            try {
                if (!checkΣExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3814;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:427:8
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ427Σ8() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:427:8
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 1;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:430:11
            var token3815 = currentLookaheadToken;
            var remainingLookahead3815 = _remainingLookahead;
            var hitFailure3815 = _hitFailure;
            if (!ScanToken(TokenType.SLASH)) {
                currentLookaheadToken = token3815;
                _remainingLookahead = remainingLookahead3815;
                _hitFailure = hitFailure3815;
                if (!checkΣPython_javaccΣ433Σ11()) {
                    currentLookaheadToken = token3815;
                    _remainingLookahead = remainingLookahead3815;
                    _hitFailure = hitFailure3815;
                    return _lastLookaheadSucceeded = false;
                }
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:433:19
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ433Σ19() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = 1;
            _hitFailure = false;
            ScanToEnd = true;
            if (!backscanΣPython_javaccΣ433Σ26()) {
                return _lastLookaheadSucceeded = false;
            }
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:433:49
            if (!ScanToken(TokenType.COLON)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:433:53
            PushOntoLookaheadStack("Parameters", "Python.javacc", 433, 53);
            var prevProduction3816 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Expression";
            ScanToEnd = true;
            try {
                if (!checkΣExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3816;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:445:7
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ445Σ7() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = true;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }
            if (checkΣPython_javaccΣ445Σ13()) {
                _lastLookaheadSucceeded = true;
                return false;
            }

            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:462:2
    // BuildPredicateRoutine macro
    private bool scanΣAssignment() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = true;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }
            if (!checkΣPython_javaccΣ462Σ7()) {
                _lastLookaheadSucceeded = false;
                return false;
            }

            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:464:3
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ464Σ3() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:464:3
            PushOntoLookaheadStack("Assignment", "Python.javacc", 464, 3);
            var prevProduction3817 = _currentLookaheadProduction;
            _currentLookaheadProduction = "SimpleAssignTarget";
            ScanToEnd = true;
            try {
                if (!checkΣSimpleAssignTarget()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3817;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:464:22
            if (!ScanToken(TokenType.COLON)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 0;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:464:31
            PushOntoLookaheadStack("Assignment", "Python.javacc", 464, 31);
            var prevProduction3818 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Expression";
            ScanToEnd = true;
            try {
                if (!checkΣExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3818;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:464:42
            var token3819 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ464Σ43())) {
                currentLookaheadToken = token3819;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:466:3
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ466Σ3() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:466:3
            PushOntoLookaheadStack("Assignment", "Python.javacc", 466, 3);
            var prevProduction3820 = _currentLookaheadProduction;
            _currentLookaheadProduction = "SimpleAssignTarget";
            ScanToEnd = true;
            try {
                if (!checkΣSimpleAssignTarget()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3820;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:466:22
            if (!ScanToken(first_setΣPython_javaccΣ466Σ22)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 0;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:466:38
            var token3821 = currentLookaheadToken;
            var remainingLookahead3821 = _remainingLookahead;
            var hitFailure3821 = _hitFailure;
            if (!checkΣPython_javaccΣ466Σ38()) {
                currentLookaheadToken = token3821;
                _remainingLookahead = remainingLookahead3821;
                _hitFailure = hitFailure3821;
                if (!checkΣPython_javaccΣ466Σ56()) {
                    currentLookaheadToken = token3821;
                    _remainingLookahead = remainingLookahead3821;
                    _hitFailure = hitFailure3821;
                    return _lastLookaheadSucceeded = false;
                }
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:468:3
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ468Σ3() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for OneOrMore specified at Python.javacc:468:3
            if (!(checkΣPython_javaccΣ468Σ4())) {
                return _lastLookaheadSucceeded = false;
            }
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3822 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ468Σ4())) {
                    currentLookaheadToken = token3822;
                    break;
                }
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 0;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:468:30
            var token3823 = currentLookaheadToken;
            var remainingLookahead3823 = _remainingLookahead;
            var hitFailure3823 = _hitFailure;
            if (!checkΣPython_javaccΣ468Σ30()) {
                currentLookaheadToken = token3823;
                _remainingLookahead = remainingLookahead3823;
                _hitFailure = hitFailure3823;
                if (!checkΣPython_javaccΣ468Σ48()) {
                    currentLookaheadToken = token3823;
                    _remainingLookahead = remainingLookahead3823;
                    _hitFailure = hitFailure3823;
                    return _lastLookaheadSucceeded = false;
                }
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:468:4
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ468Σ4() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:468:6
            PushOntoLookaheadStack("Assignment", "Python.javacc", 468, 6);
            var prevProduction3824 = _currentLookaheadProduction;
            _currentLookaheadProduction = "StarTargets";
            ScanToEnd = false;
            try {
                if (!checkΣStarTargets()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3824;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:468:18
            if (!ScanToken(TokenType.ASSIGN)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:476:4
    // BuildPredicateRoutine macro
    private bool scanΣMatchStatement() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            var previousActives3825 = new SetAdapter<TokenType>(tokenSource.ActiveTokenTypes);
            var somethingChanged3826 = ActivateTokenTypes(
                TokenType.MATCH
            );
            try {
                if (!ScanToken(TokenType.MATCH)) {
                    return _lastLookaheadSucceeded = false;
                }

            }
            finally {
                tokenSource.ActiveTokenTypes = previousActives3825;
                if (somethingChanged3826) {
                    tokenSource.Reset(GetToken(0));
                    _nextTokenType = null;
                }
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:477:4
            PushOntoLookaheadStack("MatchStatement", "Python.javacc", 477, 4);
            var prevProduction3827 = _currentLookaheadProduction;
            _currentLookaheadProduction = "SubjectExpression";
            ScanToEnd = true;
            try {
                if (!checkΣSubjectExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3827;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:478:4
            if (!ScanToken(TokenType.COLON)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 0;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:480:4
            if (!ScanToken(TokenType.NEWLINE)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:481:4
            if (!ScanToken(TokenType.EOF)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for OneOrMore specified at Python.javacc:482:25
            var previousActives3828 = new SetAdapter<TokenType>(tokenSource.ActiveTokenTypes);
            var somethingChanged3829 = ActivateTokenTypes(
                TokenType.CASE
            );
            try {
                if (!(checkΣPython_javaccΣ482Σ26())) {
                    return _lastLookaheadSucceeded = false;
                }
                while (_remainingLookahead > 0 && ! _hitFailure) {
                    var token3830 = currentLookaheadToken;
                    if (!(checkΣPython_javaccΣ482Σ26())) {
                        currentLookaheadToken = token3830;
                        break;
                    }
                }

            }
            finally {
                tokenSource.ActiveTokenTypes = previousActives3828;
                if (somethingChanged3829) {
                    tokenSource.Reset(GetToken(0));
                    _nextTokenType = null;
                }
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:483:4
            if (!ScanToken(TokenType.EOF)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:499:4
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ499Σ4() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:499:4
            PushOntoLookaheadStack("Patterns", "Python.javacc", 499, 4);
            var prevProduction3831 = _currentLookaheadProduction;
            _currentLookaheadProduction = "OpenSequencePattern";
            ScanToEnd = false;
            try {
                if (!checkΣOpenSequencePattern()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3831;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:511:4
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ511Σ4() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:511:4
            PushOntoLookaheadStack("ClosedPattern", "Python.javacc", 511, 4);
            var prevProduction3832 = _currentLookaheadProduction;
            _currentLookaheadProduction = "ClassPattern";
            ScanToEnd = false;
            try {
                if (!checkΣClassPattern()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3832;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:517:4
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ517Σ4() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:517:6
            PushOntoLookaheadStack("ClosedPattern", "Python.javacc", 517, 6);
            var prevProduction3833 = _currentLookaheadProduction;
            _currentLookaheadProduction = "GroupPattern";
            ScanToEnd = false;
            try {
                if (!checkΣGroupPattern()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3833;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:528:33
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ528Σ33() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:528:33
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 1;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:528:43
            PushOntoLookaheadStack("ItemsPattern", "Python.javacc", 528, 43);
            var prevProduction3834 = _currentLookaheadProduction;
            _currentLookaheadProduction = "KeyValuePattern";
            ScanToEnd = true;
            try {
                if (!checkΣKeyValuePattern()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3834;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:533:24
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ533Σ24() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:533:24
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 1;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:533:34
            PushOntoLookaheadStack("MappingPattern", "Python.javacc", 533, 34);
            var prevProduction3835 = _currentLookaheadProduction;
            _currentLookaheadProduction = "DoubleStarPattern";
            ScanToEnd = true;
            try {
                if (!checkΣDoubleStarPattern()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3835;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:555:22
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ555Σ22() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:555:22
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 1;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:555:32
            PushOntoLookaheadStack("MaybeSequencePattern", "Python.javacc", 555, 32);
            var prevProduction3836 = _currentLookaheadProduction;
            _currentLookaheadProduction = "MaybeStarPattern";
            ScanToEnd = true;
            try {
                if (!checkΣMaybeStarPattern()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3836;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:559:4
    // BuildPredicateRoutine macro
    private bool scanΣOpenSequencePattern() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:559:4
            PushOntoLookaheadStack("OpenSequencePattern", "Python.javacc", 559, 4);
            var prevProduction3837 = _currentLookaheadProduction;
            _currentLookaheadProduction = "MaybeStarPattern";
            ScanToEnd = true;
            try {
                if (!checkΣMaybeStarPattern()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3837;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:559:21
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 0;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:559:30
            var token3838 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ559Σ31())) {
                currentLookaheadToken = token3838;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:565:10
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ565Σ10() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:565:10
            PushOntoLookaheadStack("SequencePattern", "Python.javacc", 565, 10);
            var prevProduction3839 = _currentLookaheadProduction;
            _currentLookaheadProduction = "OpenSequencePattern";
            ScanToEnd = false;
            try {
                if (!checkΣOpenSequencePattern()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3839;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:569:4
    // BuildPredicateRoutine macro
    private bool scanΣClassPattern() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:569:4
            PushOntoLookaheadStack("ClassPattern", "Python.javacc", 569, 4);
            var prevProduction3840 = _currentLookaheadProduction;
            _currentLookaheadProduction = "NameOrAttribute";
            ScanToEnd = true;
            try {
                if (!checkΣNameOrAttribute()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3840;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:570:4
            if (!ScanToken(TokenType.LPAREN)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 0;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:572:7
            var token3841 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ573Σ11Σ())) {
                currentLookaheadToken = token3841;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:578:4
            if (!ScanToken(TokenType.RPAREN)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:573:11
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ573Σ11() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = true;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }
            if (!checkΣPython_javaccΣ573Σ16()) {
                _lastLookaheadSucceeded = false;
                return false;
            }

            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:576:31
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ576Σ31() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:576:31
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 1;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:576:41
            PushOntoLookaheadStack("ClassPattern", "Python.javacc", 576, 41);
            var prevProduction3842 = _currentLookaheadProduction;
            _currentLookaheadProduction = "KeywordPatterns";
            ScanToEnd = true;
            try {
                if (!checkΣKeywordPatterns()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3842;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:586:8
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ586Σ8() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = 0;
            _hitFailure = false;
            ScanToEnd = true;
            if (!((GetToken(1).Type == TokenType.COMMA) && (!((GetToken(2).Type == TokenType.NAME) && (GetToken(3).Type == TokenType.ASSIGN))))) {
                return _lastLookaheadSucceeded = false;
            }
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:587:11
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:587:15
            PushOntoLookaheadStack("PositionalPatterns", "Python.javacc", 587, 15);
            var prevProduction3843 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Pattern";
            ScanToEnd = true;
            try {
                if (!checkΣPattern()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3843;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:593:35
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ593Σ35() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:593:35
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 2;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:593:45
            PushOntoLookaheadStack("KeywordPatterns", "Python.javacc", 593, 45);
            var prevProduction3844 = _currentLookaheadProduction;
            _currentLookaheadProduction = "KeywordPattern";
            ScanToEnd = true;
            try {
                if (!checkΣKeywordPattern()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3844;
            }


            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // predicate routine for expansion at:
    // Python.javacc:600:4
    // BuildPredicateRoutine macro
    private bool scanΣPython_javaccΣ600Σ4() {
        try {
            _lookaheadRoutineNesting++;
            currentLookaheadToken = LastConsumedToken;
            _remainingLookahead = UNLIMITED;
            _hitFailure = false;
            ScanToEnd = false;
            if (_remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = true;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:600:4
            PushOntoLookaheadStack("SubjectExpression", "Python.javacc", 600, 4);
            var prevProduction3845 = _currentLookaheadProduction;
            _currentLookaheadProduction = "StarNamedExpression";
            ScanToEnd = true;
            try {
                if (!checkΣStarNamedExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3845;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:600:24
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 0;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:600:33
            var token3846 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ600Σ34())) {
                currentLookaheadToken = token3846;
            }



            return _lastLookaheadSucceeded = true;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = null;
        }
    }


    // lookahead routine for lookahead at:
    // Python.javacc:160:9
    private bool checkΣPython_javaccΣ160Σ14() {
        var prevRemainingLookahead = _remainingLookahead;
        var prevHitFailure = _hitFailure;
        var prevScanaheadToken = currentLookaheadToken;
        try {
            _lookaheadRoutineNesting++;
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:160:14
            PushOntoLookaheadStack("WithStatement", "Python.javacc", 160, 14);
            var prevProduction3847 = _currentLookaheadProduction;
            _currentLookaheadProduction = "WithItemsInParentheses";
            ScanToEnd = true;
            try {
                if (!checkΣWithItemsInParentheses()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3847;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:160:37
            if (!ScanToken(TokenType.COLON)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = !_hitFailure;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanaheadToken;
            _remainingLookahead = prevRemainingLookahead;
            _hitFailure = prevHitFailure;
        }
    }


    // lookahead routine for lookahead at:
    // Python.javacc:241:4
    private bool checkΣPython_javaccΣ241Σ9() {
        var prevRemainingLookahead = _remainingLookahead;
        var prevHitFailure = _hitFailure;
        var prevScanaheadToken = currentLookaheadToken;
        try {
            _lookaheadRoutineNesting++;
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:241:9
            if (!ScanToken(TokenType.LPAREN)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:241:14
            var token3848 = currentLookaheadToken;
            var remainingLookahead3848 = _remainingLookahead;
            var hitFailure3848 = _hitFailure;
            if (!ScanToken(TokenType.RPAREN)) {
                currentLookaheadToken = token3848;
                _remainingLookahead = remainingLookahead3848;
                _hitFailure = hitFailure3848;
                if (!checkΣPython_javaccΣ241Σ20()) {
                    currentLookaheadToken = token3848;
                    _remainingLookahead = remainingLookahead3848;
                    _hitFailure = hitFailure3848;
                    return _lastLookaheadSucceeded = false;
                }
            }



            return _lastLookaheadSucceeded = !_hitFailure;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanaheadToken;
            _remainingLookahead = prevRemainingLookahead;
            _hitFailure = prevHitFailure;
        }
    }


    // lookahead routine for lookahead at:
    // Python.javacc:332:3
    private bool checkΣPython_javaccΣ332Σ8() {
        var prevRemainingLookahead = _remainingLookahead;
        var prevHitFailure = _hitFailure;
        var prevScanaheadToken = currentLookaheadToken;
        try {
            _lookaheadRoutineNesting++;
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:332:8
            if (!ScanToken(TokenType.LBRACE)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:332:13
            var token3849 = currentLookaheadToken;
            var remainingLookahead3849 = _remainingLookahead;
            var hitFailure3849 = _hitFailure;
            if (!ScanToken(TokenType.RBRACE)) {
                currentLookaheadToken = token3849;
                _remainingLookahead = remainingLookahead3849;
                _hitFailure = hitFailure3849;
                if (!checkΣPython_javaccΣ332Σ19()) {
                    currentLookaheadToken = token3849;
                    _remainingLookahead = remainingLookahead3849;
                    _hitFailure = hitFailure3849;
                    return _lastLookaheadSucceeded = false;
                }
            }



            return _lastLookaheadSucceeded = !_hitFailure;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanaheadToken;
            _remainingLookahead = prevRemainingLookahead;
            _hitFailure = prevHitFailure;
        }
    }


    // lookahead routine for lookahead at:
    // Python.javacc:445:7
    private bool checkΣPython_javaccΣ445Σ13() {
        var prevRemainingLookahead = _remainingLookahead;
        var prevHitFailure = _hitFailure;
        var prevScanaheadToken = currentLookaheadToken;
        try {
            _lookaheadRoutineNesting++;
            if (!ScanToken(first_setΣPython_javaccΣ445Σ13)) {
                return _lastLookaheadSucceeded = false;
            }


            return _lastLookaheadSucceeded = !_hitFailure;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanaheadToken;
            _remainingLookahead = prevRemainingLookahead;
            _hitFailure = prevHitFailure;
        }
    }


    // lookahead routine for lookahead at:
    // Python.javacc:462:2
    private bool checkΣPython_javaccΣ462Σ7() {
        var prevRemainingLookahead = _remainingLookahead;
        var prevHitFailure = _hitFailure;
        var prevScanaheadToken = currentLookaheadToken;
        try {
            _lookaheadRoutineNesting++;
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:462:7
            var token3850 = currentLookaheadToken;
            var remainingLookahead3850 = _remainingLookahead;
            var hitFailure3850 = _hitFailure;
            if (!checkΣPython_javaccΣ462Σ7Σ()) {
                currentLookaheadToken = token3850;
                _remainingLookahead = remainingLookahead3850;
                _hitFailure = hitFailure3850;
                if (!checkΣPython_javaccΣ462Σ48()) {
                    currentLookaheadToken = token3850;
                    _remainingLookahead = remainingLookahead3850;
                    _hitFailure = hitFailure3850;
                    return _lastLookaheadSucceeded = false;
                }
            }


            return _lastLookaheadSucceeded = !_hitFailure;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanaheadToken;
            _remainingLookahead = prevRemainingLookahead;
            _hitFailure = prevHitFailure;
        }
    }


    // lookahead routine for lookahead at:
    // Python.javacc:573:11
    private bool checkΣPython_javaccΣ573Σ16() {
        var prevRemainingLookahead = _remainingLookahead;
        var prevHitFailure = _hitFailure;
        var prevScanaheadToken = currentLookaheadToken;
        try {
            _lookaheadRoutineNesting++;
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:573:16
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:573:23
            if (!ScanToken(TokenType.ASSIGN)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = !_hitFailure;
        }
        finally {
            _lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanaheadToken;
            _remainingLookahead = prevRemainingLookahead;
            _hitFailure = prevHitFailure;
        }
    }


    private bool backscanΣPython_javaccΣ406Σ23() {
        var stackIterator = new BackwardIterator<NonTerminalCall>(ParsingStack, _lookaheadStack);
        NonTerminalCall ntc;
        if (!stackIterator.HasNext()) {
            return _lastLookaheadSucceeded = false;
        }
        stackIterator.Next();
        if (!stackIterator.HasNext()) {
            return _lastLookaheadSucceeded = false;
        }
        ntc = stackIterator.Next();
        if (ntc.ProductionName != "FunctionDefinition") {
            return _lastLookaheadSucceeded = false;
        }
        _lastLookaheadSucceeded = true;
        return _lastLookaheadSucceeded;
    }

    private bool backscanΣPython_javaccΣ414Σ15() {
        var stackIterator = new BackwardIterator<NonTerminalCall>(ParsingStack, _lookaheadStack);
        NonTerminalCall ntc;
        while (stackIterator.HasNext()) {
            ntc = stackIterator.Next();
            if (ntc.ProductionName == "LambdaDefinition") {
                stackIterator.Previous();
                break;
            }
            if (!stackIterator.HasNext()) {
                return _lastLookaheadSucceeded = false;
            }
        }
        if (!stackIterator.HasNext()) {
            return _lastLookaheadSucceeded = false;
        }
        ntc = stackIterator.Next();
        if (ntc.ProductionName != "LambdaDefinition") {
            return _lastLookaheadSucceeded = false;
        }
        _lastLookaheadSucceeded = true;
        return _lastLookaheadSucceeded;
    }

    private bool backscanΣPython_javaccΣ425Σ15() {
        var stackIterator = new BackwardIterator<NonTerminalCall>(ParsingStack, _lookaheadStack);
        NonTerminalCall ntc;
        if (!stackIterator.HasNext()) {
            return _lastLookaheadSucceeded = false;
        }
        ntc = stackIterator.Next();
        if (ntc.ProductionName != "FunctionDefinition") {
            return _lastLookaheadSucceeded = false;
        }
        _lastLookaheadSucceeded = true;
        return _lastLookaheadSucceeded;
    }

    private bool backscanΣPython_javaccΣ433Σ26() {
        var stackIterator = new BackwardIterator<NonTerminalCall>(ParsingStack, _lookaheadStack);
        NonTerminalCall ntc;
        if (!stackIterator.HasNext()) {
            return _lastLookaheadSucceeded = false;
        }
        ntc = stackIterator.Next();
        if (ntc.ProductionName != "FunctionDefinition") {
            return _lastLookaheadSucceeded = false;
        }
        _lastLookaheadSucceeded = true;
        return _lastLookaheadSucceeded;
    }

        private bool checkΣModule() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:24:4
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3851 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ24Σ5())) {
                    currentLookaheadToken = token3851;
                    break;
                }
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for EndOfFile specified at Python.javacc:25:4
            if (!ScanToken(TokenType.EOF)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for CodeBlock specified at Python.javacc:26:4


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣNumber() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:30:3
            if (!ScanToken(Number_FIRST_SET)) {
                return _lastLookaheadSucceeded = false;
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣSignedNumber() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:34:3
            var token3852 = currentLookaheadToken;
            if (!(ScanToken(TokenType.MINUS))) {
                currentLookaheadToken = token3852;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:35:3
            if (!ScanToken(first_setΣPython_javaccΣ35Σ3)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:36:3
            var token3853 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ36Σ4())) {
                currentLookaheadToken = token3853;
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣStrings() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for OneOrMore specified at Python.javacc:39:11
            if (!(ScanToken(TokenType.STRING_LITERAL))) {
                return _lastLookaheadSucceeded = false;
            }
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3854 = currentLookaheadToken;
                if (!(ScanToken(TokenType.STRING_LITERAL))) {
                    currentLookaheadToken = token3854;
                    break;
                }
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣAtomicExpression() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:42:5
            var token3855 = currentLookaheadToken;
            var remainingLookahead3855 = _remainingLookahead;
            var hitFailure3855 = _hitFailure;
            if (!ScanToken(TokenType.NAME)) {
                currentLookaheadToken = token3855;
                _remainingLookahead = remainingLookahead3855;
                _hitFailure = hitFailure3855;
                if (!ScanToken(first_setΣPython_javaccΣ44Σ5)) {
                    currentLookaheadToken = token3855;
                    _remainingLookahead = remainingLookahead3855;
                    _hitFailure = hitFailure3855;
                    if (!checkΣPython_javaccΣ46Σ5()) {
                        currentLookaheadToken = token3855;
                        _remainingLookahead = remainingLookahead3855;
                        _hitFailure = hitFailure3855;
                        if (!ScanToken(TokenType.TRUE)) {
                            currentLookaheadToken = token3855;
                            _remainingLookahead = remainingLookahead3855;
                            _hitFailure = hitFailure3855;
                            if (!ScanToken(TokenType.FALSE)) {
                                currentLookaheadToken = token3855;
                                _remainingLookahead = remainingLookahead3855;
                                _hitFailure = hitFailure3855;
                                if (!ScanToken(TokenType.NONE)) {
                                    currentLookaheadToken = token3855;
                                    _remainingLookahead = remainingLookahead3855;
                                    _hitFailure = hitFailure3855;
                                    if (!ScanToken(TokenType.PEG_PARSER)) {
                                        currentLookaheadToken = token3855;
                                        _remainingLookahead = remainingLookahead3855;
                                        _hitFailure = hitFailure3855;
                                        if (!checkΣPython_javaccΣ56Σ5()) {
                                            currentLookaheadToken = token3855;
                                            _remainingLookahead = remainingLookahead3855;
                                            _hitFailure = hitFailure3855;
                                            if (!checkΣPython_javaccΣ58Σ5()) {
                                                currentLookaheadToken = token3855;
                                                _remainingLookahead = remainingLookahead3855;
                                                _hitFailure = hitFailure3855;
                                                if (!checkΣPython_javaccΣ60Σ5()) {
                                                    currentLookaheadToken = token3855;
                                                    _remainingLookahead = remainingLookahead3855;
                                                    _hitFailure = hitFailure3855;
                                                    if (!ScanToken(TokenType.ELLIPSIS)) {
                                                        currentLookaheadToken = token3855;
                                                        _remainingLookahead = remainingLookahead3855;
                                                        _hitFailure = hitFailure3855;
                                                        return _lastLookaheadSucceeded = false;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣSlice() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:66:5
            var token3856 = currentLookaheadToken;
            var remainingLookahead3856 = _remainingLookahead;
            var hitFailure3856 = _hitFailure;
            if (!checkΣPython_javaccΣ66Σ5()) {
                currentLookaheadToken = token3856;
                _remainingLookahead = remainingLookahead3856;
                _hitFailure = hitFailure3856;
                if (!checkΣPython_javaccΣ68Σ5()) {
                    currentLookaheadToken = token3856;
                    _remainingLookahead = remainingLookahead3856;
                    _hitFailure = hitFailure3856;
                    return _lastLookaheadSucceeded = false;
                }
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣSlices() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:71:10
            if (!ScanToken(TokenType.LBRACKET)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:71:14
            PushOntoLookaheadStack("Slices", "Python.javacc", 71, 14);
            var prevProduction3857 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Slice";
            ScanToEnd = true;
            try {
                if (!checkΣSlice()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3857;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:71:20
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3858 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ71Σ21())) {
                    currentLookaheadToken = token3858;
                    break;
                }
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:71:39
            var token3859 = currentLookaheadToken;
            if (!(ScanToken(TokenType.COMMA))) {
                currentLookaheadToken = token3859;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:71:45
            if (!ScanToken(TokenType.RBRACKET)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣStatement() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:74:4
            var token3860 = currentLookaheadToken;
            var remainingLookahead3860 = _remainingLookahead;
            var hitFailure3860 = _hitFailure;
            if (!checkΣPython_javaccΣ74Σ4()) {
                currentLookaheadToken = token3860;
                _remainingLookahead = remainingLookahead3860;
                _hitFailure = hitFailure3860;
                if (!checkΣPython_javaccΣ76Σ4()) {
                    currentLookaheadToken = token3860;
                    _remainingLookahead = remainingLookahead3860;
                    _hitFailure = hitFailure3860;
                    if (!checkΣPython_javaccΣ78Σ4()) {
                        currentLookaheadToken = token3860;
                        _remainingLookahead = remainingLookahead3860;
                        _hitFailure = hitFailure3860;
                        return _lastLookaheadSucceeded = false;
                    }
                }
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣSimpleStatement() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:81:24
            PushOntoLookaheadStack("SimpleStatement", "Python.javacc", 81, 24);
            var prevProduction3861 = _currentLookaheadProduction;
            _currentLookaheadProduction = "SmallStatement";
            ScanToEnd = false;
            try {
                if (!checkΣSmallStatement()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3861;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:81:39
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3862 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ81Σ40())) {
                    currentLookaheadToken = token3862;
                    break;
                }
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:81:67
            var token3863 = currentLookaheadToken;
            if (!(ScanToken(TokenType.SEMICOLON))) {
                currentLookaheadToken = token3863;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:81:73
            if (!ScanToken(TokenType.NEWLINE)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣSmallStatement() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:84:4
            var token3864 = currentLookaheadToken;
            var remainingLookahead3864 = _remainingLookahead;
            var hitFailure3864 = _hitFailure;
            if (!checkΣPython_javaccΣ84Σ4()) {
                currentLookaheadToken = token3864;
                _remainingLookahead = remainingLookahead3864;
                _hitFailure = hitFailure3864;
                if (!checkΣPython_javaccΣ86Σ4()) {
                    currentLookaheadToken = token3864;
                    _remainingLookahead = remainingLookahead3864;
                    _hitFailure = hitFailure3864;
                    if (!checkΣPython_javaccΣ88Σ4()) {
                        currentLookaheadToken = token3864;
                        _remainingLookahead = remainingLookahead3864;
                        _hitFailure = hitFailure3864;
                        if (!checkΣPython_javaccΣ90Σ4()) {
                            currentLookaheadToken = token3864;
                            _remainingLookahead = remainingLookahead3864;
                            _hitFailure = hitFailure3864;
                            if (!checkΣPython_javaccΣ92Σ4()) {
                                currentLookaheadToken = token3864;
                                _remainingLookahead = remainingLookahead3864;
                                _hitFailure = hitFailure3864;
                                if (!checkΣPython_javaccΣ94Σ4()) {
                                    currentLookaheadToken = token3864;
                                    _remainingLookahead = remainingLookahead3864;
                                    _hitFailure = hitFailure3864;
                                    if (!ScanToken(TokenType.BREAK)) {
                                        currentLookaheadToken = token3864;
                                        _remainingLookahead = remainingLookahead3864;
                                        _hitFailure = hitFailure3864;
                                        if (!ScanToken(TokenType.CONTINUE)) {
                                            currentLookaheadToken = token3864;
                                            _remainingLookahead = remainingLookahead3864;
                                            _hitFailure = hitFailure3864;
                                            if (!ScanToken(TokenType.PASS)) {
                                                currentLookaheadToken = token3864;
                                                _remainingLookahead = remainingLookahead3864;
                                                _hitFailure = hitFailure3864;
                                                if (!checkΣPython_javaccΣ102Σ4()) {
                                                    currentLookaheadToken = token3864;
                                                    _remainingLookahead = remainingLookahead3864;
                                                    _hitFailure = hitFailure3864;
                                                    if (!checkΣPython_javaccΣ104Σ4()) {
                                                        currentLookaheadToken = token3864;
                                                        _remainingLookahead = remainingLookahead3864;
                                                        _hitFailure = hitFailure3864;
                                                        if (!checkΣPython_javaccΣ106Σ4()) {
                                                            currentLookaheadToken = token3864;
                                                            _remainingLookahead = remainingLookahead3864;
                                                            _hitFailure = hitFailure3864;
                                                            if (!checkΣPython_javaccΣ108Σ4()) {
                                                                currentLookaheadToken = token3864;
                                                                _remainingLookahead = remainingLookahead3864;
                                                                _hitFailure = hitFailure3864;
                                                                return _lastLookaheadSucceeded = false;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣCompoundStatement() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:112:5
            var token3865 = currentLookaheadToken;
            var remainingLookahead3865 = _remainingLookahead;
            var hitFailure3865 = _hitFailure;
            if (!checkΣPython_javaccΣ112Σ5()) {
                currentLookaheadToken = token3865;
                _remainingLookahead = remainingLookahead3865;
                _hitFailure = hitFailure3865;
                if (!checkΣPython_javaccΣ114Σ5()) {
                    currentLookaheadToken = token3865;
                    _remainingLookahead = remainingLookahead3865;
                    _hitFailure = hitFailure3865;
                    if (!checkΣPython_javaccΣ116Σ5()) {
                        currentLookaheadToken = token3865;
                        _remainingLookahead = remainingLookahead3865;
                        _hitFailure = hitFailure3865;
                        if (!checkΣPython_javaccΣ118Σ5()) {
                            currentLookaheadToken = token3865;
                            _remainingLookahead = remainingLookahead3865;
                            _hitFailure = hitFailure3865;
                            if (!checkΣPython_javaccΣ120Σ5()) {
                                currentLookaheadToken = token3865;
                                _remainingLookahead = remainingLookahead3865;
                                _hitFailure = hitFailure3865;
                                if (!checkΣPython_javaccΣ122Σ5()) {
                                    currentLookaheadToken = token3865;
                                    _remainingLookahead = remainingLookahead3865;
                                    _hitFailure = hitFailure3865;
                                    if (!checkΣPython_javaccΣ124Σ5()) {
                                        currentLookaheadToken = token3865;
                                        _remainingLookahead = remainingLookahead3865;
                                        _hitFailure = hitFailure3865;
                                        return _lastLookaheadSucceeded = false;
                                    }
                                }
                            }
                        }
                    }
                }
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣReturnStatement() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:127:19
            if (!ScanToken(TokenType.RETURN)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:127:28
            var token3866 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ127Σ29())) {
                currentLookaheadToken = token3866;
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣGlobalStatement() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:129:19
            if (!ScanToken(TokenType.GLOBAL)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:129:28
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:129:35
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3867 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ129Σ36())) {
                    currentLookaheadToken = token3867;
                    break;
                }
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣNonlocalStatement() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:131:21
            if (!ScanToken(TokenType.NONLOCAL)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:131:32
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:131:39
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3868 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ131Σ40())) {
                    currentLookaheadToken = token3868;
                    break;
                }
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣAssertStatement() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:133:19
            if (!ScanToken(TokenType._ASSERT)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:133:28
            PushOntoLookaheadStack("AssertStatement", "Python.javacc", 133, 28);
            var prevProduction3869 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Expression";
            ScanToEnd = true;
            try {
                if (!checkΣExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3869;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:133:39
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3870 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ133Σ40())) {
                    currentLookaheadToken = token3870;
                    break;
                }
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣRaiseStatement() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:135:18
            if (!ScanToken(TokenType.RAISE)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:135:26
            var token3871 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ135Σ28())) {
                currentLookaheadToken = token3871;
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣBlock() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:138:5
            var token3872 = currentLookaheadToken;
            var remainingLookahead3872 = _remainingLookahead;
            var hitFailure3872 = _hitFailure;
            if (!checkΣPython_javaccΣ138Σ5()) {
                currentLookaheadToken = token3872;
                _remainingLookahead = remainingLookahead3872;
                _hitFailure = hitFailure3872;
                if (!checkΣPython_javaccΣ140Σ5()) {
                    currentLookaheadToken = token3872;
                    _remainingLookahead = remainingLookahead3872;
                    _hitFailure = hitFailure3872;
                    return _lastLookaheadSucceeded = false;
                }
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣElseBlock() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:143:13
            if (!ScanToken(TokenType.ELSE)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:143:20
            if (!ScanToken(TokenType.COLON)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:143:24
            PushOntoLookaheadStack("ElseBlock", "Python.javacc", 143, 24);
            var prevProduction3873 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Block";
            ScanToEnd = true;
            try {
                if (!checkΣBlock()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3873;
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣExceptBlock() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:145:15
            if (!ScanToken(TokenType.EXCEPT)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:145:24
            var token3874 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ145Σ26())) {
                currentLookaheadToken = token3874;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:145:59
            if (!ScanToken(TokenType.COLON)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:145:63
            PushOntoLookaheadStack("ExceptBlock", "Python.javacc", 145, 63);
            var prevProduction3875 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Block";
            ScanToEnd = true;
            try {
                if (!checkΣBlock()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3875;
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣIfStatement() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:148:5
            if (!ScanToken(TokenType.IF)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:148:10
            PushOntoLookaheadStack("IfStatement", "Python.javacc", 148, 10);
            var prevProduction3876 = _currentLookaheadProduction;
            _currentLookaheadProduction = "NamedExpression";
            ScanToEnd = true;
            try {
                if (!checkΣNamedExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3876;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:148:26
            if (!ScanToken(TokenType.COLON)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:148:30
            PushOntoLookaheadStack("IfStatement", "Python.javacc", 148, 30);
            var prevProduction3877 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Block";
            ScanToEnd = true;
            try {
                if (!checkΣBlock()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3877;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:149:6
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3878 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ149Σ7())) {
                    currentLookaheadToken = token3878;
                    break;
                }
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:150:6
            var token3879 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ150Σ7())) {
                currentLookaheadToken = token3879;
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣFinallyBlock() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:153:16
            if (!ScanToken(TokenType.FINALLY)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:153:26
            if (!ScanToken(TokenType.COLON)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:153:30
            PushOntoLookaheadStack("FinallyBlock", "Python.javacc", 153, 30);
            var prevProduction3880 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Block";
            ScanToEnd = true;
            try {
                if (!checkΣBlock()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3880;
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣWhileStatement() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:155:18
            if (!ScanToken(TokenType.WHILE)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:155:26
            PushOntoLookaheadStack("WhileStatement", "Python.javacc", 155, 26);
            var prevProduction3881 = _currentLookaheadProduction;
            _currentLookaheadProduction = "NamedExpression";
            ScanToEnd = true;
            try {
                if (!checkΣNamedExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3881;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:155:42
            if (!ScanToken(TokenType.COLON)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:155:46
            PushOntoLookaheadStack("WhileStatement", "Python.javacc", 155, 46);
            var prevProduction3882 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Block";
            ScanToEnd = true;
            try {
                if (!checkΣBlock()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3882;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:155:52
            var token3883 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ155Σ53())) {
                currentLookaheadToken = token3883;
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣWithStatement() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:158:5
            var token3884 = currentLookaheadToken;
            if (!(ScanToken(TokenType.ASYNC))) {
                currentLookaheadToken = token3884;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:158:15
            if (!ScanToken(TokenType.WITH)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 0;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:160:9
            var token3885 = currentLookaheadToken;
            var remainingLookahead3885 = _remainingLookahead;
            var hitFailure3885 = _hitFailure;
            if (!checkΣPython_javaccΣ160Σ9()) {
                currentLookaheadToken = token3885;
                _remainingLookahead = remainingLookahead3885;
                _hitFailure = hitFailure3885;
                if (!checkΣPython_javaccΣ162Σ9()) {
                    currentLookaheadToken = token3885;
                    _remainingLookahead = remainingLookahead3885;
                    _hitFailure = hitFailure3885;
                    return _lastLookaheadSucceeded = false;
                }
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:164:5
            if (!ScanToken(TokenType.COLON)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:164:9
            PushOntoLookaheadStack("WithStatement", "Python.javacc", 164, 9);
            var prevProduction3886 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Block";
            ScanToEnd = true;
            try {
                if (!checkΣBlock()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3886;
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣWithItemsInParentheses() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:167:31
            if (!ScanToken(TokenType.LPAREN)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:167:35
            PushOntoLookaheadStack("WithItemsInParentheses", "Python.javacc", 167, 35);
            var prevProduction3887 = _currentLookaheadProduction;
            _currentLookaheadProduction = "WithItem";
            ScanToEnd = true;
            try {
                if (!checkΣWithItem()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3887;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:167:44
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3888 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ167Σ45())) {
                    currentLookaheadToken = token3888;
                    break;
                }
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:167:67
            var token3889 = currentLookaheadToken;
            if (!(ScanToken(TokenType.COMMA))) {
                currentLookaheadToken = token3889;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:167:73
            if (!ScanToken(TokenType.RPAREN)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣWithItem() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:169:12
            PushOntoLookaheadStack("WithItem", "Python.javacc", 169, 12);
            var prevProduction3890 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Expression";
            ScanToEnd = false;
            try {
                if (!checkΣExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3890;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:169:23
            var token3891 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ169Σ24())) {
                currentLookaheadToken = token3891;
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣForStatement() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:172:4
            var token3892 = currentLookaheadToken;
            if (!(ScanToken(TokenType.ASYNC))) {
                currentLookaheadToken = token3892;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:172:14
            if (!ScanToken(TokenType.FOR)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 0;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:173:4
            PushOntoLookaheadStack("ForStatement", "Python.javacc", 173, 4);
            var prevProduction3893 = _currentLookaheadProduction;
            _currentLookaheadProduction = "StarTargets";
            ScanToEnd = true;
            try {
                if (!checkΣStarTargets()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3893;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:173:16
            if (!ScanToken(TokenType.IN)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:173:21
            PushOntoLookaheadStack("ForStatement", "Python.javacc", 173, 21);
            var prevProduction3894 = _currentLookaheadProduction;
            _currentLookaheadProduction = "StarExpressions";
            ScanToEnd = true;
            try {
                if (!checkΣStarExpressions()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3894;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:173:37
            if (!ScanToken(TokenType.COLON)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:174:4
            PushOntoLookaheadStack("ForStatement", "Python.javacc", 174, 4);
            var prevProduction3895 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Block";
            ScanToEnd = true;
            try {
                if (!checkΣBlock()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3895;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:174:10
            var token3896 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ174Σ11())) {
                currentLookaheadToken = token3896;
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣTryStatement() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:178:4
            if (!ScanToken(TokenType.TRY)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:178:10
            if (!ScanToken(TokenType.COLON)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:178:14
            PushOntoLookaheadStack("TryStatement", "Python.javacc", 178, 14);
            var prevProduction3897 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Block";
            ScanToEnd = true;
            try {
                if (!checkΣBlock()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3897;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:180:8
            var token3898 = currentLookaheadToken;
            var remainingLookahead3898 = _remainingLookahead;
            var hitFailure3898 = _hitFailure;
            if (!checkΣPython_javaccΣ180Σ8()) {
                currentLookaheadToken = token3898;
                _remainingLookahead = remainingLookahead3898;
                _hitFailure = hitFailure3898;
                if (!checkΣPython_javaccΣ182Σ8()) {
                    currentLookaheadToken = token3898;
                    _remainingLookahead = remainingLookahead3898;
                    _hitFailure = hitFailure3898;
                    return _lastLookaheadSucceeded = false;
                }
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣDelStatement() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:186:16
            if (!ScanToken(TokenType.DEL)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:186:22
            PushOntoLookaheadStack("DelStatement", "Python.javacc", 186, 22);
            var prevProduction3899 = _currentLookaheadProduction;
            _currentLookaheadProduction = "PrimaryExpression";
            ScanToEnd = true;
            try {
                if (!checkΣPrimaryExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3899;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:186:40
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3900 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ186Σ41())) {
                    currentLookaheadToken = token3900;
                    break;
                }
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:186:72
            var token3901 = currentLookaheadToken;
            if (!(ScanToken(TokenType.COMMA))) {
                currentLookaheadToken = token3901;
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣNamedExpression() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:188:19
            var token3902 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ188Σ21())) {
                currentLookaheadToken = token3902;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:188:38
            PushOntoLookaheadStack("NamedExpression", "Python.javacc", 188, 38);
            var prevProduction3903 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Expression";
            ScanToEnd = false;
            try {
                if (!checkΣExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3903;
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣDottedName() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:190:14
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:190:21
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3904 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ190Σ22())) {
                    currentLookaheadToken = token3904;
                    break;
                }
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣImportStatement() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:192:19
            var token3905 = currentLookaheadToken;
            var remainingLookahead3905 = _remainingLookahead;
            var hitFailure3905 = _hitFailure;
            if (!checkΣPython_javaccΣ192Σ19()) {
                currentLookaheadToken = token3905;
                _remainingLookahead = remainingLookahead3905;
                _hitFailure = hitFailure3905;
                if (!checkΣPython_javaccΣ192Σ32()) {
                    currentLookaheadToken = token3905;
                    _remainingLookahead = remainingLookahead3905;
                    _hitFailure = hitFailure3905;
                    if (!checkΣPython_javaccΣ192Σ46()) {
                        currentLookaheadToken = token3905;
                        _remainingLookahead = remainingLookahead3905;
                        _hitFailure = hitFailure3905;
                        return _lastLookaheadSucceeded = false;
                    }
                }
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣImportName() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:194:19
            if (!ScanToken(TokenType.IMPORT)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:194:28
            PushOntoLookaheadStack("ImportName", "Python.javacc", 194, 28);
            var prevProduction3906 = _currentLookaheadProduction;
            _currentLookaheadProduction = "DottedName";
            ScanToEnd = true;
            try {
                if (!checkΣDottedName()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3906;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:194:39
            var token3907 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ194Σ40())) {
                currentLookaheadToken = token3907;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:194:53
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3908 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ194Σ54())) {
                    currentLookaheadToken = token3908;
                    break;
                }
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣImportFrom1() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:196:20
            if (!ScanToken(TokenType.FROM)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:196:27
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3909 = currentLookaheadToken;
                if (!(ScanToken(first_setΣPython_javaccΣ196Σ28))) {
                    currentLookaheadToken = token3909;
                    break;
                }
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:196:42
            PushOntoLookaheadStack("ImportFrom1", "Python.javacc", 196, 42);
            var prevProduction3910 = _currentLookaheadProduction;
            _currentLookaheadProduction = "DottedName";
            ScanToEnd = true;
            try {
                if (!checkΣDottedName()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3910;
            }
            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 0;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:196:58
            if (!ScanToken(TokenType.IMPORT)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:196:68
            PushOntoLookaheadStack("ImportFrom1", "Python.javacc", 196, 68);
            var prevProduction3911 = _currentLookaheadProduction;
            _currentLookaheadProduction = "ImportFromTargets";
            ScanToEnd = true;
            try {
                if (!checkΣImportFromTargets()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3911;
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣImportFrom2() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:198:20
            if (!ScanToken(TokenType.FROM)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for OneOrMore specified at Python.javacc:198:27
            if (!(ScanToken(first_setΣPython_javaccΣ198Σ28))) {
                return _lastLookaheadSucceeded = false;
            }
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3912 = currentLookaheadToken;
                if (!(ScanToken(first_setΣPython_javaccΣ198Σ28))) {
                    currentLookaheadToken = token3912;
                    break;
                }
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:198:42
            if (!ScanToken(TokenType.IMPORT)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 0;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:198:56
            PushOntoLookaheadStack("ImportFrom2", "Python.javacc", 198, 56);
            var prevProduction3913 = _currentLookaheadProduction;
            _currentLookaheadProduction = "ImportFromTargets";
            ScanToEnd = true;
            try {
                if (!checkΣImportFromTargets()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3913;
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣImportFromTargets() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:201:4
            var token3914 = currentLookaheadToken;
            var remainingLookahead3914 = _remainingLookahead;
            var hitFailure3914 = _hitFailure;
            if (!ScanToken(TokenType.STAR)) {
                currentLookaheadToken = token3914;
                _remainingLookahead = remainingLookahead3914;
                _hitFailure = hitFailure3914;
                if (!checkΣPython_javaccΣ203Σ4()) {
                    currentLookaheadToken = token3914;
                    _remainingLookahead = remainingLookahead3914;
                    _hitFailure = hitFailure3914;
                    if (!checkΣPython_javaccΣ205Σ4()) {
                        currentLookaheadToken = token3914;
                        _remainingLookahead = remainingLookahead3914;
                        _hitFailure = hitFailure3914;
                        return _lastLookaheadSucceeded = false;
                    }
                }
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣStarNamedExpression() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:209:6
            var token3915 = currentLookaheadToken;
            var remainingLookahead3915 = _remainingLookahead;
            var hitFailure3915 = _hitFailure;
            if (!checkΣPython_javaccΣ209Σ6()) {
                currentLookaheadToken = token3915;
                _remainingLookahead = remainingLookahead3915;
                _hitFailure = hitFailure3915;
                if (!checkΣPython_javaccΣ211Σ6()) {
                    currentLookaheadToken = token3915;
                    _remainingLookahead = remainingLookahead3915;
                    _hitFailure = hitFailure3915;
                    return _lastLookaheadSucceeded = false;
                }
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣStarExpression() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:215:5
            var token3916 = currentLookaheadToken;
            var remainingLookahead3916 = _remainingLookahead;
            var hitFailure3916 = _hitFailure;
            if (!checkΣPython_javaccΣ215Σ5()) {
                currentLookaheadToken = token3916;
                _remainingLookahead = remainingLookahead3916;
                _hitFailure = hitFailure3916;
                if (!checkΣPython_javaccΣ217Σ5()) {
                    currentLookaheadToken = token3916;
                    _remainingLookahead = remainingLookahead3916;
                    _hitFailure = hitFailure3916;
                    return _lastLookaheadSucceeded = false;
                }
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣStarExpressions() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:220:19
            PushOntoLookaheadStack("StarExpressions", "Python.javacc", 220, 19);
            var prevProduction3917 = _currentLookaheadProduction;
            _currentLookaheadProduction = "StarExpression";
            ScanToEnd = false;
            try {
                if (!checkΣStarExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3917;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:220:34
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3918 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ220Σ35())) {
                    currentLookaheadToken = token3918;
                    break;
                }
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:220:62
            var token3919 = currentLookaheadToken;
            if (!(ScanToken(TokenType.COMMA))) {
                currentLookaheadToken = token3919;
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣStarNamedExpressions() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:222:24
            PushOntoLookaheadStack("StarNamedExpressions", "Python.javacc", 222, 24);
            var prevProduction3920 = _currentLookaheadProduction;
            _currentLookaheadProduction = "StarNamedExpression";
            ScanToEnd = false;
            try {
                if (!checkΣStarNamedExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3920;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:222:44
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3921 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ222Σ45())) {
                    currentLookaheadToken = token3921;
                    break;
                }
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:222:77
            var token3922 = currentLookaheadToken;
            if (!(ScanToken(TokenType.COMMA))) {
                currentLookaheadToken = token3922;
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣBitwiseOr() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:224:13
            PushOntoLookaheadStack("BitwiseOr", "Python.javacc", 224, 13);
            var prevProduction3923 = _currentLookaheadProduction;
            _currentLookaheadProduction = "BitwiseXor";
            ScanToEnd = false;
            try {
                if (!checkΣBitwiseXor()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3923;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:224:24
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3924 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ224Σ25())) {
                    currentLookaheadToken = token3924;
                    break;
                }
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣBitwiseXor() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:226:14
            PushOntoLookaheadStack("BitwiseXor", "Python.javacc", 226, 14);
            var prevProduction3925 = _currentLookaheadProduction;
            _currentLookaheadProduction = "BitwiseAnd";
            ScanToEnd = false;
            try {
                if (!checkΣBitwiseAnd()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3925;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:226:25
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3926 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ226Σ26())) {
                    currentLookaheadToken = token3926;
                    break;
                }
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣBitwiseAnd() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:228:14
            PushOntoLookaheadStack("BitwiseAnd", "Python.javacc", 228, 14);
            var prevProduction3927 = _currentLookaheadProduction;
            _currentLookaheadProduction = "ShiftExpression";
            ScanToEnd = false;
            try {
                if (!checkΣShiftExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3927;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:228:30
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3928 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ228Σ31())) {
                    currentLookaheadToken = token3928;
                    break;
                }
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣShiftExpression() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:230:19
            PushOntoLookaheadStack("ShiftExpression", "Python.javacc", 230, 19);
            var prevProduction3929 = _currentLookaheadProduction;
            _currentLookaheadProduction = "AdditiveExpression";
            ScanToEnd = false;
            try {
                if (!checkΣAdditiveExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3929;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:230:38
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3930 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ230Σ39())) {
                    currentLookaheadToken = token3930;
                    break;
                }
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣAdditiveExpression() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:232:22
            PushOntoLookaheadStack("AdditiveExpression", "Python.javacc", 232, 22);
            var prevProduction3931 = _currentLookaheadProduction;
            _currentLookaheadProduction = "MultiplicativeExpression";
            ScanToEnd = false;
            try {
                if (!checkΣMultiplicativeExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3931;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:232:47
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3932 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ232Σ48())) {
                    currentLookaheadToken = token3932;
                    break;
                }
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣMultiplicativeExpression() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:234:28
            PushOntoLookaheadStack("MultiplicativeExpression", "Python.javacc", 234, 28);
            var prevProduction3933 = _currentLookaheadProduction;
            _currentLookaheadProduction = "UnaryExpression";
            ScanToEnd = false;
            try {
                if (!checkΣUnaryExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3933;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:234:44
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3934 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ234Σ45())) {
                    currentLookaheadToken = token3934;
                    break;
                }
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣUnaryExpression() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:236:19
            var token3935 = currentLookaheadToken;
            var remainingLookahead3935 = _remainingLookahead;
            var hitFailure3935 = _hitFailure;
            if (!checkΣPython_javaccΣ236Σ19()) {
                currentLookaheadToken = token3935;
                _remainingLookahead = remainingLookahead3935;
                _hitFailure = hitFailure3935;
                if (!checkΣPython_javaccΣ236Σ27()) {
                    currentLookaheadToken = token3935;
                    _remainingLookahead = remainingLookahead3935;
                    _hitFailure = hitFailure3935;
                    return _lastLookaheadSucceeded = false;
                }
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣPower() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:238:9
            PushOntoLookaheadStack("Power", "Python.javacc", 238, 9);
            var prevProduction3936 = _currentLookaheadProduction;
            _currentLookaheadProduction = "AwaitPrimary";
            ScanToEnd = false;
            try {
                if (!checkΣAwaitPrimary()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3936;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:238:22
            var token3937 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ238Σ23())) {
                currentLookaheadToken = token3937;
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣTuple() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:242:5
            if (!ScanToken(TokenType.LPAREN)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:242:9
            var token3938 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ242Σ10())) {
                currentLookaheadToken = token3938;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:242:58
            if (!ScanToken(TokenType.RPAREN)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣGroup() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:245:9
            if (!ScanToken(TokenType.LPAREN)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:245:14
            var token3939 = currentLookaheadToken;
            var remainingLookahead3939 = _remainingLookahead;
            var hitFailure3939 = _hitFailure;
            if (!checkΣPython_javaccΣ245Σ14()) {
                currentLookaheadToken = token3939;
                _remainingLookahead = remainingLookahead3939;
                _hitFailure = hitFailure3939;
                if (!checkΣPython_javaccΣ245Σ32()) {
                    currentLookaheadToken = token3939;
                    _remainingLookahead = remainingLookahead3939;
                    _hitFailure = hitFailure3939;
                    return _lastLookaheadSucceeded = false;
                }
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:245:49
            if (!ScanToken(TokenType.RPAREN)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣAwaitPrimary() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:247:16
            var token3940 = currentLookaheadToken;
            if (!(ScanToken(TokenType.AWAIT))) {
                currentLookaheadToken = token3940;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:247:26
            PushOntoLookaheadStack("AwaitPrimary", "Python.javacc", 247, 26);
            var prevProduction3941 = _currentLookaheadProduction;
            _currentLookaheadProduction = "PrimaryExpression";
            ScanToEnd = false;
            try {
                if (!checkΣPrimaryExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3941;
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣPrimaryExpression() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:250:4
            PushOntoLookaheadStack("PrimaryExpression", "Python.javacc", 250, 4);
            var prevProduction3942 = _currentLookaheadProduction;
            _currentLookaheadProduction = "AtomicExpression";
            ScanToEnd = false;
            try {
                if (!checkΣAtomicExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3942;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:251:4
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3943 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ252Σ8())) {
                    currentLookaheadToken = token3943;
                    break;
                }
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣYieldExpression() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:263:5
            var token3944 = currentLookaheadToken;
            var remainingLookahead3944 = _remainingLookahead;
            var hitFailure3944 = _hitFailure;
            if (!checkΣPython_javaccΣ263Σ5()) {
                currentLookaheadToken = token3944;
                _remainingLookahead = remainingLookahead3944;
                _hitFailure = hitFailure3944;
                if (!checkΣPython_javaccΣ265Σ5()) {
                    currentLookaheadToken = token3944;
                    _remainingLookahead = remainingLookahead3944;
                    _hitFailure = hitFailure3944;
                    return _lastLookaheadSucceeded = false;
                }
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣYieldStatement() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:268:19
            PushOntoLookaheadStack("YieldStatement", "Python.javacc", 268, 19);
            var prevProduction3945 = _currentLookaheadProduction;
            _currentLookaheadProduction = "YieldExpression";
            ScanToEnd = false;
            try {
                if (!checkΣYieldExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3945;
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣAnnotatedRhs() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:270:16
            var token3946 = currentLookaheadToken;
            var remainingLookahead3946 = _remainingLookahead;
            var hitFailure3946 = _hitFailure;
            if (!checkΣPython_javaccΣ270Σ16()) {
                currentLookaheadToken = token3946;
                _remainingLookahead = remainingLookahead3946;
                _hitFailure = hitFailure3946;
                if (!checkΣPython_javaccΣ270Σ34()) {
                    currentLookaheadToken = token3946;
                    _remainingLookahead = remainingLookahead3946;
                    _hitFailure = hitFailure3946;
                    return _lastLookaheadSucceeded = false;
                }
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣDecorators() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for OneOrMore specified at Python.javacc:272:14
            if (!(checkΣPython_javaccΣ272Σ15())) {
                return _lastLookaheadSucceeded = false;
            }
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3947 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ272Σ15())) {
                    currentLookaheadToken = token3947;
                    break;
                }
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣAnnotation() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:274:14
            if (!ScanToken(TokenType.COLON)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:274:18
            PushOntoLookaheadStack("Annotation", "Python.javacc", 274, 18);
            var prevProduction3948 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Expression";
            ScanToEnd = true;
            try {
                if (!checkΣExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3948;
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣInvocationArguments() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:277:4
            if (!ScanToken(TokenType.LPAREN)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:278:4
            var token3949 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ279Σ7())) {
                currentLookaheadToken = token3949;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:300:4
            if (!ScanToken(TokenType.RPAREN)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣArgument() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:304:4
            var token3950 = currentLookaheadToken;
            var remainingLookahead3950 = _remainingLookahead;
            var hitFailure3950 = _hitFailure;
            if (!checkΣPython_javaccΣ304Σ4()) {
                currentLookaheadToken = token3950;
                _remainingLookahead = remainingLookahead3950;
                _hitFailure = hitFailure3950;
                if (!checkΣPython_javaccΣ314Σ4()) {
                    currentLookaheadToken = token3950;
                    _remainingLookahead = remainingLookahead3950;
                    _hitFailure = hitFailure3950;
                    return _lastLookaheadSucceeded = false;
                }
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣKeyValuePair() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:321:16
            PushOntoLookaheadStack("KeyValuePair", "Python.javacc", 321, 16);
            var prevProduction3951 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Expression";
            ScanToEnd = false;
            try {
                if (!checkΣExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3951;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:321:27
            if (!ScanToken(TokenType.COLON)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:321:31
            PushOntoLookaheadStack("KeyValuePair", "Python.javacc", 321, 31);
            var prevProduction3952 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Expression";
            ScanToEnd = true;
            try {
                if (!checkΣExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3952;
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣDoubleStarredKeyValuePair() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:324:5
            var token3953 = currentLookaheadToken;
            var remainingLookahead3953 = _remainingLookahead;
            var hitFailure3953 = _hitFailure;
            if (!checkΣPython_javaccΣ324Σ5()) {
                currentLookaheadToken = token3953;
                _remainingLookahead = remainingLookahead3953;
                _hitFailure = hitFailure3953;
                if (!checkΣPython_javaccΣ326Σ5()) {
                    currentLookaheadToken = token3953;
                    _remainingLookahead = remainingLookahead3953;
                    _hitFailure = hitFailure3953;
                    return _lastLookaheadSucceeded = false;
                }
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣDoubleStarredKeyValuePairs() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:329:30
            PushOntoLookaheadStack("DoubleStarredKeyValuePairs", "Python.javacc", 329, 30);
            var prevProduction3954 = _currentLookaheadProduction;
            _currentLookaheadProduction = "DoubleStarredKeyValuePair";
            ScanToEnd = false;
            try {
                if (!checkΣDoubleStarredKeyValuePair()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3954;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:329:56
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3955 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ329Σ57())) {
                    currentLookaheadToken = token3955;
                    break;
                }
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:329:95
            var token3956 = currentLookaheadToken;
            if (!(ScanToken(TokenType.COMMA))) {
                currentLookaheadToken = token3956;
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣDict() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:334:5
            if (!ScanToken(TokenType.LBRACE)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:335:5
            var token3957 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ335Σ6())) {
                currentLookaheadToken = token3957;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:336:5
            if (!ScanToken(TokenType.RBRACE)) {
                return _lastLookaheadSucceeded = false;
            }




            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣDictComp() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:340:12
            if (!ScanToken(TokenType.LBRACE)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:340:16
            PushOntoLookaheadStack("DictComp", "Python.javacc", 340, 16);
            var prevProduction3958 = _currentLookaheadProduction;
            _currentLookaheadProduction = "KeyValuePair";
            ScanToEnd = true;
            try {
                if (!checkΣKeyValuePair()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3958;
            }
            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 2;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for OneOrMore specified at Python.javacc:340:35
            if (!(checkΣPython_javaccΣ340Σ36())) {
                return _lastLookaheadSucceeded = false;
            }
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3959 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ340Σ36())) {
                    currentLookaheadToken = token3959;
                    break;
                }
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:340:50
            if (!ScanToken(TokenType.RBRACE)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣSet() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:342:7
            if (!ScanToken(TokenType.LBRACE)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:342:11
            PushOntoLookaheadStack("Set", "Python.javacc", 342, 11);
            var prevProduction3960 = _currentLookaheadProduction;
            _currentLookaheadProduction = "StarNamedExpressions";
            ScanToEnd = true;
            try {
                if (!checkΣStarNamedExpressions()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3960;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:342:32
            if (!ScanToken(TokenType.RBRACE)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣSetComp() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:344:11
            if (!ScanToken(TokenType.LBRACE)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:344:15
            PushOntoLookaheadStack("SetComp", "Python.javacc", 344, 15);
            var prevProduction3961 = _currentLookaheadProduction;
            _currentLookaheadProduction = "NamedExpression";
            ScanToEnd = true;
            try {
                if (!checkΣNamedExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3961;
            }
            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 2;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for OneOrMore specified at Python.javacc:344:37
            if (!(checkΣPython_javaccΣ344Σ38())) {
                return _lastLookaheadSucceeded = false;
            }
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3962 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ344Σ38())) {
                    currentLookaheadToken = token3962;
                    break;
                }
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:344:52
            if (!ScanToken(TokenType.RBRACE)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣClassDefinition() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:347:5
            var token3963 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ347Σ6())) {
                currentLookaheadToken = token3963;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:347:18
            if (!ScanToken(TokenType.CLASS)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 0;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:348:5
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:348:12
            var token3964 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ348Σ13())) {
                currentLookaheadToken = token3964;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:349:5
            if (!ScanToken(TokenType.COLON)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:350:5
            PushOntoLookaheadStack("ClassDefinition", "Python.javacc", 350, 5);
            var prevProduction3965 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Block";
            ScanToEnd = true;
            try {
                if (!checkΣBlock()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3965;
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣFunctionDefinition() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:354:5
            var token3966 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ354Σ6())) {
                currentLookaheadToken = token3966;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:355:5
            var token3967 = currentLookaheadToken;
            if (!(ScanToken(TokenType.ASYNC))) {
                currentLookaheadToken = token3967;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:356:5
            if (!ScanToken(TokenType.DEF)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 0;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:357:5
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:358:5
            if (!ScanToken(TokenType.LPAREN)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:359:5
            PushOntoLookaheadStack("FunctionDefinition", "Python.javacc", 359, 5);
            var prevProduction3968 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Parameters";
            ScanToEnd = true;
            try {
                if (!checkΣParameters()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3968;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:360:5
            if (!ScanToken(TokenType.RPAREN)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:361:5
            var token3969 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ361Σ6())) {
                currentLookaheadToken = token3969;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:362:5
            if (!ScanToken(TokenType.COLON)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:362:9
            PushOntoLookaheadStack("FunctionDefinition", "Python.javacc", 362, 9);
            var prevProduction3970 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Block";
            ScanToEnd = true;
            try {
                if (!checkΣBlock()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3970;
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣLambdaDefinition() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:365:20
            if (!ScanToken(TokenType.LAMBDA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:365:29
            PushOntoLookaheadStack("LambdaDefinition", "Python.javacc", 365, 29);
            var prevProduction3971 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Parameters";
            ScanToEnd = true;
            try {
                if (!checkΣParameters()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3971;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:365:40
            if (!ScanToken(TokenType.COLON)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:365:44
            PushOntoLookaheadStack("LambdaDefinition", "Python.javacc", 365, 44);
            var prevProduction3972 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Expression";
            ScanToEnd = true;
            try {
                if (!checkΣExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3972;
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣExpression() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:371:14
            var token3973 = currentLookaheadToken;
            var remainingLookahead3973 = _remainingLookahead;
            var hitFailure3973 = _hitFailure;
            if (!checkΣPython_javaccΣ371Σ14()) {
                currentLookaheadToken = token3973;
                _remainingLookahead = remainingLookahead3973;
                _hitFailure = hitFailure3973;
                if (!checkΣPython_javaccΣ371Σ65()) {
                    currentLookaheadToken = token3973;
                    _remainingLookahead = remainingLookahead3973;
                    _hitFailure = hitFailure3973;
                    return _lastLookaheadSucceeded = false;
                }
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣDisjunction() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:373:15
            PushOntoLookaheadStack("Disjunction", "Python.javacc", 373, 15);
            var prevProduction3974 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Conjunction";
            ScanToEnd = false;
            try {
                if (!checkΣConjunction()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3974;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:373:27
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3975 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ373Σ28())) {
                    currentLookaheadToken = token3975;
                    break;
                }
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣConjunction() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:375:15
            PushOntoLookaheadStack("Conjunction", "Python.javacc", 375, 15);
            var prevProduction3976 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Inversion";
            ScanToEnd = false;
            try {
                if (!checkΣInversion()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3976;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:375:25
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3977 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ375Σ26())) {
                    currentLookaheadToken = token3977;
                    break;
                }
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣInversion() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:377:13
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3978 = currentLookaheadToken;
                if (!(ScanToken(TokenType.NOT))) {
                    currentLookaheadToken = token3978;
                    break;
                }
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:377:22
            PushOntoLookaheadStack("Inversion", "Python.javacc", 377, 22);
            var prevProduction3979 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Comparison";
            ScanToEnd = false;
            try {
                if (!checkΣComparison()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3979;
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣComparison() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:379:14
            PushOntoLookaheadStack("Comparison", "Python.javacc", 379, 14);
            var prevProduction3980 = _currentLookaheadProduction;
            _currentLookaheadProduction = "BitwiseOr";
            ScanToEnd = false;
            try {
                if (!checkΣBitwiseOr()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3980;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:379:24
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3981 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ379Σ25())) {
                    currentLookaheadToken = token3981;
                    break;
                }
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣComparisonOperator() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:382:4
            var token3982 = currentLookaheadToken;
            var remainingLookahead3982 = _remainingLookahead;
            var hitFailure3982 = _hitFailure;
            if (!ScanToken(TokenType.LT)) {
                currentLookaheadToken = token3982;
                _remainingLookahead = remainingLookahead3982;
                _hitFailure = hitFailure3982;
                if (!ScanToken(TokenType.GT)) {
                    currentLookaheadToken = token3982;
                    _remainingLookahead = remainingLookahead3982;
                    _hitFailure = hitFailure3982;
                    if (!ScanToken(TokenType.EQ)) {
                        currentLookaheadToken = token3982;
                        _remainingLookahead = remainingLookahead3982;
                        _hitFailure = hitFailure3982;
                        if (!ScanToken(TokenType.GE)) {
                            currentLookaheadToken = token3982;
                            _remainingLookahead = remainingLookahead3982;
                            _hitFailure = hitFailure3982;
                            if (!ScanToken(TokenType.LE)) {
                                currentLookaheadToken = token3982;
                                _remainingLookahead = remainingLookahead3982;
                                _hitFailure = hitFailure3982;
                                if (!ScanToken(TokenType.NE)) {
                                    currentLookaheadToken = token3982;
                                    _remainingLookahead = remainingLookahead3982;
                                    _hitFailure = hitFailure3982;
                                    if (!checkΣPython_javaccΣ384Σ4()) {
                                        currentLookaheadToken = token3982;
                                        _remainingLookahead = remainingLookahead3982;
                                        _hitFailure = hitFailure3982;
                                        if (!checkΣPython_javaccΣ386Σ4()) {
                                            currentLookaheadToken = token3982;
                                            _remainingLookahead = remainingLookahead3982;
                                            _hitFailure = hitFailure3982;
                                            return _lastLookaheadSucceeded = false;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣStarTarget() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:389:14
            var token3983 = currentLookaheadToken;
            if (!(ScanToken(TokenType.STAR))) {
                currentLookaheadToken = token3983;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:389:20
            PushOntoLookaheadStack("StarTarget", "Python.javacc", 389, 20);
            var prevProduction3984 = _currentLookaheadProduction;
            _currentLookaheadProduction = "PrimaryExpression";
            ScanToEnd = false;
            try {
                if (!checkΣPrimaryExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3984;
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣStarTargets() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:391:15
            PushOntoLookaheadStack("StarTargets", "Python.javacc", 391, 15);
            var prevProduction3985 = _currentLookaheadProduction;
            _currentLookaheadProduction = "StarTarget";
            ScanToEnd = false;
            try {
                if (!checkΣStarTarget()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3985;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:391:26
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3986 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ391Σ27())) {
                    currentLookaheadToken = token3986;
                    break;
                }
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:391:50
            var token3987 = currentLookaheadToken;
            if (!(ScanToken(TokenType.COMMA))) {
                currentLookaheadToken = token3987;
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣForIfClause() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:393:15
            var token3988 = currentLookaheadToken;
            if (!(ScanToken(TokenType.ASYNC))) {
                currentLookaheadToken = token3988;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:393:25
            if (!ScanToken(TokenType.FOR)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:393:31
            PushOntoLookaheadStack("ForIfClause", "Python.javacc", 393, 31);
            var prevProduction3989 = _currentLookaheadProduction;
            _currentLookaheadProduction = "StarTargets";
            ScanToEnd = true;
            try {
                if (!checkΣStarTargets()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3989;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:393:43
            if (!ScanToken(TokenType.IN)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:393:48
            PushOntoLookaheadStack("ForIfClause", "Python.javacc", 393, 48);
            var prevProduction3990 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Disjunction";
            ScanToEnd = true;
            try {
                if (!checkΣDisjunction()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3990;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:393:60
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3991 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ393Σ61())) {
                    currentLookaheadToken = token3991;
                    break;
                }
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣGenExp() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:395:10
            if (!ScanToken(TokenType.LPAREN)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:395:14
            PushOntoLookaheadStack("GenExp", "Python.javacc", 395, 14);
            var prevProduction3992 = _currentLookaheadProduction;
            _currentLookaheadProduction = "NamedExpression";
            ScanToEnd = true;
            try {
                if (!checkΣNamedExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3992;
            }
            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 2;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for OneOrMore specified at Python.javacc:395:36
            if (!(checkΣPython_javaccΣ395Σ37())) {
                return _lastLookaheadSucceeded = false;
            }
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3993 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ395Σ37())) {
                    currentLookaheadToken = token3993;
                    break;
                }
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:395:51
            if (!ScanToken(TokenType.RPAREN)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣList() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:397:8
            if (!ScanToken(TokenType.LBRACKET)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:397:12
            var token3994 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ397Σ13())) {
                currentLookaheadToken = token3994;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:397:35
            if (!ScanToken(TokenType.RBRACKET)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣListComp() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:399:12
            if (!ScanToken(TokenType.LBRACKET)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:399:16
            PushOntoLookaheadStack("ListComp", "Python.javacc", 399, 16);
            var prevProduction3995 = _currentLookaheadProduction;
            _currentLookaheadProduction = "NamedExpression";
            ScanToEnd = true;
            try {
                if (!checkΣNamedExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction3995;
            }
            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 2;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for OneOrMore specified at Python.javacc:399:38
            if (!(checkΣPython_javaccΣ399Σ39())) {
                return _lastLookaheadSucceeded = false;
            }
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token3996 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ399Σ39())) {
                    currentLookaheadToken = token3996;
                    break;
                }
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:399:53
            if (!ScanToken(TokenType.RBRACKET)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣStarEtc() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:402:4
            var token3997 = currentLookaheadToken;
            var remainingLookahead3997 = _remainingLookahead;
            var hitFailure3997 = _hitFailure;
            if (!checkΣPython_javaccΣ402Σ4()) {
                currentLookaheadToken = token3997;
                _remainingLookahead = remainingLookahead3997;
                _hitFailure = hitFailure3997;
                if (!checkΣPython_javaccΣ404Σ4()) {
                    currentLookaheadToken = token3997;
                    _remainingLookahead = remainingLookahead3997;
                    _hitFailure = hitFailure3997;
                    if (!checkΣPython_javaccΣ406Σ4()) {
                        currentLookaheadToken = token3997;
                        _remainingLookahead = remainingLookahead3997;
                        _hitFailure = hitFailure3997;
                        return _lastLookaheadSucceeded = false;
                    }
                }
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣParamMaybeDefault() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:409:21
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:409:28
            var token3998 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ409Σ29())) {
                currentLookaheadToken = token3998;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:409:45
            var token3999 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ409Σ46())) {
                currentLookaheadToken = token3999;
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣKeyWords() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:412:4
            if (!ScanToken(TokenType.STAR_STAR)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:412:9
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:413:4
            var token4000 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ414Σ8())) {
                currentLookaheadToken = token4000;
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣParameters() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:421:5
            var token4001 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ422Σ7())) {
                currentLookaheadToken = token4001;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:444:5
            var token4002 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ445Σ7())) {
                currentLookaheadToken = token4002;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:447:5
            var token4003 = currentLookaheadToken;
            if (!(ScanToken(TokenType.COMMA))) {
                currentLookaheadToken = token4003;
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣAugAssign() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:451:5
            if (!ScanToken(AugAssign_FIRST_SET)) {
                return _lastLookaheadSucceeded = false;
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣSimpleAssignTarget() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:456:4
            var token4004 = currentLookaheadToken;
            var remainingLookahead4004 = _remainingLookahead;
            var hitFailure4004 = _hitFailure;
            if (!checkΣPython_javaccΣ456Σ4()) {
                currentLookaheadToken = token4004;
                _remainingLookahead = remainingLookahead4004;
                _hitFailure = hitFailure4004;
                if (!checkΣPython_javaccΣ458Σ4()) {
                    currentLookaheadToken = token4004;
                    _remainingLookahead = remainingLookahead4004;
                    _hitFailure = hitFailure4004;
                    return _lastLookaheadSucceeded = false;
                }
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣAssignment() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:464:3
            var token4005 = currentLookaheadToken;
            var remainingLookahead4005 = _remainingLookahead;
            var hitFailure4005 = _hitFailure;
            if (!checkΣPython_javaccΣ464Σ3()) {
                currentLookaheadToken = token4005;
                _remainingLookahead = remainingLookahead4005;
                _hitFailure = hitFailure4005;
                if (!checkΣPython_javaccΣ466Σ3()) {
                    currentLookaheadToken = token4005;
                    _remainingLookahead = remainingLookahead4005;
                    _hitFailure = hitFailure4005;
                    if (!checkΣPython_javaccΣ468Σ3()) {
                        currentLookaheadToken = token4005;
                        _remainingLookahead = remainingLookahead4005;
                        _hitFailure = hitFailure4005;
                        return _lastLookaheadSucceeded = false;
                    }
                }
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣMatchStatement() {
            var previousActives4006 = new SetAdapter<TokenType>(tokenSource.ActiveTokenTypes);
            var somethingChanged4007 = ActivateTokenTypes(
                TokenType.MATCH
            );
            try {
                if (!ScanToken(TokenType.MATCH)) {
                    return _lastLookaheadSucceeded = false;
                }

            }
            finally {
                tokenSource.ActiveTokenTypes = previousActives4006;
                if (somethingChanged4007) {
                    tokenSource.Reset(GetToken(0));
                    _nextTokenType = null;
                }
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:477:4
            PushOntoLookaheadStack("MatchStatement", "Python.javacc", 477, 4);
            var prevProduction4008 = _currentLookaheadProduction;
            _currentLookaheadProduction = "SubjectExpression";
            ScanToEnd = true;
            try {
                if (!checkΣSubjectExpression()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction4008;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:478:4
            if (!ScanToken(TokenType.COLON)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 0;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:480:4
            if (!ScanToken(TokenType.NEWLINE)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:481:4
            if (!ScanToken(TokenType.EOF)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for OneOrMore specified at Python.javacc:482:25
            var previousActives4009 = new SetAdapter<TokenType>(tokenSource.ActiveTokenTypes);
            var somethingChanged4010 = ActivateTokenTypes(
                TokenType.CASE
            );
            try {
                if (!(checkΣPython_javaccΣ482Σ26())) {
                    return _lastLookaheadSucceeded = false;
                }
                while (_remainingLookahead > 0 && ! _hitFailure) {
                    var token4011 = currentLookaheadToken;
                    if (!(checkΣPython_javaccΣ482Σ26())) {
                        currentLookaheadToken = token4011;
                        break;
                    }
                }

            }
            finally {
                tokenSource.ActiveTokenTypes = previousActives4009;
                if (somethingChanged4010) {
                    tokenSource.Reset(GetToken(0));
                    _nextTokenType = null;
                }
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:483:4
            if (!ScanToken(TokenType.EOF)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣCaseBlock() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:487:5
            if (!ScanToken(TokenType.CASE)) {
                return _lastLookaheadSucceeded = false;
            }

            var previousActives4012 = new SetAdapter<TokenType>(tokenSource.ActiveTokenTypes);
            var somethingChanged4013 = DeactivateTokenTypes(
                TokenType.CASE
            );
            try {
                if (_hitFailure || _remainingLookahead <= 0) {
                    return _lastLookaheadSucceeded = !_hitFailure;
                }
                // Lookahead Code for NonTerminal specified at Python.javacc:490:7
                PushOntoLookaheadStack("CaseBlock", "Python.javacc", 490, 7);
                var prevProduction4014 = _currentLookaheadProduction;
                _currentLookaheadProduction = "Patterns";
                ScanToEnd = false;
                try {
                    if (!checkΣPatterns()) {
                        return _lastLookaheadSucceeded = false;
                    }
                }
                finally {
                    PopLookaheadStack();
                    _currentLookaheadProduction = prevProduction4014;
                }
                if (_hitFailure || _remainingLookahead <= 0) {
                    return _lastLookaheadSucceeded = !_hitFailure;
                }
                // Lookahead Code for ZeroOrOne specified at Python.javacc:491:7
                var token4015 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ491Σ8())) {
                    currentLookaheadToken = token4015;
                }

                if (_hitFailure || _remainingLookahead <= 0) {
                    return _lastLookaheadSucceeded = !_hitFailure;
                }
                // Lookahead Code for RegexpStringLiteral specified at Python.javacc:492:7
                if (!ScanToken(TokenType.COLON)) {
                    return _lastLookaheadSucceeded = false;
                }

                if (_hitFailure || _remainingLookahead <= 0) {
                    return _lastLookaheadSucceeded = !_hitFailure;
                }
                // Lookahead Code for NonTerminal specified at Python.javacc:493:7
                PushOntoLookaheadStack("CaseBlock", "Python.javacc", 493, 7);
                var prevProduction4016 = _currentLookaheadProduction;
                _currentLookaheadProduction = "Block";
                ScanToEnd = true;
                try {
                    if (!checkΣBlock()) {
                        return _lastLookaheadSucceeded = false;
                    }
                }
                finally {
                    PopLookaheadStack();
                    _currentLookaheadProduction = prevProduction4016;
                }

            }
            finally {
                tokenSource.ActiveTokenTypes = previousActives4012;
                if (somethingChanged4013) {
                    tokenSource.Reset(GetToken(0));
                    _nextTokenType = null;
                }
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣPatterns() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:499:4
            var token4017 = currentLookaheadToken;
            var remainingLookahead4017 = _remainingLookahead;
            var hitFailure4017 = _hitFailure;
            if (!checkΣPython_javaccΣ499Σ4()) {
                currentLookaheadToken = token4017;
                _remainingLookahead = remainingLookahead4017;
                _hitFailure = hitFailure4017;
                if (!checkΣPython_javaccΣ501Σ4()) {
                    currentLookaheadToken = token4017;
                    _remainingLookahead = remainingLookahead4017;
                    _hitFailure = hitFailure4017;
                    return _lastLookaheadSucceeded = false;
                }
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣStarPattern() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:505:4
            if (!ScanToken(TokenType.STAR)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:505:8
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣMaybeStarPattern() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:508:25
            var token4018 = currentLookaheadToken;
            var remainingLookahead4018 = _remainingLookahead;
            var hitFailure4018 = _hitFailure;
            if (!checkΣPython_javaccΣ508Σ25()) {
                currentLookaheadToken = token4018;
                _remainingLookahead = remainingLookahead4018;
                _hitFailure = hitFailure4018;
                if (!checkΣPython_javaccΣ508Σ39()) {
                    currentLookaheadToken = token4018;
                    _remainingLookahead = remainingLookahead4018;
                    _hitFailure = hitFailure4018;
                    return _lastLookaheadSucceeded = false;
                }
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣClosedPattern() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:511:4
            var token4019 = currentLookaheadToken;
            var remainingLookahead4019 = _remainingLookahead;
            var hitFailure4019 = _hitFailure;
            if (!checkΣPython_javaccΣ511Σ4()) {
                currentLookaheadToken = token4019;
                _remainingLookahead = remainingLookahead4019;
                _hitFailure = hitFailure4019;
                if (!checkΣPython_javaccΣ513Σ4()) {
                    currentLookaheadToken = token4019;
                    _remainingLookahead = remainingLookahead4019;
                    _hitFailure = hitFailure4019;
                    if (!checkΣPython_javaccΣ515Σ4()) {
                        currentLookaheadToken = token4019;
                        _remainingLookahead = remainingLookahead4019;
                        _hitFailure = hitFailure4019;
                        if (!checkΣPython_javaccΣ517Σ4()) {
                            currentLookaheadToken = token4019;
                            _remainingLookahead = remainingLookahead4019;
                            _hitFailure = hitFailure4019;
                            if (!checkΣPython_javaccΣ519Σ4()) {
                                currentLookaheadToken = token4019;
                                _remainingLookahead = remainingLookahead4019;
                                _hitFailure = hitFailure4019;
                                if (!checkΣPython_javaccΣ521Σ4()) {
                                    currentLookaheadToken = token4019;
                                    _remainingLookahead = remainingLookahead4019;
                                    _hitFailure = hitFailure4019;
                                    return _lastLookaheadSucceeded = false;
                                }
                            }
                        }
                    }
                }
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣGroupPattern() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:524:16
            if (!ScanToken(TokenType.LPAREN)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:524:20
            PushOntoLookaheadStack("GroupPattern", "Python.javacc", 524, 20);
            var prevProduction4020 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Pattern";
            ScanToEnd = true;
            try {
                if (!checkΣPattern()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction4020;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:524:28
            if (!ScanToken(TokenType.RPAREN)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣKeyValuePattern() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:526:19
            var token4021 = currentLookaheadToken;
            var remainingLookahead4021 = _remainingLookahead;
            var hitFailure4021 = _hitFailure;
            if (!checkΣPython_javaccΣ526Σ19()) {
                currentLookaheadToken = token4021;
                _remainingLookahead = remainingLookahead4021;
                _hitFailure = hitFailure4021;
                if (!checkΣPython_javaccΣ526Σ36()) {
                    currentLookaheadToken = token4021;
                    _remainingLookahead = remainingLookahead4021;
                    _hitFailure = hitFailure4021;
                    return _lastLookaheadSucceeded = false;
                }
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:526:47
            if (!ScanToken(TokenType.COLON)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:526:51
            PushOntoLookaheadStack("KeyValuePattern", "Python.javacc", 526, 51);
            var prevProduction4022 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Pattern";
            ScanToEnd = true;
            try {
                if (!checkΣPattern()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction4022;
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣItemsPattern() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:528:16
            PushOntoLookaheadStack("ItemsPattern", "Python.javacc", 528, 16);
            var prevProduction4023 = _currentLookaheadProduction;
            _currentLookaheadProduction = "KeyValuePattern";
            ScanToEnd = false;
            try {
                if (!checkΣKeyValuePattern()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction4023;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:528:32
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token4024 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ528Σ33())) {
                    currentLookaheadToken = token4024;
                    break;
                }
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣMappingPattern() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:531:3
            if (!ScanToken(TokenType.LBRACE)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:532:6
            var token4025 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ533Σ10())) {
                currentLookaheadToken = token4025;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:537:3
            if (!ScanToken(TokenType.RBRACE)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣDoubleStarPattern() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:540:21
            if (!ScanToken(TokenType.STAR_STAR)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:540:26
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣLiteralPattern() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:543:4
            var token4026 = currentLookaheadToken;
            var remainingLookahead4026 = _remainingLookahead;
            var hitFailure4026 = _hitFailure;
            if (!ScanToken(TokenType.NONE)) {
                currentLookaheadToken = token4026;
                _remainingLookahead = remainingLookahead4026;
                _hitFailure = hitFailure4026;
                if (!ScanToken(TokenType.TRUE)) {
                    currentLookaheadToken = token4026;
                    _remainingLookahead = remainingLookahead4026;
                    _hitFailure = hitFailure4026;
                    if (!ScanToken(TokenType.FALSE)) {
                        currentLookaheadToken = token4026;
                        _remainingLookahead = remainingLookahead4026;
                        _hitFailure = hitFailure4026;
                        if (!checkΣPython_javaccΣ549Σ4()) {
                            currentLookaheadToken = token4026;
                            _remainingLookahead = remainingLookahead4026;
                            _hitFailure = hitFailure4026;
                            if (!checkΣPython_javaccΣ551Σ4()) {
                                currentLookaheadToken = token4026;
                                _remainingLookahead = remainingLookahead4026;
                                _hitFailure = hitFailure4026;
                                return _lastLookaheadSucceeded = false;
                            }
                        }
                    }
                }
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣMaybeSequencePattern() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:555:4
            PushOntoLookaheadStack("MaybeSequencePattern", "Python.javacc", 555, 4);
            var prevProduction4027 = _currentLookaheadProduction;
            _currentLookaheadProduction = "MaybeStarPattern";
            ScanToEnd = false;
            try {
                if (!checkΣMaybeStarPattern()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction4027;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:555:21
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token4028 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ555Σ22())) {
                    currentLookaheadToken = token4028;
                    break;
                }
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:555:51
            var token4029 = currentLookaheadToken;
            if (!(ScanToken(TokenType.COMMA))) {
                currentLookaheadToken = token4029;
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣOpenSequencePattern() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:559:4
            PushOntoLookaheadStack("OpenSequencePattern", "Python.javacc", 559, 4);
            var prevProduction4030 = _currentLookaheadProduction;
            _currentLookaheadProduction = "MaybeStarPattern";
            ScanToEnd = true;
            try {
                if (!checkΣMaybeStarPattern()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction4030;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:559:21
            if (!ScanToken(TokenType.COMMA)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 0;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:559:30
            var token4031 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ559Σ31())) {
                currentLookaheadToken = token4031;
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣSequencePattern() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:563:5
            var token4032 = currentLookaheadToken;
            var remainingLookahead4032 = _remainingLookahead;
            var hitFailure4032 = _hitFailure;
            if (!checkΣPython_javaccΣ563Σ5()) {
                currentLookaheadToken = token4032;
                _remainingLookahead = remainingLookahead4032;
                _hitFailure = hitFailure4032;
                if (!checkΣPython_javaccΣ565Σ5()) {
                    currentLookaheadToken = token4032;
                    _remainingLookahead = remainingLookahead4032;
                    _hitFailure = hitFailure4032;
                    return _lastLookaheadSucceeded = false;
                }
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣClassPattern() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:569:4
            PushOntoLookaheadStack("ClassPattern", "Python.javacc", 569, 4);
            var prevProduction4033 = _currentLookaheadProduction;
            _currentLookaheadProduction = "NameOrAttribute";
            ScanToEnd = true;
            try {
                if (!checkΣNameOrAttribute()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction4033;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:570:4
            if (!ScanToken(TokenType.LPAREN)) {
                return _lastLookaheadSucceeded = false;
            }

            if (!ScanToEnd && _lookaheadRoutineNesting <= 1) {
                _remainingLookahead = 0;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:572:7
            var token4034 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ573Σ11Σ())) {
                currentLookaheadToken = token4034;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:578:4
            if (!ScanToken(TokenType.RPAREN)) {
                return _lastLookaheadSucceeded = false;
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣPositionalPatterns() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:582:4
            PushOntoLookaheadStack("PositionalPatterns", "Python.javacc", 582, 4);
            var prevProduction4035 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Pattern";
            ScanToEnd = false;
            try {
                if (!checkΣPattern()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction4035;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:583:4
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token4036 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ586Σ8())) {
                    currentLookaheadToken = token4036;
                    break;
                }
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣKeywordPattern() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:591:18
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:591:25
            if (!ScanToken(TokenType.ASSIGN)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:591:29
            PushOntoLookaheadStack("KeywordPattern", "Python.javacc", 591, 29);
            var prevProduction4037 = _currentLookaheadProduction;
            _currentLookaheadProduction = "Pattern";
            ScanToEnd = true;
            try {
                if (!checkΣPattern()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction4037;
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣKeywordPatterns() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:593:19
            PushOntoLookaheadStack("KeywordPatterns", "Python.javacc", 593, 19);
            var prevProduction4038 = _currentLookaheadProduction;
            _currentLookaheadProduction = "KeywordPattern";
            ScanToEnd = false;
            try {
                if (!checkΣKeywordPattern()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction4038;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:593:34
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token4039 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ593Σ35())) {
                    currentLookaheadToken = token4039;
                    break;
                }
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣOrPattern() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:595:13
            PushOntoLookaheadStack("OrPattern", "Python.javacc", 595, 13);
            var prevProduction4040 = _currentLookaheadProduction;
            _currentLookaheadProduction = "ClosedPattern";
            ScanToEnd = false;
            try {
                if (!checkΣClosedPattern()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction4040;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:595:27
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token4041 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ595Σ28())) {
                    currentLookaheadToken = token4041;
                    break;
                }
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣPattern() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:597:11
            PushOntoLookaheadStack("Pattern", "Python.javacc", 597, 11);
            var prevProduction4042 = _currentLookaheadProduction;
            _currentLookaheadProduction = "OrPattern";
            ScanToEnd = false;
            try {
                if (!checkΣOrPattern()) {
                    return _lastLookaheadSucceeded = false;
                }
            }
            finally {
                PopLookaheadStack();
                _currentLookaheadProduction = prevProduction4042;
            }
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:597:21
            var token4043 = currentLookaheadToken;
            if (!(checkΣPython_javaccΣ597Σ22())) {
                currentLookaheadToken = token4043;
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣSubjectExpression() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:600:4
            var token4044 = currentLookaheadToken;
            var remainingLookahead4044 = _remainingLookahead;
            var hitFailure4044 = _hitFailure;
            if (!checkΣPython_javaccΣ600Σ4()) {
                currentLookaheadToken = token4044;
                _remainingLookahead = remainingLookahead4044;
                _hitFailure = hitFailure4044;
                if (!checkΣPython_javaccΣ602Σ4()) {
                    currentLookaheadToken = token4044;
                    _remainingLookahead = remainingLookahead4044;
                    _hitFailure = hitFailure4044;
                    return _lastLookaheadSucceeded = false;
                }
            }


            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣAttribute() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:605:13
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for OneOrMore specified at Python.javacc:605:20
            if (!(checkΣPython_javaccΣ605Σ21())) {
                return _lastLookaheadSucceeded = false;
            }
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token4045 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ605Σ21())) {
                    currentLookaheadToken = token4045;
                    break;
                }
            }



            return _lastLookaheadSucceeded = true;
        }


        private bool checkΣNameOrAttribute() {
            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:607:34
            if (!ScanToken(TokenType.NAME)) {
                return _lastLookaheadSucceeded = false;
            }

            if (_hitFailure || _remainingLookahead <= 0) {
                return _lastLookaheadSucceeded = !_hitFailure;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:607:41
            while (_remainingLookahead > 0 && ! _hitFailure) {
                var token4046 = currentLookaheadToken;
                if (!(checkΣPython_javaccΣ607Σ42())) {
                    currentLookaheadToken = token4046;
                    break;
                }
            }



            return _lastLookaheadSucceeded = true;
        }




        private void PushOntoLookaheadStack(string methodName, string fileName, uint line, uint column) {
            _lookaheadStack.Add(new NonTerminalCall(this, fileName, methodName, line, column));
        }

        private void PopLookaheadStack() {
            var ntc = _lookaheadStack.Pop();
            _currentLookaheadProduction = ntc.ProductionName;
            ScanToEnd = ntc.ScanToEnd;
        }

        private Token ConsumeToken(TokenType expectedType) {
            var oldToken = LastConsumedToken;
            var nextToken = NextToken(LastConsumedToken);
            if (nextToken.Type != expectedType) {
                nextToken = HandleUnexpectedTokenType(expectedType, nextToken);
            }
            LastConsumedToken = nextToken;
            _nextTokenType = null;
            if (BuildTree && TokensAreNodes) {
            }
            PushNode(LastConsumedToken);
            return LastConsumedToken;
        }

        private Token HandleUnexpectedTokenType(TokenType expectedType, Token nextToken) {
            throw new ParseException(this, null, nextToken, Utils.EnumSet(expectedType));
        }




    }

/*

Still TODO:

*/
}
